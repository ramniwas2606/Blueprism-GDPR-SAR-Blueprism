<?xml version="1.0" encoding="utf-8"?>
<bpr:release xmlns:bpr="http://www.blueprism.co.uk/product/release">
    <bpr:name>gdprsar.bprelease</bpr:name>
    <bpr:release-notes>gdprsar.bprelease</bpr:release-notes>
    <bpr:created>2019-11-24 15:52:21Z</bpr:created>
    <bpr:package-id>2</bpr:package-id>
    <bpr:package-name>GDPRSAR_24Nov2019</bpr:package-name>
    <bpr:user-created-by>admin</bpr:user-created-by>
    <bpr:contents count="28">
        <process id="ca95920d-9962-428b-aff8-96a966dce362" name="GDPR-SAR Get User Details" published="true" xmlns="http://www.blueprism.co.uk/product/process"><process name="GDPR-SAR Get User Details" version="1.0" bpversion="6.6.0.15260" narrative="This process is to fetch User details and share it with User through email" byrefcollection="true"><view><camerax>94</camerax><cameray>54</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="47035526-50c6-4fee-9655-0c1a4c785b9d" type="Normal" published="False"><name>Startup</name><view><camerax>15</camerax><cameray>615</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="23e12da6-7991-4140-b58a-19954945ca7d" type="Normal" published="False"><name>Get Data from Excel</name><view><camerax>100</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="2fed4c53-23ed-4284-a173-4901c29e4eea" type="Normal" published="False"><name>Generate SQL Statement</name><view><camerax>3</camerax><cameray>138</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d650bc08-8fbf-465e-9189-908ff424a353" type="Normal" published="False"><name>Execute SQL</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="07df77d3-e38c-4149-944b-21efdd8189f4" type="Normal" published="False"><name>Get HTML Email Body</name><view><camerax>-14</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="86ab28b0-c95b-46eb-a413-6bed7408ec9a" type="Normal" published="False"><name>Send Email Notification</name><view><camerax>0</camerax><cameray>-48</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="3d74cace-ec1b-474c-8099-0a7e8a46919a" type="Normal" published="False"><name>Create Report</name><view><camerax>101</camerax><cameray>69</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="05ab5a2a-4a28-49b8-a142-3656a2a81f53" type="Normal" published="False"><name>Archive Excel File</name><view><camerax>100</camerax><cameray>69</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="5e6a3119-4797-4099-a7a4-b02a7a1e97b3" name="Start" type="Start"><display x="-120" y="-165" /><onsuccess>d893b0ea-960d-463a-9c08-11cc8606633a</onsuccess></stage><stage stageid="e61ff39f-3ed8-4b00-a524-509124c46bc9" name="End" type="End"><display x="-120" y="1005" /></stage><stage stageid="8a5ef070-85e8-44e5-ba72-c41b460a2cbf" name="Stage1" type="ProcessInfo"><display x="-375" y="-150" w="210" h="90" /></stage><stage stageid="a5dbf06b-18d2-4442-91fe-1afd1d8196fa" name="GUD_Database Credential Name" type="Data"><display x="-375" y="-15" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="1cb40e31-4ffc-40da-897b-b72f1a74da37" name="GUD_Excel Path" type="Data"><display x="-435" y="-60" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="5f0027cf-1604-4a7c-9566-54341951c41c" name="GUD_Excel Sheet Name" type="Data"><display x="-375" y="-60" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="353d5fee-4c41-44f1-96ba-a3ea668145c6" name="GUD_Controller Email ID" type="Data"><display x="-315" y="-60" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="ece65b33-d4e3-4380-af8e-453924481eb0" name="Get Data from Excel" type="SubSheetInfo"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-405" y="-150" w="150" h="90" /></stage><stage stageid="15c2dadd-bf48-4d2b-8317-f4291c394a0a" name="Start" type="Start"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-180" y="-165" /><inputs><input type="text" name="Excel Path" narrative="Path of the Excel Sheet" stage="Excel Path" /><input type="text" name="Sheetname" narrative="Sheetname" stage="Sheetname" /></inputs><onsuccess>4a30ffb5-24f7-4197-8dd0-274651f7c9fc</onsuccess></stage><stage stageid="aba1b8f5-7ccf-48c2-908b-45068f0c00b8" name="End" type="End"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-180" y="540" /><outputs><output type="collection" name="Excel Data" narrative="Excel Data" stage="Excel Data" /><output type="number" name="Row Count" narrative="Count of Rows in Excel Data" stage="Row Count" /></outputs></stage><stage stageid="1dfbefc3-12ff-4508-82eb-8f52409c8d37" name="Excel Path" type="Data"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-435" y="-60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d234269f-4ac5-4754-b04f-46341c6cb3b8" name="Input Data" type="Block"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Input Data</narrative><display x="-480" y="-90" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="a0c6fd0a-4e9d-40c2-9a90-38777fe51991" name="Sheetname" type="Data"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-375" y="-60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="df40b1fa-d8e5-424a-9ff1-81bcb7eedbfe" name="Create Instance" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><loginhibit onsuccess="true" /><narrative>Create Instance</narrative><display x="-180" y="165" /><inputs><input type="flag" name="Enable Events" narrative="Flag to indicate that events should be enabled / disabled on the attached instance - defaulted to True" expr="" /></inputs><outputs><output type="number" name="handle" narrative="An integer which can be used to identify the created instance in subsequent actions" stage="handle" /></outputs><onsuccess>d0d2cff4-8cb6-4e1b-a30b-810c428f65b5</onsuccess><resource object="MS Excel VBO" action="Create Instance" /></stage><stage stageid="a95797b9-9b39-4065-b1b5-83eff8bfc41d" name="handle" type="Data"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-435" y="15" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d0d2cff4-8cb6-4e1b-a30b-810c428f65b5" name="Open Workbook" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><loginhibit onsuccess="true" /><narrative>Open Workbook</narrative><display x="-180" y="210" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required workbook should be opened. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="File name" narrative="The path and name of the file which should be opened." expr="[Excel Path]" /><input type="number" name="Timeout" friendlyname="Timeout" narrative="Amount of time to try opening workbook before timing out. Default is 60." expr="" /></inputs><outputs><output type="text" name="Workbook Name" narrative="The name used by Excel to identify the workbook - usually this is the file name (without the path)." stage="Workbook Name" /></outputs><onsuccess>3dacfe0f-519a-45c1-9bee-7b22242b28bb</onsuccess><resource object="MS Excel VBO" action="Open Workbook" /></stage><stage stageid="2b33f4f6-bfcc-424f-8db2-ac33e3f03b70" name="Workbook Name" type="Data"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-375" y="15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7a240a43-7ffa-4570-842d-553912e8b318" name="Check File Exists ?" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Check File Exists ?</narrative><display x="-180" y="75" /><inputs><input type="text" name="File Name" narrative="The name of the file to check" expr="[Excel Path]" /></inputs><outputs><output type="flag" name="Exists" narrative="True if the file exists" stage="File Exists ?" /></outputs><onsuccess>5972bd7a-a873-4e82-aa55-5c884eb30465</onsuccess><resource object="Utility - File Management" action="File Exists" /></stage><stage stageid="9faaca80-512c-4020-939f-61032069834e" name="File Exists ?" type="Data"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-435" y="105" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5972bd7a-a873-4e82-aa55-5c884eb30465" name="File Exists ?" type="Decision"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>File Exists ?</narrative><display x="-180" y="120" /><decision expression="[File Exists ?]" /><ontrue>df40b1fa-d8e5-424a-9ff1-81bcb7eedbfe</ontrue><onfalse>a5d02d01-6982-491d-8c2b-ed042d2fac04</onfalse></stage><stage stageid="a5d02d01-6982-491d-8c2b-ed042d2fac04" name="File Does Not Exists Exception" type="Exception"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>File Does Not Exists Exception</narrative><display x="-90" y="120" /><exception type="Business" detail="&quot;The file &quot;&quot;&quot;&amp;[Excel Path]&amp;&quot;&quot;&quot;&quot;&amp;&quot; is not available at this location&quot;" /></stage><stage stageid="3dacfe0f-519a-45c1-9bee-7b22242b28bb" name="Sheetname Provided ?" type="Decision"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Check if Sheetname Provided ?</narrative><display x="-180" y="255" /><decision expression="Trim([Sheetname])&lt;&gt;&quot;&quot;" /><ontrue>40a4acce-3812-4819-a0ab-0945ebfbd2cd</ontrue><onfalse>22c77ffe-c5d4-4615-b0c6-55cfe7f459ae</onfalse></stage><stage stageid="ec247cb7-cc96-4a45-b3a6-83ee8634f02c" name="Get Excel Data as Collection" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><loginhibit onsuccess="true" /><narrative>Get Excel Data as Collection</narrative><display x="-180" y="345" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet which should be retrieved resides. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The name of the workbook which contains the sheet required. The default empty text indicates the currently active workbook on the specified instance." expr="[Workbook Name]" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet within the specified workbook which should be written to a collection. The default empty text indicates the currently active worksheet within the specified workbook." expr="[Sheetname]" /></inputs><outputs><output type="collection" name="Data" narrative="The collection containing the data from the specified worksheet - the column IDs will be gleaned from the first row on the sheet being retrieved." stage="Excel Data" /></outputs><onsuccess>477f7d4f-1c43-4249-be15-5942c8d0cf16</onsuccess><resource object="MS Excel VBO" action="Get Worksheet As Collection" /></stage><stage stageid="74626d5b-0a3e-4854-aa09-833a39eab93c" name="Excel Data" type="Collection"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-435" y="180" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="154896ee-c4c1-48b1-898f-5d828053cadb" name="Worksheet Recover" type="Block"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-225" y="315" w="165" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="923eedb2-afb2-4752-b70e-ac5c183d8ae0" name="Worksheet Recover" type="Recover"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Worksheet Recover</narrative><display x="-105" y="345" /><onsuccess>164a3e2a-758a-4146-ab66-7220e76a790b</onsuccess></stage><stage stageid="164a3e2a-758a-4146-ab66-7220e76a790b" name="Get Exception Details" type="Calculation"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Get Exception Details</narrative><display x="-15" y="345" /><onsuccess>24e726a9-de5c-4c86-ace2-daf90e44b83d</onsuccess><calculation expression="ExceptionDetail()" stage="Exception" /></stage><stage stageid="59d58d6d-2547-4d70-8e4a-f27e750c6c6f" name="Exception" type="Data"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-435" y="255" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="24e726a9-de5c-4c86-ace2-daf90e44b83d" name="Worksheet not found exception ?" type="Decision"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Worksheet not found exception ?</narrative><display x="90" y="345" w="120" h="30" /><decision expression="InStr(Lower([Exception]), &quot;no worksheet was found with the name&quot;)&gt;0" /><ontrue>9f60aa1e-0f9f-4bfb-9f9d-f34c825ac87e</ontrue><onfalse>556b1b4a-8b82-4ad6-b70b-ce962ea4405a</onfalse></stage><stage stageid="a060ba2f-883b-4bcd-85d7-ea05c3dc2ba6" name="Throw Worksheet not found exception" type="Exception"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Throw Worksheet not found exception</narrative><display x="270" y="345" /><exception type="Business" detail="&quot;The worksheet name provided as &quot;&quot;&quot;&amp;[Sheetname]&amp;&quot;&quot;&quot; is not available within the excel file located at &quot;&quot;&quot;&amp;[Excel Path]&amp;&quot;&quot;&quot;&quot;" /></stage><stage stageid="b84d4b49-f9a6-4dc2-b960-acb4f0a87dec" name="Throw Worksheet Exception" type="Exception"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Throw Worksheet Exception</narrative><display x="270" y="390" /><exception type="System" detail="[Exception]" /></stage><stage stageid="556b1b4a-8b82-4ad6-b70b-ce962ea4405a" name="Anchor1" type="Anchor"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="90" y="390" w="10" h="10" /><onsuccess>325dfc22-573b-4364-b478-898e9487602a</onsuccess></stage><stage stageid="477f7d4f-1c43-4249-be15-5942c8d0cf16" name="Close Instance" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><loginhibit onsuccess="true" /><narrative>Close Instance</narrative><display x="-180" y="405" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance to be closed. Zero indicates the currently active instance." expr="[handle]" /><input type="flag" name="Save Changes" narrative="True to save the changes to the open workbooks on the instance, False to discard any changes. Default is False." expr="False" /></inputs><onsuccess>ef32d60b-8543-431b-a890-8fb220f2228a</onsuccess><resource object="MS Excel VBO" action="Close Instance" /></stage><stage stageid="3b219862-db9d-4ca6-be67-2053900c0644" name="Set Sheetname" type="Calculation"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="45" y="300" /><onsuccess>40a4acce-3812-4819-a0ab-0945ebfbd2cd</onsuccess><calculation expression="[Worksheet Names.Name]" stage="Sheetname" /></stage><stage stageid="22c77ffe-c5d4-4615-b0c6-55cfe7f459ae" name="Get Sheetnames" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><loginhibit onsuccess="true" /><narrative>Get all Sheetnames from excel</narrative><display x="-105" y="255" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the number of rows is required. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The name of the workbook on which the number of rows is required. The default empty text value indicates the currently active workbook on the specified instance." expr="[Workbook Name]" /></inputs><outputs><output type="collection" name="Worksheet Names" narrative="A collection of worksheet names found in the specified workbook" stage="Worksheet Names" /></outputs><onsuccess>6ee4a6ac-4abd-47d9-8cb7-d3b2feb6d36e</onsuccess><resource object="MS Excel VBO" action="Get Worksheet Names" /></stage><stage stageid="5b572419-0f17-475f-80da-881d6910935b" name="Worksheet Names" type="Collection"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-435" y="60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6ee4a6ac-4abd-47d9-8cb7-d3b2feb6d36e" name="Get Row Count" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Get Row Count</narrative><display x="-30" y="255" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Worksheet Names&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Worksheet Count" /></outputs><onsuccess>1f4dbaec-3fdf-4ecc-9372-8fcbadde00d4</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="4c97d3ee-8579-43e5-b1c8-03110c30884d" name="Worksheet Count" type="Data"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-375" y="60" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1f4dbaec-3fdf-4ecc-9372-8fcbadde00d4" name="More than 1 Sheets ?" type="Decision"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Check if excel sheet has More than 1 Sheets ?</narrative><display x="45" y="255" /><decision expression="[Worksheet Count]&gt;1" /><ontrue>3a185226-f89d-4196-a65e-cd0d7ff0e7ac</ontrue><onfalse>3b219862-db9d-4ca6-be67-2053900c0644</onfalse></stage><stage stageid="db519bac-ab7f-41c3-ad0d-301d4595a7f1" name="Throw more than one sheets Exception" type="Exception"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Throw more than one sheets Exception</narrative><display x="270" y="255" /><exception type="Business" detail="&quot;More than one sheets are available in the excel file &quot;&quot;&quot;&amp;[Excel Path]&amp;&quot;&quot;&quot; while, sheetname/tab name was not provided in the Environment Varaible GUD_Excel Sheet Name, hence BOT could not understand which sheet/tab the data is to be picked from&quot;" /></stage><stage stageid="40a4acce-3812-4819-a0ab-0945ebfbd2cd" name="Anchor2" type="Anchor"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-180" y="300" w="10" h="10" /><onsuccess>ec247cb7-cc96-4a45-b3a6-83ee8634f02c</onsuccess></stage><stage stageid="5c74290e-be89-437b-b7bb-4b91a2d62fd8" name="Excel Variables" type="Block"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Excel Variables</narrative><display x="-480" y="-15" w="150" h="150" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="719ece5e-525a-4c8a-afd9-0847959f2698" name="Exceptions" type="Block"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Exceptions</narrative><display x="-480" y="225" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="FF0000" /></stage><stage stageid="b5c3a9b4-3100-484f-8bdd-d64307f0d64f" name="Get Data from Excel" type="SubSheet"><display x="-120" y="-75" /><inputs><input type="text" name="Excel Path" narrative="Path of the Excel Sheet" expr="[GUD_Excel Path]" /><input type="text" name="Sheetname" narrative="Sheetname" expr="[GUD_Excel Sheet Name]" /></inputs><outputs><output type="collection" name="Excel Data" narrative="Excel Data" stage="Excel Data" /><output type="number" name="Row Count" narrative="Count of Rows in Excel Data" stage="Row Count" /></outputs><onsuccess>a7dbd941-974d-4e10-a7d7-034160caebe8</onsuccess><processid>23e12da6-7991-4140-b58a-19954945ca7d</processid></stage><stage stageid="ae5db546-8645-418f-9a5d-412fa83b4181" name="Excel Data" type="Collection"><display x="-435" y="285" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="4a30ffb5-24f7-4197-8dd0-274651f7c9fc" name="Excel Path Starts from Quotes ?" type="Decision"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Check if Excel Path starts from Quotes ?</narrative><display x="-180" y="-120" /><decision expression="Left(Trim([Excel Path]), 1) = &quot;&quot;&quot;&quot; OR Left(Trim([Excel Path]), 1) = &quot;'&quot;" /><ontrue>b53485fe-5a91-4b83-866a-11b6fb72ace4</ontrue><onfalse>6b2872ce-9bb7-47f0-841d-5e37a18baa6a</onfalse></stage><stage stageid="b53485fe-5a91-4b83-866a-11b6fb72ace4" name="Remove Starting  Quotes from Excel Path" type="Calculation"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Remove Starting  Quotes from Excel Path</narrative><display x="-180" y="-75" /><onsuccess>36be4041-d485-4b06-8de5-621b2d84e8a3</onsuccess><calculation expression="Right(Trim([Excel Path]), Len([Excel Path])-1)" stage="Excel Path" /></stage><stage stageid="897cd5c7-ae55-4412-97ff-4248963c544b" name="Excel Path Ends from Quotes ?" type="Decision"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Check if Excel Path ends from Quotes ?</narrative><display x="-180" y="-15" /><decision expression="Right(Trim([Excel Path]), 1) = &quot;&quot;&quot;&quot; OR Right(Trim([Excel Path]), 1) = &quot;'&quot;" /><ontrue>2e890a0b-85dd-4f49-8ba8-ad8aa89acc21</ontrue><onfalse>3027984f-f628-47ac-b8be-c690837a7e92</onfalse></stage><stage stageid="2e890a0b-85dd-4f49-8ba8-ad8aa89acc21" name="Remove End Quotes from Excel Path" type="Calculation"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Remove end Quotes from Excel Path</narrative><display x="-180" y="30" /><onsuccess>7a240a43-7ffa-4570-842d-553912e8b318</onsuccess><calculation expression="Left(Trim([Excel Path]), Len([Excel Path])-1)" stage="Excel Path" /></stage><stage stageid="6b2872ce-9bb7-47f0-841d-5e37a18baa6a" name="Anchor3" type="Anchor"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-135" y="-120" w="10" h="10" /><onsuccess>e47e4b05-ef6d-4a4e-ab73-8a5c895af9dd</onsuccess></stage><stage stageid="e47e4b05-ef6d-4a4e-ab73-8a5c895af9dd" name="Anchor4" type="Anchor"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-135" y="-45" w="10" h="10" /><onsuccess>36be4041-d485-4b06-8de5-621b2d84e8a3</onsuccess></stage><stage stageid="36be4041-d485-4b06-8de5-621b2d84e8a3" name="Anchor5" type="Anchor"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-180" y="-45" w="10" h="10" /><onsuccess>897cd5c7-ae55-4412-97ff-4248963c544b</onsuccess></stage><stage stageid="2d79ff49-fda4-430f-a0df-7f8e8af93b38" name="Anchor6" type="Anchor"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-135" y="75" w="10" h="10" /><onsuccess>7a240a43-7ffa-4570-842d-553912e8b318</onsuccess></stage><stage stageid="3027984f-f628-47ac-b8be-c690837a7e92" name="Anchor7" type="Anchor"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-135" y="-15" w="10" h="10" /><onsuccess>2d79ff49-fda4-430f-a0df-7f8e8af93b38</onsuccess></stage><stage stageid="3a185226-f89d-4196-a65e-cd0d7ff0e7ac" name="Close Instance" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><loginhibit onsuccess="true" /><narrative>Close Instance</narrative><display x="120" y="255" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance to be closed. Zero indicates the currently active instance." expr="[handle]" /><input type="flag" name="Save Changes" narrative="True to save the changes to the open workbooks on the instance, False to discard any changes. Default is False." expr="False" /></inputs><onsuccess>db519bac-ab7f-41c3-ad0d-301d4595a7f1</onsuccess><resource object="MS Excel VBO" action="Close Instance" /></stage><stage stageid="9f60aa1e-0f9f-4bfb-9f9d-f34c825ac87e" name="Close Instance" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><loginhibit onsuccess="true" /><narrative>Close Instance</narrative><display x="195" y="345" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance to be closed. Zero indicates the currently active instance." expr="[handle]" /><input type="flag" name="Save Changes" narrative="True to save the changes to the open workbooks on the instance, False to discard any changes. Default is False." expr="False" /></inputs><onsuccess>a060ba2f-883b-4bcd-85d7-ea05c3dc2ba6</onsuccess><resource object="MS Excel VBO" action="Close Instance" /></stage><stage stageid="325dfc22-573b-4364-b478-898e9487602a" name="Close Instance" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><loginhibit onsuccess="true" /><narrative>Close Instance</narrative><display x="195" y="390" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance to be closed. Zero indicates the currently active instance." expr="[handle]" /><input type="flag" name="Save Changes" narrative="True to save the changes to the open workbooks on the instance, False to discard any changes. Default is False." expr="False" /></inputs><onsuccess>b84d4b49-f9a6-4dc2-b960-acb4f0a87dec</onsuccess><resource object="MS Excel VBO" action="Close Instance" /></stage><stage stageid="613812b0-1e3d-457a-9224-20132ec342ab" name="GUD_Database Server" type="Data"><display x="-315" y="-15" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="e6869735-1386-434e-b702-81e8c6ea51b3" name="GUD_Database Name" type="Data"><display x="-315" y="30" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="16435691-73d9-4e2d-b880-2ac5234214f1" name="GUD_Database Table Fields" type="Data"><display x="-375" y="30" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="e852acc6-d563-4377-bc3f-d1b6e93c3e07" name="GUD_Database Tables" type="Data"><display x="-435" y="30" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="890abfb0-6a32-4ace-808b-dcfedd690f41" name="GUD_Database Tables Criterias" type="Data"><display x="-315" y="75" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="bb7115f9-d05f-4f0e-8afb-d97f4f5dbdb7" name="Generate SQL Statement" type="SubSheetInfo"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-390" y="-150" w="180" h="90" /></stage><stage stageid="ba7354ef-9ffb-430d-a29d-b5a09e2d9ae2" name="Start" type="Start"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-210" y="-150" /><inputs><input type="text" name="Database Credentials" narrative="Database Credentials" stage="Credential Name" /><input type="text" name="Database Server" narrative="Database Credentials" stage="Database Server" /><input type="text" name="Database Name" narrative="Database Name" stage="Database Name" /><input type="text" name="Table Names" narrative="Name of the tables" stage="Database Tables" /><input type="text" name="Table Fields" narrative="Table Fields" stage="Database Fields" /><input type="text" name="Criteria" narrative="Table Criteria" stage="Criteria" /><input type="text" name="Where Condition" narrative="Where Condition" stage="Where Clause" /></inputs><onsuccess>e7b6a3ed-76f7-49a6-be4b-ddf7e7a894e5</onsuccess></stage><stage stageid="41648d49-6f64-49cb-9689-24914661c598" name="End" type="End"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-210" y="1155" /><outputs><output type="text" name="SQL" narrative="SQL Query to be executed" stage="SQL Query" /></outputs></stage><stage stageid="e7b6a3ed-76f7-49a6-be4b-ddf7e7a894e5" name="Split Database Table Names" type="Action"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Split Database Table Names</narrative><display x="-210" y="-105" /><inputs><input type="text" name="Text to Split" narrative="The text to split" expr="[Database Tables]" /><input type="text" name="Split Char" narrative="The split delimiter" expr="&quot;,&quot;" /><input type="text" name="Collection Field Name" narrative="The name of the field for the resulting collection" expr="&quot;Table Name&quot;" /></inputs><outputs><output type="collection" name="Split Values" narrative="The resulting collection containing the split values" stage="Database Table Collection" /></outputs><onsuccess>2e36feb5-d3a2-4922-a869-ca3586c0eec2</onsuccess><resource object="Utility - Strings" action="Split Text" /></stage><stage stageid="d1a77f70-3f1c-413f-9ae9-358997212595" name="Database Tables" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-450" y="-15" /><datatype>text</datatype><initialvalue xml:space="preserve">Test1, Test2, Test3, Test4</initialvalue><private /><alwaysinit /></stage><stage stageid="0cb61741-8ff0-4e33-ae3a-8e15b34ceaa2" name="Criteria" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Criteria</narrative><display x="-330" y="-15" /><datatype>text</datatype><initialvalue xml:space="preserve">Test1.ID = Test2.ID, Test3.Name = Test2.Name, Test1.Email = Test4.Email, Test2.ID = Test4.ID</initialvalue><private /><alwaysinit /></stage><stage stageid="70e02257-029b-4fbf-97e5-99ae00030206" name="Credential Name" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-450" y="-60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="155ed1b6-364d-4fe1-b6fa-daa0092eb557" name="Database Server" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-390" y="-60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="824c4925-198a-4956-869a-ac4ea37683ba" name="Database Name" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-330" y="-60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3cbaf463-c07d-44be-b56a-eed579134ce9" name="Database Fields" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-390" y="-15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="69763b13-d60c-4045-9459-62d1e2fe7f7e" name="Startup" type="SubSheetInfo"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-375" y="-135" w="180" h="90" /></stage><stage stageid="014ef0ed-6ea4-4687-a6ea-28fac9daac36" name="Start" type="Start"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="-150" /><onsuccess>f3f01ddd-43ee-4605-bfd2-fb8dd036e59f</onsuccess></stage><stage stageid="64d59d4e-26a6-4c09-9f39-895acefa2896" name="Database Credentials Value is Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Database Credentials Value is Provided ?</narrative><display x="-195" y="255" w="90" h="30" /><decision expression="Trim([GUD_Database Credential Name]) &lt;&gt; &quot;&quot;" /><ontrue>acb56d75-804c-4373-8fcc-8014b6f1f31d</ontrue><onfalse>64e654c5-136c-4107-9de0-c317a04ed854</onfalse></stage><stage stageid="d6d8d759-a698-4be0-9a34-8031aabcc19d" name="Database Server Value is Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Database Server Value is Provided ?</narrative><display x="-195" y="315" w="90" h="30" /><decision expression="Trim([GUD_Database Server]) &lt;&gt; &quot;&quot;" /><ontrue>e756965c-aa95-4b6c-af74-7c8b4a2bf70b</ontrue><onfalse>434a3469-61c0-4618-b2a3-f44be3934e00</onfalse></stage><stage stageid="64298387-2565-4d4f-becd-374087231332" name="Database Value is Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Database Value is Provided ?</narrative><display x="-195" y="375" w="90" h="30" /><decision expression="Trim([GUD_Database Name]) &lt;&gt; &quot;&quot;" /><ontrue>27631c08-acdd-46ab-ae54-b27362267c1e</ontrue><onfalse>ac414474-931d-40fc-b8f8-ce1281fc21dc</onfalse></stage><stage stageid="93f35520-36bd-4862-9a37-b59b1311ecf6" name="Database Tables Value is Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Database Tables Value is Provided ?</narrative><display x="-195" y="435" w="90" h="30" /><decision expression="Trim([GUD_Database Tables]) &lt;&gt; &quot;&quot;" /><ontrue>e70e944b-8053-44a4-b58d-29a90b36201c</ontrue><onfalse>f92f2688-d5db-490e-b241-cf823fff03d2</onfalse></stage><stage stageid="e51f302d-6012-4fa1-8b90-539fba74136a" name="Database Table Fields Value is Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Database Table Fields Value is Provided ?</narrative><display x="-195" y="495" w="90" h="30" /><decision expression="Trim([GUD_Database Table Fields]) &lt;&gt; &quot;&quot;" /><ontrue>73b5c4e1-ee79-4c2b-9ed2-d902a95551fd</ontrue><onfalse>f5aee7af-a579-471f-badf-e14e9b80e653</onfalse></stage><stage stageid="17758f33-f258-446c-96f3-de7a6954dd23" name="Database Credentials Value is Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Database Credentials Value is Provided ?</narrative><display x="-195" y="555" w="90" h="30" /><decision expression="Trim([GUD_Database Credential Name]) &lt;&gt; &quot;&quot;" /><ontrue>eb063163-1d7f-4335-a05f-f3d716beb469</ontrue><onfalse>204310ea-634f-4c7d-9d8b-bb3bf4b3e623</onfalse></stage><stage stageid="2b93778e-6230-43df-b412-13106aae530c" name="Excel Path is Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Excel Path Value is Provided ?</narrative><display x="-195" y="135" w="90" h="30" /><decision expression="Trim([GUD_Excel Path]) &lt;&gt; &quot;&quot;" /><ontrue>b39f67da-029a-48eb-8761-7282460b97f0</ontrue><onfalse>b10aa571-cadf-4d28-a8a5-4047d28ef3ba</onfalse></stage><stage stageid="7fd1898f-7750-40ca-abbb-ada638875cf0" name="Controller Email ID Value is Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Controller Email ID Value is Provided ?</narrative><display x="-195" y="195" w="90" h="30" /><decision expression="Trim([GUD_Controller Email ID]) &lt;&gt; &quot;&quot;" /><ontrue>5699ebb1-0ba2-4e3c-9ca9-030c9a20cde4</ontrue><onfalse>16d408ef-af28-4234-9e2a-4009a7e4ad57</onfalse></stage><stage stageid="b39f67da-029a-48eb-8761-7282460b97f0" name="Anchor8" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="165" w="10" h="10" /><onsuccess>7fd1898f-7750-40ca-abbb-ada638875cf0</onsuccess></stage><stage stageid="a1249a5c-9c1d-489a-9bd8-8e74168cff58" name="Anchor15" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-90" y="165" w="10" h="10" /><onsuccess>b39f67da-029a-48eb-8761-7282460b97f0</onsuccess></stage><stage stageid="5699ebb1-0ba2-4e3c-9ca9-030c9a20cde4" name="Anchor8" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="225" w="10" h="10" /><onsuccess>64d59d4e-26a6-4c09-9f39-895acefa2896</onsuccess></stage><stage stageid="90953efb-a505-4700-9f2b-2963a7a1b214" name="Anchor15" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-90" y="225" w="10" h="10" /><onsuccess>5699ebb1-0ba2-4e3c-9ca9-030c9a20cde4</onsuccess></stage><stage stageid="acb56d75-804c-4373-8fcc-8014b6f1f31d" name="Anchor8" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="285" w="10" h="10" /><onsuccess>d6d8d759-a698-4be0-9a34-8031aabcc19d</onsuccess></stage><stage stageid="d45616a4-076a-4b95-a094-5a42262c01bc" name="Anchor15" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-90" y="285" w="10" h="10" /><onsuccess>acb56d75-804c-4373-8fcc-8014b6f1f31d</onsuccess></stage><stage stageid="e756965c-aa95-4b6c-af74-7c8b4a2bf70b" name="Anchor8" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="345" w="10" h="10" /><onsuccess>64298387-2565-4d4f-becd-374087231332</onsuccess></stage><stage stageid="e4b22273-1e47-4b31-9b0e-38dd41d6b8a0" name="Anchor15" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-90" y="345" w="10" h="10" /><onsuccess>e756965c-aa95-4b6c-af74-7c8b4a2bf70b</onsuccess></stage><stage stageid="27631c08-acdd-46ab-ae54-b27362267c1e" name="Anchor8" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="405" w="10" h="10" /><onsuccess>93f35520-36bd-4862-9a37-b59b1311ecf6</onsuccess></stage><stage stageid="2c5b9bb9-0c98-4cf4-9da3-2e1b32e7d587" name="Anchor15" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-90" y="405" w="10" h="10" /><onsuccess>27631c08-acdd-46ab-ae54-b27362267c1e</onsuccess></stage><stage stageid="e70e944b-8053-44a4-b58d-29a90b36201c" name="Anchor8" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="465" w="10" h="10" /><onsuccess>e51f302d-6012-4fa1-8b90-539fba74136a</onsuccess></stage><stage stageid="34457e65-d9d0-4854-9a88-1b77f9b284fc" name="Anchor15" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-90" y="465" w="10" h="10" /><onsuccess>e70e944b-8053-44a4-b58d-29a90b36201c</onsuccess></stage><stage stageid="73b5c4e1-ee79-4c2b-9ed2-d902a95551fd" name="Anchor8" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="525" w="10" h="10" /><onsuccess>17758f33-f258-446c-96f3-de7a6954dd23</onsuccess></stage><stage stageid="b67196b7-5bb1-45ce-a0ba-38b6376ec8f9" name="Anchor15" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-90" y="525" w="10" h="10" /><onsuccess>73b5c4e1-ee79-4c2b-9ed2-d902a95551fd</onsuccess></stage><stage stageid="eb063163-1d7f-4335-a05f-f3d716beb469" name="Anchor8" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="585" w="10" h="10" /><onsuccess>f076f2fe-af44-4552-9c80-e074227ebcd6</onsuccess></stage><stage stageid="701970bd-84b6-4d18-94f3-4d924eadc46e" name="Anchor15" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-90" y="585" w="10" h="10" /><onsuccess>eb063163-1d7f-4335-a05f-f3d716beb469</onsuccess></stage><stage stageid="a1d80b90-0ebe-4c71-8ffe-29966259f336" name="Missing Values" type="Data"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-435" y="-45" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="01fbd904-fa47-4086-a2e0-bd0abec1c115" name="All EV Values Available Flag" type="Data"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>All Environment Variables Values Available Flag</narrative><display x="-315" y="-45" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="b10aa571-cadf-4d28-a8a5-4047d28ef3ba" name="Store Values" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Values</narrative><display x="-90" y="135" /><onsuccess>a1249a5c-9c1d-489a-9bd8-8e74168cff58</onsuccess><steps><calculation expression="[Missing Values]&amp;&quot;- GUD_Excel Path&quot;&amp;NewLine()" stage="Missing Values" /><calculation expression="False" stage="All EV Values Available Flag" /></steps></stage><stage stageid="16d408ef-af28-4234-9e2a-4009a7e4ad57" name="Store Values" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Values</narrative><display x="-90" y="195" /><onsuccess>90953efb-a505-4700-9f2b-2963a7a1b214</onsuccess><steps><calculation expression="[Missing Values]&amp;&quot;- GUD_Controller Email ID&quot;&amp;NewLine()" stage="Missing Values" /><calculation expression="False" stage="All EV Values Available Flag" /></steps></stage><stage stageid="64e654c5-136c-4107-9de0-c317a04ed854" name="Store Values" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Values</narrative><display x="-90" y="255" /><onsuccess>d45616a4-076a-4b95-a094-5a42262c01bc</onsuccess><steps><calculation expression="[Missing Values]&amp;&quot;- GUD_Database Credential Name&quot;&amp;NewLine()" stage="Missing Values" /><calculation expression="False" stage="All EV Values Available Flag" /></steps></stage><stage stageid="434a3469-61c0-4618-b2a3-f44be3934e00" name="Store Values" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Values</narrative><display x="-90" y="315" /><onsuccess>e4b22273-1e47-4b31-9b0e-38dd41d6b8a0</onsuccess><steps><calculation expression="[Missing Values]&amp;&quot;- GUD_Database Server&quot;&amp;NewLine()" stage="Missing Values" /><calculation expression="False" stage="All EV Values Available Flag" /></steps></stage><stage stageid="ac414474-931d-40fc-b8f8-ce1281fc21dc" name="Store Values" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Values</narrative><display x="-90" y="375" /><onsuccess>2c5b9bb9-0c98-4cf4-9da3-2e1b32e7d587</onsuccess><steps><calculation expression="[Missing Values]&amp;&quot;- GUD_Database Name&quot;&amp;NewLine()" stage="Missing Values" /><calculation expression="False" stage="All EV Values Available Flag" /></steps></stage><stage stageid="f92f2688-d5db-490e-b241-cf823fff03d2" name="Store Values" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Values</narrative><display x="-90" y="435" /><onsuccess>34457e65-d9d0-4854-9a88-1b77f9b284fc</onsuccess><steps><calculation expression="[Missing Values]&amp;&quot;- GUD_Database Tables&quot;&amp;NewLine()" stage="Missing Values" /><calculation expression="False" stage="All EV Values Available Flag" /></steps></stage><stage stageid="f5aee7af-a579-471f-badf-e14e9b80e653" name="Store Values" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Values</narrative><display x="-90" y="495" /><onsuccess>b67196b7-5bb1-45ce-a0ba-38b6376ec8f9</onsuccess><steps><calculation expression="[Missing Values]&amp;&quot;- GUD_Database Table Fields&quot;&amp;NewLine()" stage="Missing Values" /><calculation expression="False" stage="All EV Values Available Flag" /></steps></stage><stage stageid="204310ea-634f-4c7d-9d8b-bb3bf4b3e623" name="Store Values" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Values</narrative><display x="-90" y="555" /><onsuccess>701970bd-84b6-4d18-94f3-4d924eadc46e</onsuccess><steps><calculation expression="[Missing Values]&amp;&quot;- GUD_Database Credential Name&quot;&amp;NewLine()" stage="Missing Values" /><calculation expression="False" stage="All EV Values Available Flag" /></steps></stage><stage stageid="c6d18edd-b1b2-43e9-9f14-586af3079c27" name="All EV values are Available ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>All EV values are Available ?</narrative><display x="-195" y="675" /><decision expression="[All EV Values Available Flag]" /><ontrue>efd1c37b-ff7e-40d5-a13d-5986280a48a5</ontrue><onfalse>e0b20fb3-6456-40c7-81ae-b4aea45829f4</onfalse></stage><stage stageid="d323feae-957b-4da5-bd56-f1a5ccdbf0aa" name="End1" type="End"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="825" /></stage><stage stageid="d893b0ea-960d-463a-9c08-11cc8606633a" name="Startup" type="SubSheet"><display x="-120" y="-120" /><onsuccess>b5c3a9b4-3100-484f-8bdd-d64307f0d64f</onsuccess><processid>47035526-50c6-4fee-9655-0c1a4c785b9d</processid></stage><stage stageid="91df2192-e52c-44d1-a884-383bd2c5b92a" name="Database Table Collection" type="Collection"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Database Table Names</narrative><display x="-450" y="150" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Table Name" type="text" description="Name of the table" /></collectioninfo></stage><stage stageid="1bd37c70-1d95-4503-b69f-799b8f1a1c11" name="Get Count of Table Names" type="Action"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Get Count of Table Names</narrative><display x="-210" y="75" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Database Table Collection&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Tables Count" /></outputs><onsuccess>c9d59bde-064a-44d4-a2aa-a854d8d38351</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="c9d59bde-064a-44d4-a2aa-a854d8d38351" name="More Than one table ?" type="Decision"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>More Than one table ?</narrative><display x="-210" y="120" /><decision expression="[Tables Count]&gt;1" /><ontrue>d68f9de0-c070-42c6-baab-7d37ec7955b3</ontrue><onfalse>55d06119-9b39-475a-a41d-95e86ce06cda</onfalse></stage><stage stageid="8a227106-17cc-4c36-a1d1-0dcc43782aae" name="SQL Query" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-435" y="315" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d68f9de0-c070-42c6-baab-7d37ec7955b3" name="Split Criteria" type="Action"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Split Criteria</narrative><display x="-210" y="165" /><inputs><input type="text" name="Text to Split" narrative="The text to split" expr="[Criteria]" /><input type="text" name="Split Char" narrative="The split delimiter" expr="&quot;,&quot;" /><input type="text" name="Collection Field Name" narrative="The name of the field for the resulting collection" expr="&quot;Criteria&quot;" /></inputs><outputs><output type="collection" name="Split Values" narrative="The resulting collection containing the split values" stage="Database Criterias" /></outputs><onsuccess>e66180b5-fcf0-438d-a3f1-9a14f5af0fe0</onsuccess><resource object="Utility - Strings" action="Split Text" /></stage><stage stageid="0c8115ea-3959-4693-a6d5-95d1cc3c352c" name="Tables Count" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-330" y="105" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6306d082-8896-4208-8c16-b633225c0597" name="Database Criterias" type="Collection"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-390" y="150" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Criteria" type="text" description="Criteria" /></collectioninfo></stage><stage stageid="55d06119-9b39-475a-a41d-95e86ce06cda" name="Build SQL Statement" type="Calculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Build SQL Statement</narrative><display x="-135" y="120" /><onsuccess>ff3766b6-feec-4161-a3e2-5a5ca8b3b49b</onsuccess><calculation expression="&quot;Select &quot;&amp;[Database Fields]&amp;&quot; from &quot;&amp;Trim([Database Tables])&amp;&#xA;&quot; where &quot;&amp;[Where Clause]" stage="SQL Query" /></stage><stage stageid="ef32d60b-8543-431b-a890-8fb220f2228a" name="Remove Blank Rows" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Remove Blank Rows</narrative><display x="-180" y="450" /><inputs><input type="collection" name="Collection In" narrative="The collection to remove empty rows from" expr="[Excel Data]" /></inputs><outputs><output type="collection" name="Collection Out" narrative="The collection with the empty rows removed" stage="Excel Data" /></outputs><onsuccess>2c0cb7b0-15fe-4f5d-a978-15bd2796f010</onsuccess><resource object="Utility - Collection Manipulation" action="Remove Empty Rows" /></stage><stage stageid="ec2e5dfd-74cf-49e6-b070-cce318e970f3" name="Loop Excel Data" type="LoopStart"><display x="-120" y="105" /><onsuccess>04622725-d0e8-4b7e-acca-48048272148a</onsuccess><groupid>86d73298-4e6f-4424-93e0-dffa33a4ff21</groupid><looptype>ForEach</looptype><loopdata>Excel Data</loopdata></stage><stage stageid="4ad2dcbd-673b-4af7-a35a-384bc84e2715" name="Loop Excel Data" type="LoopEnd"><display x="-120" y="870" /><onsuccess>fbd75203-0efa-4c4c-aea9-4e8e8b188c11</onsuccess><groupid>86d73298-4e6f-4424-93e0-dffa33a4ff21</groupid></stage><stage stageid="9887e522-0dab-4c0c-923b-0c683837863c" name="Table Columns" type="Collection"><display x="-375" y="285" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Field Name" type="text" /><field name="Data Type" type="text" /></collectioninfo></stage><stage stageid="2dc0a5f3-23fe-49ac-b690-2cf8c40c035d" name="Loop Table Columns" type="LoopStart"><narrative>Loop Table Columns</narrative><display x="-120" y="240" /><onsuccess>9d768673-99b0-433c-b3b8-d72a3ddf7c71</onsuccess><groupid>b6199429-ae96-4294-bbcb-cba8423f0d3e</groupid><looptype>ForEach</looptype><loopdata>Table Columns</loopdata></stage><stage stageid="6de00dc0-24e8-4758-b203-1d2c325ccf03" name="Loop Table Columns" type="LoopEnd"><display x="-120" y="510" /><onsuccess>9cd8dfb9-5d98-4add-88ce-420161857227</onsuccess><groupid>b6199429-ae96-4294-bbcb-cba8423f0d3e</groupid></stage><stage stageid="9d768673-99b0-433c-b3b8-d72a3ddf7c71" name="Blank Column Name" type="Decision"><narrative>Blank Column Name</narrative><display x="-120" y="285" /><decision expression="Trim([Table Columns.Field Name]) = &quot;&quot; OR StartsWith(Trim(Lower([Table Columns.Field Name])), &quot;column&quot;) AND InStr(Trim(Lower([Table Columns.Field Name])), &quot;.&quot;) = 0" /><ontrue>464addeb-af5f-4610-a4d8-486201ff76f0</ontrue><onfalse>065bda89-c92f-4a53-bf70-2a0f12d28c64</onfalse></stage><stage stageid="48b08f0a-78c1-43c3-9597-a528d4e69fcf" name="Where Condition" type="Data"><display x="-315" y="405" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="065bda89-c92f-4a53-bf70-2a0f12d28c64" name="Get Where Part1" type="Calculation"><display x="-120" y="330" /><onsuccess>e6d00cea-4e99-45c4-8866-34a3890b07b0</onsuccess><calculation expression="[Table Columns.Field Name]" stage="Where Part1" /></stage><stage stageid="fef6e229-f5aa-46f9-bd33-6802ebf5611f" name="Where Part1" type="Data"><display x="-435" y="495" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e6d00cea-4e99-45c4-8866-34a3890b07b0" name="Get Where Part2" type="Action"><narrative>Get Where Part2</narrative><display x="-120" y="375" /><inputs><input type="number" name="Row Index" narrative="The row index within the collection to read from. The index is from 0 to N-1 (where N is the total number of rows in the collection)." expr="[Row Index]" /><input type="collection" name="Collection" narrative="The collection to read." expr="[Excel Data]" /><input type="text" name="Field Name" narrative="The field within the collection to read." expr="[Table Columns.Field Name]" /></inputs><outputs><output type="text" name="Value Read" narrative="The value of the requested field as text." stage="Where Part2" /></outputs><onsuccess>26eb8262-e215-435b-a865-b683650fe231</onsuccess><resource object="Utility - Collection Manipulation" action="Read Collection Field" /></stage><stage stageid="2d3975a3-ec5c-4c9e-ab7c-fe753ca9ac01" name="Where Part2" type="Data"><narrative>Where Part2</narrative><display x="-375" y="495" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="376e1f26-2f9f-4a80-b63f-bc60f30b0053" name="Row Index" type="Data"><narrative>Row Index</narrative><display x="-435" y="360" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="3b30e46a-cbcf-417c-940a-f02c2a683d15" name="Generate SQL Statement" type="SubSheet"><display x="-120" y="600" /><inputs><input type="text" name="Database Credentials" narrative="Database Credentials" expr="[GUD_Database Credential Name]" /><input type="text" name="Database Server" narrative="Database Credentials" expr="[GUD_Database Server]" /><input type="text" name="Database Name" narrative="Database Name" expr="[GUD_Database Name]" /><input type="text" name="Table Names" narrative="Name of the tables" expr="[GUD_Database Tables]" /><input type="text" name="Table Fields" narrative="Table Fields" expr="[GUD_Database Table Fields]" /><input type="text" name="Criteria" narrative="Table Criteria" expr="[GUD_Database Tables Criterias]" /><input type="text" name="Where Condition" narrative="Where Condition" expr="[Where Condition]" /></inputs><outputs><output type="text" name="SQL" narrative="SQL Query to be executed" stage="SQL Query" /></outputs><onsuccess>5ad27988-c322-47bd-b663-415d109b688b</onsuccess><processid>2fed4c53-23ed-4284-a173-4901c29e4eea</processid></stage><stage stageid="26eb8262-e215-435b-a865-b683650fe231" name="AND to be added ?" type="Decision"><narrative>AND to be added ?</narrative><display x="-120" y="420" /><decision expression="[Counter] &gt; 0" /><ontrue>bfc17563-c97a-48e8-9162-19400374df17</ontrue><onfalse>8e6ec421-1e6f-4046-b2e4-a17c2d410e99</onfalse></stage><stage stageid="bfc17563-c97a-48e8-9162-19400374df17" name="Add AND" type="Calculation"><narrative>Add AND</narrative><display x="-45" y="420" /><onsuccess>3ecce7ab-ffc8-4ac0-9353-10e2505243b7</onsuccess><calculation expression="[Where Condition]&amp;&quot; AND &quot;" stage="Where Condition" /></stage><stage stageid="3ecce7ab-ffc8-4ac0-9353-10e2505243b7" name="Anchor9" type="Anchor"><display x="-45" y="465" w="10" h="10" /><onsuccess>8e6ec421-1e6f-4046-b2e4-a17c2d410e99</onsuccess></stage><stage stageid="9cd8dfb9-5d98-4add-88ce-420161857227" name="Increment Row Index" type="Calculation"><narrative>Increment Row Index</narrative><display x="-120" y="555" /><onsuccess>3b30e46a-cbcf-417c-940a-f02c2a683d15</onsuccess><calculation expression="[Row Index]+1" stage="Row Index" /></stage><stage stageid="13b8bbe3-1224-4619-acfb-c4254cba23c2" name="Counter" type="Data"><display x="-315" y="360" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="8e6ec421-1e6f-4046-b2e4-a17c2d410e99" name="Create Where Clause" type="MultipleCalculation"><narrative>Create Where Clause</narrative><display x="-120" y="465" /><onsuccess>6de00dc0-24e8-4758-b203-1d2c325ccf03</onsuccess><steps><calculation expression="[Counter]+1" stage="Counter" /><calculation expression="[Where Condition]&amp;Trim([Where Part1])&amp;&quot; = &quot;&amp;&quot;'&quot;&amp;Trim([Where Part2])&amp;&quot;'&quot;" stage="Where Condition" /></steps></stage><stage stageid="97dc2fbc-979f-42f6-9f3a-ad183afa7ae7" name="Reset Parameters" type="MultipleCalculation"><narrative>Reset Parameters</narrative><display x="-120" y="195" /><onsuccess>2dc0a5f3-23fe-49ac-b690-2cf8c40c035d</onsuccess><steps><calculation expression="&quot;&quot;" stage="Where Condition" /><calculation expression="0" stage="Counter" /><calculation expression="[Row Index Excel Data]+1" stage="Row Index Excel Data" /></steps></stage><stage stageid="464addeb-af5f-4610-a4d8-486201ff76f0" name="Anchor10" type="Anchor"><display x="-165" y="285" w="10" h="10" /><onsuccess>586bf0f8-3694-4c54-875b-89c4fbaf16e1</onsuccess></stage><stage stageid="586bf0f8-3694-4c54-875b-89c4fbaf16e1" name="Anchor11" type="Anchor"><display x="-165" y="510" w="10" h="10" /><onsuccess>6de00dc0-24e8-4758-b203-1d2c325ccf03</onsuccess></stage><stage stageid="8c86a4dc-f93d-4e91-883a-8c78d9acdaa5" name="Where Clause" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-450" y="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="cbe3e85a-8d95-4e25-a2e7-63ba987942d2" name="Split Individual Criteria" type="Action"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Split Individual Criteria</narrative><display x="-210" y="255" /><inputs><input type="text" name="Text to Split" narrative="The text to split" expr="[Database Criterias.Criteria]" /><input type="text" name="Split Char" narrative="The split delimiter" expr="&quot;=&quot;" /><input type="text" name="Collection Field Name" narrative="The name of the field for the resulting collection" expr="&quot;Value&quot;" /></inputs><outputs><output type="collection" name="Split Values" narrative="The resulting collection containing the split values" stage="Splitted Criteria" /></outputs><onsuccess>55754c43-9770-4c88-b5b5-6af2a7295167</onsuccess><resource object="Utility - Strings" action="Split Text" /></stage><stage stageid="8601a3c7-f8bd-4ada-b6a4-ca128223d00f" name="Splitted Criteria" type="Collection"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-330" y="150" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Value" type="text" description="Splitted Criteria Value" /></collectioninfo></stage><stage stageid="55754c43-9770-4c88-b5b5-6af2a7295167" name="Loop Splitted Criterias" type="LoopStart"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Loop Splitted Criterias</narrative><display x="-210" y="300" /><onsuccess>1fc550f1-ae1d-4285-87ff-eb22d4af1e80</onsuccess><groupid>8cc93134-b65a-4bbc-b259-7f993e0875e9</groupid><looptype>ForEach</looptype><loopdata>Splitted Criteria</loopdata></stage><stage stageid="23f45f35-223b-48fc-a81f-d36abe96ebc3" name="Loop Splitted Criterias" type="LoopEnd"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-210" y="930" /><onsuccess>92b1f29a-be6f-4197-97b1-caa4b9eb8a7d</onsuccess><groupid>8cc93134-b65a-4bbc-b259-7f993e0875e9</groupid></stage><stage stageid="1fc550f1-ae1d-4285-87ff-eb22d4af1e80" name="Split Individual Criteria" type="Action"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Split Individual Criteria</narrative><display x="-210" y="345" /><inputs><input type="text" name="Text to Split" narrative="The text to split" expr="Trim([Splitted Criteria.Value])" /><input type="text" name="Split Char" narrative="The split delimiter" expr="&quot;.&quot;" /><input type="text" name="Collection Field Name" narrative="The name of the field for the resulting collection" expr="&quot;Name&quot;" /></inputs><outputs><output type="collection" name="Split Values" narrative="The resulting collection containing the split values" stage="Extracted Table" /></outputs><onsuccess>edbd6b3e-1948-4c73-889a-0059166965a4</onsuccess><resource object="Utility - Strings" action="Split Text" /></stage><stage stageid="68cd3538-8fc2-4142-bc8a-2fc6ef52fa88" name="Extracted Table" type="Collection"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-450" y="195" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Name" type="text" description="Name of the table" /></collectioninfo></stage><stage stageid="0510a94f-4b96-4807-a548-863b7d306ce2" name="Loop Extracted Table" type="LoopStart"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Loop Extracted Table</narrative><display x="-210" y="480" /><onsuccess>1f7601fb-5740-49c3-bbe8-309cc748ac6f</onsuccess><groupid>30329afd-5dce-42b7-88c4-0d3bc38936f2</groupid><looptype>ForEach</looptype><loopdata>Extracted Table</loopdata></stage><stage stageid="b0976f14-66c8-4232-9d40-de0fabb20593" name="Loop Extracted Table" type="LoopEnd"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-210" y="885" /><onsuccess>23f45f35-223b-48fc-a81f-d36abe96ebc3</onsuccess><groupid>30329afd-5dce-42b7-88c4-0d3bc38936f2</groupid></stage><stage stageid="f7482f75-e25f-4f36-a803-fb3cea828980" name="From Clasue" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-450" y="240" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="13c6379e-6b50-479d-ad5f-f0cc4bf0a449" name="Temp Count" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-390" y="105" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e66180b5-fcf0-438d-a3f1-9a14f5af0fe0" name="Loop Database Criterias" type="LoopStart"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Loop Database Criterias</narrative><display x="-210" y="210" /><onsuccess>cbe3e85a-8d95-4e25-a2e7-63ba987942d2</onsuccess><groupid>e2603b4c-df38-47e1-8985-381d58208a54</groupid><looptype>ForEach</looptype><loopdata>Database Criterias</loopdata></stage><stage stageid="0a82dc50-a6b8-490a-98d4-b9fcd35c75b1" name="Loop Database Criterias" type="LoopEnd"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-210" y="1065" /><onsuccess>1571c236-e537-4a63-9498-2671d6fff434</onsuccess><groupid>e2603b4c-df38-47e1-8985-381d58208a54</groupid></stage><stage stageid="edbd6b3e-1948-4c73-889a-0059166965a4" name="Get Extracted Table Count" type="Action"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Get Extracted Table Count</narrative><display x="-210" y="390" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Extracted Table&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Temp Count" /></outputs><onsuccess>66821e92-8294-498c-91b1-b32cffa3fc1a</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="66821e92-8294-498c-91b1-b32cffa3fc1a" name="Two records after split ?" type="Decision"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Two records after split ?</narrative><display x="-210" y="435" /><decision expression="[Temp Count]=2" /><ontrue>0510a94f-4b96-4807-a548-863b7d306ce2</ontrue><onfalse>3d0a77ae-f11a-47ce-839d-d6b6157e708e</onfalse></stage><stage stageid="3d0a77ae-f11a-47ce-839d-d6b6157e708e" name="Throw Invalid Criteria Provided Exception" type="Exception"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Throw Invalid Criteria Provided Exception</narrative><display x="-135" y="435" /><exception type="Business" detail="&quot;It seems a period character (.) was NOT provided or some other character was provided OR more than one period (.) was provided between Table Name and Column Name, in one of the Criterias in Environment Variable &quot;&amp;&quot;&quot;&quot;GUD_Database Tables Criterias&quot;&quot;&quot;" /></stage><stage stageid="69de369a-f659-47dd-b234-8b45e47f9780" name="Get Table Name in DB Tables Status" type="Action"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Get Table Name in DB Tables Status</narrative><display x="-210" y="615" /><inputs><input type="collection" name="Collection" narrative="Required : The collection to search" expr="[Database Table Collection]" /><input type="text" name="Column Name" narrative="Required : The name of the column to search" expr="&quot;Table Name&quot;" /><input type="text" name="Exact Value" narrative="Optional : The exact value to search for - this is case insensitive" expr="Trim([Extracted Table.Name])" /><input type="text" name="Regex" narrative="Optional : The regular expression to search for - this is case sensitive unless specified otherwise in the regular expression using &quot;(?i)&quot;" expr="" /></inputs><outputs><output type="flag" name="Contains Search Term" narrative="Flag indicating if the collection found the given search term or not" stage="Table Found ?" /><output type="collection" name="Groups" narrative="The groups defined in the regular expression when it is applied to the found term" stage="" /></outputs><onsuccess>d6fccf02-4b15-4b71-ba94-00ea2fa44d2f</onsuccess><resource object="Utility - Collection Manipulation" action="Collection Contains Value" /></stage><stage stageid="d6fccf02-4b15-4b71-ba94-00ea2fa44d2f" name="Table Found in Main Tables ?" type="Decision"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Table Found in Main Tables ?</narrative><display x="-210" y="660" /><decision expression="[Table Found ?]" /><ontrue>43c2e890-4d41-4b0d-80c5-e2b92757ddee</ontrue><onfalse>a59c750c-103b-4ecc-aefa-6b8883354ced</onfalse></stage><stage stageid="7fd8f476-9621-44e1-b062-41c092181f68" name="Table Found ?" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-330" y="240" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2e36feb5-d3a2-4922-a869-ca3586c0eec2" name="Loop Database Tables" type="LoopStart"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Loop Database Tables</narrative><display x="-210" y="-60" /><onsuccess>509d1015-0d09-4b03-8f41-9c9b86cb6e93</onsuccess><groupid>e735f463-79f6-42d4-892f-0c357adc2d83</groupid><looptype>ForEach</looptype><loopdata>Database Table Collection</loopdata></stage><stage stageid="96182b9d-4495-44bd-9ca0-0dd3b1d4e09f" name="Loop Database Tables" type="LoopEnd"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-210" y="30" /><onsuccess>1bd37c70-1d95-4503-b69f-799b8f1a1c11</onsuccess><groupid>e735f463-79f6-42d4-892f-0c357adc2d83</groupid></stage><stage stageid="509d1015-0d09-4b03-8f41-9c9b86cb6e93" name="Trim Table Name" type="Calculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Trim Table Name</narrative><display x="-210" y="-15" /><onsuccess>96182b9d-4495-44bd-9ca0-0dd3b1d4e09f</onsuccess><calculation expression="Trim([Database Table Collection.Table Name])" stage="Database Table Collection.Table Name" /></stage><stage stageid="414fc34f-6739-4edb-8c1a-8df894bba767" name="First Loop ?" type="Decision"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>First Loop ?</narrative><display x="-210" y="795" /><decision expression="[Loop Counter] = 0" /><ontrue>94e4eae3-bd27-4970-a5d5-2aeafbca68af</ontrue><onfalse>1a6e5bf3-8286-49b9-89ff-403af2c04835</onfalse></stage><stage stageid="3ac863b4-7cf2-445e-8b06-83c149598a8d" name="Loop Counter" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-450" y="105" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="1a6e5bf3-8286-49b9-89ff-403af2c04835" name="Append Inner Join" type="Calculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Append Inner Join</narrative><display x="-135" y="795" /><onsuccess>be6489d0-cb49-43df-91ad-b0bac66d584a</onsuccess><calculation expression="[From Clasue]&amp;&quot; Left JOIN &quot;" stage="From Clasue" /></stage><stage stageid="be6489d0-cb49-43df-91ad-b0bac66d584a" name="Anchor14" type="Anchor"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-135" y="840" w="10" h="10" /><onsuccess>94e4eae3-bd27-4970-a5d5-2aeafbca68af</onsuccess></stage><stage stageid="bd1b36ac-ebff-49f2-8c71-6c8106bb47ca" name="Used Tables in Join" type="Collection"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Used Tables in Join</narrative><display x="-390" y="195" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Table Name" type="text" description="Name of the table" /></collectioninfo></stage><stage stageid="2aee0a33-65d8-494a-9a7b-a380f3798f55" name="Anchor17" type="Anchor"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-285" y="930" w="10" h="10" /><onsuccess>23f45f35-223b-48fc-a81f-d36abe96ebc3</onsuccess></stage><stage stageid="1ce0bc17-940c-478e-be70-687c32708b9b" name="Add Row to Used Table in Join" type="Action"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Add Row to Used Table in Join</narrative><display x="-285" y="840" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Used Tables in Join&quot;" /></inputs><onsuccess>d969034f-c80b-4c17-9078-57a5759a5226</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="30159805-30ad-4766-806d-cef1d1ca6592" name="Table Name Checked ?" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>There will be two rows in "Extracted Table" collection, the second one is the column name not a table name, so to check if the table name is already checked and column name need not to be checked, this flag is used</narrative><display x="-390" y="240" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="1f7601fb-5740-49c3-bbe8-309cc748ac6f" name="Table Name Checked ?" type="Decision"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Table Name Checked ?</narrative><display x="-210" y="525" /><decision expression="[Table Name Checked ?]" /><ontrue>fd0b6917-8290-4a1a-b1a4-91d6a2081168</ontrue><onfalse>dbe23ddb-b271-448d-b443-24e8fdfb483f</onfalse></stage><stage stageid="fd0b6917-8290-4a1a-b1a4-91d6a2081168" name="Anchor12" type="Anchor"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-90" y="525" w="10" h="10" /><onsuccess>d9276eea-8005-4511-abc8-d17642469a02</onsuccess></stage><stage stageid="d9276eea-8005-4511-abc8-d17642469a02" name="Anchor13" type="Anchor"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-90" y="885" w="10" h="10" /><onsuccess>b0976f14-66c8-4232-9d40-de0fabb20593</onsuccess></stage><stage stageid="dbe23ddb-b271-448d-b443-24e8fdfb483f" name="Set Table Check Flag to True" type="Calculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>To indicate if the table name is already checked</narrative><display x="-210" y="570" /><onsuccess>69de369a-f659-47dd-b234-8b45e47f9780</onsuccess><calculation expression="True" stage="Table Name Checked ?" /></stage><stage stageid="a59c750c-103b-4ecc-aefa-6b8883354ced" name="Throw Table Not found in Criteria Exception" type="Exception"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Throw Table Not found in Criteria Exception</narrative><display x="-135" y="660" /><exception type="Business" detail="&quot;The table name &quot;&quot;&quot;&amp;[Extracted Table.Name]&amp;&quot;&quot;&quot; provided in Criteria Environment Variable &quot;&amp;&quot;&quot;&quot;GUD_Database Tables Criterias&quot;&quot;&quot;&amp;&quot; is not avilable in the Environment Variable created to have all table name &quot;&amp;&quot;&quot;&quot;GUD_Database Tables&quot;&quot;&quot;" /></stage><stage stageid="d969034f-c80b-4c17-9078-57a5759a5226" name="Add Table Name in Used Tables" type="MultipleCalculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Add Table Name in Used Tables</narrative><display x="-285" y="885" /><onsuccess>2aee0a33-65d8-494a-9a7b-a380f3798f55</onsuccess><steps><calculation expression="Trim([Extracted Table.Name])" stage="Used Tables in Join.Table Name" /><calculation expression="False" stage="Table Name Checked ?" /></steps></stage><stage stageid="43c2e890-4d41-4b0d-80c5-e2b92757ddee" name="Get Table Name in Used Tables Status ?" type="Action"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Get Table Name in Used Tables Status ?</narrative><display x="-210" y="705" /><inputs><input type="collection" name="Collection" narrative="Required : The collection to search" expr="[Used Tables in Join]" /><input type="text" name="Column Name" narrative="Required : The name of the column to search" expr="&quot;Table Name&quot;" /><input type="text" name="Exact Value" narrative="Optional : The exact value to search for - this is case insensitive" expr="Trim([Extracted Table.Name])" /><input type="text" name="Regex" narrative="Optional : The regular expression to search for - this is case sensitive unless specified otherwise in the regular expression using &quot;(?i)&quot;" expr="" /></inputs><outputs><output type="flag" name="Contains Search Term" narrative="Flag indicating if the collection found the given search term or not" stage="Table Found ?" /><output type="collection" name="Groups" narrative="The groups defined in the regular expression when it is applied to the found term" stage="" /></outputs><onsuccess>d4360aeb-a663-4cb3-abe0-b227edc28faf</onsuccess><resource object="Utility - Collection Manipulation" action="Collection Contains Value" /></stage><stage stageid="d4360aeb-a663-4cb3-abe0-b227edc28faf" name="Table Found in Used Tables?" type="Decision"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Table Found in Used Tables?</narrative><display x="-210" y="750" /><decision expression="[Table Found ?]" /><ontrue>dff93205-3c3a-4809-8bd4-6291255a7524</ontrue><onfalse>414fc34f-6739-4edb-8c1a-8df894bba767</onfalse></stage><stage stageid="792cb5ef-54b5-4945-9c99-f54510edb2c1" name="Anchor16" type="Anchor"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-330" y="750" w="10" h="10" /><onsuccess>3dcd8ac1-6fc3-4c20-b123-6c341d30a49e</onsuccess></stage><stage stageid="3dcd8ac1-6fc3-4c20-b123-6c341d30a49e" name="Anchor18" type="Anchor"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-330" y="930" w="10" h="10" /><onsuccess>2aee0a33-65d8-494a-9a7b-a380f3798f55</onsuccess></stage><stage stageid="1571c236-e537-4a63-9498-2671d6fff434" name="Build SQL Statement" type="Calculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Build SQL Statement</narrative><display x="-210" y="1110" /><onsuccess>41648d49-6f64-49cb-9689-24914661c598</onsuccess><calculation expression="&quot;Select &quot;&amp;[Database Fields]&amp;&quot; from &quot;&amp;[From Clasue]&amp;&quot; where &quot;&amp;[Where Clause]" stage="SQL Query" /></stage><stage stageid="a770dd80-eb53-4d1b-a8e8-160020020a15" name="SQL Query" type="Data"><display x="-435" y="405" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ff3766b6-feec-4161-a3e2-5a5ca8b3b49b" name="Anchor19" type="Anchor"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-60" y="120" w="10" h="10" /><onsuccess>1cca8e61-c17f-4caa-8b2f-81322563a3cd</onsuccess></stage><stage stageid="1cca8e61-c17f-4caa-8b2f-81322563a3cd" name="Anchor20" type="Anchor"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-60" y="1155" w="10" h="10" /><onsuccess>41648d49-6f64-49cb-9689-24914661c598</onsuccess></stage><stage stageid="ee907920-9b7f-432e-9bd3-6eec2ab1d2e6" name="Tables Count" type="Data"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-375" y="0" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="11357045-18f1-41dc-bb11-06e173ef7b2d" name="Database Table Collection" type="Collection"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-435" y="0" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="e0b20fb3-6456-40c7-81ae-b4aea45829f4" name="Update Exception for Missing Values" type="Calculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Update Exception for Missing Values</narrative><display x="-90" y="675" /><onsuccess>572c6d97-4412-4490-8061-2d292b39df11</onsuccess><calculation expression="Trim([Exception])&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;[Serial Number]&amp;&quot;. Value in the below Environment Variable(s) is not supplied:&quot;&amp;NewLine()&amp;&#xA;&#xA;Trim([Missing Values])" stage="Exception" /></stage><stage stageid="9b07a498-f44c-4592-a949-f80fbcfe42ce" name="Exception" type="Data"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-420" y="75" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f3489dd0-fa27-4ce7-a297-0aac257ba1c4" name="Split Database Table Names" type="Action"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Split Database Table Names</narrative><display x="-195" y="-60" /><inputs><input type="text" name="Text to Split" narrative="The text to split" expr="[GUD_Database Tables]" /><input type="text" name="Split Char" narrative="The split delimiter" expr="&quot;,&quot;" /><input type="text" name="Collection Field Name" narrative="The name of the field for the resulting collection" expr="&quot;Table Name&quot;" /></inputs><outputs><output type="collection" name="Split Values" narrative="The resulting collection containing the split values" stage="Database Table Collection" /></outputs><onsuccess>42454279-2b23-4e6f-bbb0-a56c6afa93af</onsuccess><resource object="Utility - Strings" action="Split Text" /></stage><stage stageid="42454279-2b23-4e6f-bbb0-a56c6afa93af" name="Get Count of Table Names" type="Action"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Get Count of Table Names</narrative><display x="-195" y="-15" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Database Table Collection&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Tables Count" /></outputs><onsuccess>fbc66455-f911-4650-8de6-762af00a1087</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="fbc66455-f911-4650-8de6-762af00a1087" name="More Than one table ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>More Than one table ?</narrative><display x="-195" y="30" /><decision expression="[Tables Count]&gt;1" /><ontrue>a86d4edb-cb40-443b-8012-55d4a82f07dc</ontrue><onfalse>e53f70ad-ffb5-4b9d-8def-f000cd100fb9</onfalse></stage><stage stageid="a86d4edb-cb40-443b-8012-55d4a82f07dc" name="Database Table Criteria Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Database Table Criteria Provided ?</narrative><display x="-195" y="75" /><decision expression="Trim([GUD_Database Tables Criterias]) &lt;&gt; &quot;&quot;" /><ontrue>f0cae1ac-5641-492f-b879-e66cfccba528</ontrue><onfalse>17f8fb4b-64ad-4ffe-a7dc-b3d3823068ad</onfalse></stage><stage stageid="e53f70ad-ffb5-4b9d-8def-f000cd100fb9" name="Database Table Criteria Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Database Table Criteria Provided ?</narrative><display x="-75" y="30" /><decision expression="Trim([GUD_Database Tables Criterias]) &lt;&gt; &quot;&quot;" /><ontrue>159b88e6-8086-4bbf-80b2-712361d72c77</ontrue><onfalse>597ae26a-aa01-4d5d-a4df-0e88848db3d4</onfalse></stage><stage stageid="597ae26a-aa01-4d5d-a4df-0e88848db3d4" name="Anchor22" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-75" y="105" w="10" h="10" /><onsuccess>f0cae1ac-5641-492f-b879-e66cfccba528</onsuccess></stage><stage stageid="f0cae1ac-5641-492f-b879-e66cfccba528" name="Anchor23" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="105" w="10" h="10" /><onsuccess>2b93778e-6230-43df-b412-13106aae530c</onsuccess></stage><stage stageid="0bdee9cd-330d-4c91-9586-1f6f369cd506" name="Serial Number" type="Data"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Serial Number</narrative><display x="-375" y="-45" /><datatype>number</datatype><initialvalue>1</initialvalue><private /><alwaysinit /></stage><stage stageid="159b88e6-8086-4bbf-80b2-712361d72c77" name="Store Exception" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Exception</narrative><display x="0" y="30" /><onsuccess>fc26cae8-b2ae-44dd-bedf-1618a41f71b4</onsuccess><steps><calculation expression="[Serial Number]&amp;&quot;. &quot;&amp;&quot;Only one table name is provided in Environment Variable &quot;&amp;&quot;&quot;&quot;GUD_Database Tables&quot;&quot;&quot;&amp;&quot; whereas Criteria for joining two or more tables is also provided in Environment Variable &quot;&amp;&quot;&quot;&quot;GUD_Database Tables Criterias&quot;&quot;&quot;" stage="Exception" /><calculation expression="[Serial Number]+1" stage="Serial Number" /></steps></stage><stage stageid="17f8fb4b-64ad-4ffe-a7dc-b3d3823068ad" name="Store Exception" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Exception</narrative><display x="-120" y="75" /><onsuccess>f4f792a8-512d-4b77-9de0-b542a60e9698</onsuccess><steps><calculation expression="[Serial Number]&amp;&quot;. &quot;&amp;&quot;More than one table is provided in Environment Variable &quot;&amp;&quot;&quot;&quot;GUD_Database Tables&quot;&quot;&quot;&amp;&quot; whereas Criteria for joining two or more tables, is NOT provided in Environment Variable &quot;&amp;&quot;&quot;&quot;GUD_Database Tables Criterias&quot;&quot;&quot;" stage="Exception" /><calculation expression="[Serial Number]+1" stage="Serial Number" /></steps></stage><stage stageid="f4f792a8-512d-4b77-9de0-b542a60e9698" name="Anchor24" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-120" y="105" w="10" h="10" /><onsuccess>597ae26a-aa01-4d5d-a4df-0e88848db3d4</onsuccess></stage><stage stageid="fc26cae8-b2ae-44dd-bedf-1618a41f71b4" name="Anchor25" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="0" y="105" w="10" h="10" /><onsuccess>597ae26a-aa01-4d5d-a4df-0e88848db3d4</onsuccess></stage><stage stageid="8f1da02b-3411-45f2-a048-a57f7f958e04" name="Exception is Blank ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Exception is Blank ?</narrative><display x="-195" y="735" /><decision expression="Trim([Exception]) = &quot;&quot;" /><ontrue>ecea7167-802c-421c-8ba2-d59844af82a4</ontrue><onfalse>4c3ab91d-0f59-48a1-89fa-04e4d5abf0ba</onfalse></stage><stage stageid="572c6d97-4412-4490-8061-2d292b39df11" name="Anchor26" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-90" y="705" w="10" h="10" /><onsuccess>efd1c37b-ff7e-40d5-a13d-5986280a48a5</onsuccess></stage><stage stageid="efd1c37b-ff7e-40d5-a13d-5986280a48a5" name="Anchor27" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="705" w="10" h="10" /><onsuccess>8f1da02b-3411-45f2-a048-a57f7f958e04</onsuccess></stage><stage stageid="4c3ab91d-0f59-48a1-89fa-04e4d5abf0ba" name="Throw Exception" type="Exception"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Throw Exception</narrative><display x="-90" y="735" /><exception type="Business" detail="[Exception]" /></stage><stage stageid="f3f01ddd-43ee-4605-bfd2-fb8dd036e59f" name="Reset Exception" type="Calculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Reset Exception</narrative><display x="-195" y="-105" /><onsuccess>f3489dd0-fa27-4ce7-a297-0aac257ba1c4</onsuccess><calculation expression="&quot;&quot;" stage="Exception" /></stage><stage stageid="83b2c247-2275-482b-83bb-897cc3009fe8" name="Data Items" type="Block"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Data Items</narrative><display x="-465" y="-75" w="180" h="105" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="8e85de86-4632-4940-99e3-01ec9738a8f7" name="Exception" type="Block"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Exception</narrative><display x="-465" y="45" w="180" h="60" /><font family="Segoe UI" size="10" style="Regular" color="FF0000" /></stage><stage stageid="53643aa5-b4f8-42ec-9548-ea511461d45c" name="Execute SQL" type="SubSheetInfo"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-375" y="-150" w="210" h="90" /></stage><stage stageid="f95f6f04-416e-4139-9bd4-31cac5773afb" name="Start" type="Start"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-180" y="-165" /><inputs><input type="text" name="Database Server" narrative="Database Server" stage="Database Server" /><input type="text" name="Database Name" narrative="Database Name" stage="Database Name" /><input type="text" name="Database Credentials" narrative="Database Credentials" stage="Database Credentials" /><input type="text" name="SQL Query" narrative="SQL Query" stage="SQL Query" /></inputs><onsuccess>4fd1e0ec-2888-40d1-982b-982257d48b99</onsuccess></stage><stage stageid="ec271929-27e1-46f1-90ea-5f24628d5597" name="End" type="End"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-180" y="105" /><outputs><output type="number" name="Select DB Count" narrative="Number of records from Database" stage="DB Count" /><output type="collection" name="Results" narrative="Resulted Collection" stage="Results" /><output type="text" name="SQL Execute Message" narrative="Message retured by Select Query" stage="Message" /><output type="flag" name="SQL Execution Flag" narrative="Select Execution Flag" stage="Success" /></outputs></stage><stage stageid="c880fa8e-bd06-4d1b-9119-87421691ac7b" name="Count Rows" type="Action"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-180" y="60" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Results&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="DB Count" /></outputs><onsuccess>ec271929-27e1-46f1-90ea-5f24628d5597</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="289df1f7-a9c2-482d-94ab-a407324a9f67" name="DB Count" type="Data"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-375" y="-15" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="36258dd6-04ba-4289-bffb-2de16e9ba729" name="Variables" type="Block"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-480" y="-90" w="210" h="105" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="e84b5dc3-cbc2-4ca8-8116-a1637b226bf9" name="Set Connection" type="Action"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><loginhibit /><display x="-180" y="-75" /><inputs><input type="text" name="Server" narrative="The name of the server and, if necessary, instance name of the SQL Server instance to connect to" expr="[Database Server]" /><input type="text" name="Database" narrative="The name of the database to connect to" expr="[Database Name]" /><input type="text" name="User" narrative="If appropriate, the login name to use to connect to SQL Server. If left empty, windows authentication using the current user will be used instead of SQL Server authentication" expr="[Username]" /><input type="text" name="Password" narrative="If appropriate, the password to use with the above login name to access SQL Server. Unused for windows authentication" expr="[Password]" /></inputs><onsuccess>7f40685a-3896-4e83-ad7d-dd32d7bbfaf4</onsuccess><resource object="Data - SQL Server" action="Set Connection" /></stage><stage stageid="7f40685a-3896-4e83-ad7d-dd32d7bbfaf4" name="Run Query" type="Action"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><loginhibit /><display x="-180" y="-30" /><inputs><input type="text" name="SQL" narrative="The SQL query to use to perform this action" expr="[SQL Query]" /></inputs><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /><output type="collection" name="Results" narrative="The collection of results from the query" stage="Results" /></outputs><onsuccess>89097f62-b70a-43f6-88fa-98b5326066a0</onsuccess><resource object="Data - SQL Server" action="Get Collection" /></stage><stage stageid="4fd1e0ec-2888-40d1-982b-982257d48b99" name="Get Database Credentials" type="Action"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><loginhibit /><narrative>Get the specified set of credentials.

An Exception will occur if access to the credentials is not allowed, based on the running Resource, Process and User.</narrative><display x="-180" y="-120" /><inputs><input type="text" name="Credentials Name" narrative="The name of the credentials to get" expr="[Database Credentials]" /></inputs><outputs><output type="password" name="Password" narrative="The password" stage="Password" /><output type="text" name="Username" narrative="The user name" stage="Username" /><output type="date" name="Expiry Date" narrative="The expiry date" stage="" /><output type="text" name="Status" narrative="The status" stage="" /></outputs><onsuccess>e84b5dc3-cbc2-4ca8-8116-a1637b226bf9</onsuccess><resource object="Blueprism.Automate.clsCredentialsActions" action="Get" /></stage><stage stageid="920dace1-5d52-4925-ace6-a2d4bd64cd6d" name="Database Server" type="Data"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-435" y="-60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="54cd1a18-4409-49c0-bdea-aafa1e0fe52f" name="Database Name" type="Data"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-375" y="-60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4e627192-86b1-4425-b35e-1af3c1309d68" name="Database Credentials" type="Data"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-315" y="-60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d68c4f9b-0630-4996-be7f-8943fd1de379" name="SQL Query" type="Data"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-435" y="-15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5ad27988-c322-47bd-b663-415d109b688b" name="Execute SQL" type="SubSheet"><display x="-120" y="645" /><inputs><input type="text" name="Database Server" narrative="Database Server" expr="[GUD_Database Server]" /><input type="text" name="Database Name" narrative="Database Name" expr="[GUD_Database Name]" /><input type="text" name="Database Credentials" narrative="Database Credentials" expr="[GUD_Database Credential Name]" /><input type="text" name="SQL Query" narrative="SQL Query" expr="[SQL Query]" /></inputs><outputs><output type="number" name="Select DB Count" narrative="Number of records from Database" stage="Select DB Count" /><output type="collection" name="Results" narrative="Resulted Collection" stage="Results" /><output type="text" name="SQL Execute Message" narrative="Message retured by Select Query" stage="SQL Execute Message" /><output type="flag" name="SQL Execution Flag" narrative="Select Execution Flag" stage="SQL Execution Flag" /></outputs><onsuccess>92f9ce5c-72b6-427d-9a02-20e527e4e698</onsuccess><processid>d650bc08-8fbf-465e-9189-908ff424a353</processid></stage><stage stageid="6cb3d16e-4732-4fc0-b254-d673f00205d5" name="Password" type="Data"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-375" y="60" /><datatype>password</datatype><initialvalueenc></initialvalueenc><private /><alwaysinit /></stage><stage stageid="b91b35eb-b4ff-4456-a48f-3a5cad242478" name="Username" type="Data"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-435" y="60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a04e6e72-08dd-4a99-8d05-4f1c06f1b540" name="Credentials" type="Block"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><narrative>Credentials</narrative><display x="-480" y="30" w="210" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="b38f6cbb-9205-46f2-8038-dbd8a25aa036" name="Success" type="Data"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-375" y="135" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6ab5210c-d30f-44fb-b0ae-b15806ce61d2" name="Message" type="Data"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-435" y="135" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="48d7d7f2-1458-43c1-8893-cb7541a619da" name="Results" type="Collection"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-315" y="135" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="287a3385-a09c-4f52-b254-f950418f7300" name="Outputs" type="Block"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><narrative>Outputs</narrative><display x="-480" y="105" w="210" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="4ab58994-1466-43cf-b239-383c046a4bba" name="Exception" type="Data"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><display x="-435" y="210" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e7e75d85-f9f4-467f-aad6-6a35641fd0cc" name="Exception" type="Block"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><narrative>Exception</narrative><display x="-480" y="180" w="210" h="60" /><font family="Segoe UI" size="10" style="Regular" color="FF0000" /></stage><stage stageid="4fdbb46a-d5e2-46c3-be7f-b84a142fc89f" name="Generate SQL Satement Recover" type="Recover"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Generate SQL Satement Recover</narrative><display x="15" y="-135" /><onsuccess>9409f6d5-86a9-4033-9bf3-6aaffe797a18</onsuccess></stage><stage stageid="030a29ca-4cf5-46ea-bdcd-269208f09afd" name="Throw Exception" type="Exception"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Throw Exception</narrative><display x="165" y="-135" /><exception type="System" detail="[Exception]" /></stage><stage stageid="9409f6d5-86a9-4033-9bf3-6aaffe797a18" name="Get Exception" type="Calculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Get Exception</narrative><display x="90" y="-135" /><onsuccess>030a29ca-4cf5-46ea-bdcd-269208f09afd</onsuccess><calculation expression="ExceptionDetail()" stage="Exception" /></stage><stage stageid="107e2ea5-4fb3-42bb-ab00-85151d52c037" name="Generate SQL Satement Recover" type="Recover"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><narrative>Generate SQL Satement Recover</narrative><display x="15" y="-150" /><onsuccess>e22bfcd2-c2fe-4cfd-b03a-407442950653</onsuccess></stage><stage stageid="d7f5e200-22fb-481e-9040-62cb42bc4d40" name="Throw Exception" type="Exception"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><narrative>Throw Exception</narrative><display x="165" y="-150" /><exception type="System" detail="[Exception]" /></stage><stage stageid="e22bfcd2-c2fe-4cfd-b03a-407442950653" name="Get Exception" type="Calculation"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><narrative>Get Exception</narrative><display x="90" y="-150" /><onsuccess>d7f5e200-22fb-481e-9040-62cb42bc4d40</onsuccess><calculation expression="ExceptionDetail()" stage="Exception" /></stage><stage stageid="0d0fda1b-e6e9-4165-998a-2d4bcc83c5d2" name="Generate SQL Satement Recover" type="Recover"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Generate SQL Satement Recover</narrative><display x="120" y="-135" /><onsuccess>e8b99199-2fa9-4d18-a66f-e390ae0fe4ac</onsuccess></stage><stage stageid="54d6e429-3a18-4a87-a322-a9ce8d9e741f" name="Throw Exception" type="Exception"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Throw Exception</narrative><display x="270" y="-135" /><exception type="System" detail="[Exception]" /></stage><stage stageid="e8b99199-2fa9-4d18-a66f-e390ae0fe4ac" name="Get Exception" type="Calculation"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Get Exception</narrative><display x="195" y="-135" /><onsuccess>54d6e429-3a18-4a87-a322-a9ce8d9e741f</onsuccess><calculation expression="ExceptionDetail()" stage="Exception" /></stage><stage stageid="c03f517f-1805-4e29-be35-8c4fe4dd7db8" name="Generate SQL Satement Recover" type="Recover"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Generate SQL Satement Recover</narrative><display x="60" y="-135" /><onsuccess>22355887-1213-4717-b436-3457c9d5e1c6</onsuccess></stage><stage stageid="d69e5332-2136-4694-8a79-011105ff0d89" name="Throw Exception" type="Exception"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Throw Exception</narrative><display x="210" y="-135" /><exception type="System" detail="[Exception]" /></stage><stage stageid="22355887-1213-4717-b436-3457c9d5e1c6" name="Get Exception" type="Calculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Get Exception</narrative><display x="135" y="-135" /><onsuccess>d69e5332-2136-4694-8a79-011105ff0d89</onsuccess><calculation expression="ExceptionDetail()" stage="Exception" /></stage><stage stageid="cdfa5767-d5c4-4f44-8372-2bd4e50802b4" name="Select DB Count" type="Data"><display x="-375" y="405" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b00b7126-8ade-4462-b001-1c73cfbdf682" name="Results" type="Collection"><display x="-315" y="450" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="7ec43aaf-08ad-4042-939b-a0f5cb6c4a57" name="SQL Execute Message" type="Data"><display x="-435" y="450" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ace770ed-2fd4-4dad-8095-3ad55796098d" name="SQL Execution Flag" type="Data"><display x="-375" y="450" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="89097f62-b70a-43f6-88fa-98b5326066a0" name="SQL Executed Successful ?" type="Decision"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><narrative>SQL Executed Successful ?</narrative><display x="-180" y="15" /><decision expression="[Success]" /><ontrue>c880fa8e-bd06-4d1b-9119-87421691ac7b</ontrue><onfalse>26efd31b-5b2f-4a40-9bda-e4cfffdef395</onfalse></stage><stage stageid="26efd31b-5b2f-4a40-9bda-e4cfffdef395" name="SQL Execution Exception" type="Exception"><subsheetid>d650bc08-8fbf-465e-9189-908ff424a353</subsheetid><narrative>SQL Execution Exception</narrative><display x="-105" y="15" /><exception type="System" detail="[Message]" /></stage><stage stageid="92f9ce5c-72b6-427d-9a02-20e527e4e698" name="Records Found ?" type="Decision"><narrative>Records Found ?</narrative><display x="-120" y="690" /><decision expression="[Select DB Count]&gt;0" /><ontrue>2193dbf4-87f0-46e0-a872-fe280e37cfc5</ontrue><onfalse>011ab111-2abf-4f17-a716-57abb73d0786</onfalse></stage><stage stageid="2193dbf4-87f0-46e0-a872-fe280e37cfc5" name="Get HTML Body" type="SubSheet"><narrative>Get HTML Body</narrative><display x="-120" y="735" /><inputs><input type="collection" name="Input Collection" narrative="Input Collection" expr="[Results]" /></inputs><outputs><output type="text" name="EmailBody" narrative="EmailBody" stage="EmailBody" /></outputs><onsuccess>cc0445d4-c6d3-4edf-96ee-f1039189fa78</onsuccess><processid>07df77d3-e38c-4149-944b-21efdd8189f4</processid></stage><stage stageid="7135736b-2c20-4201-ba96-cd3803c9ec71" name="Get HTML Email Body" type="SubSheetInfo"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><display x="-420" y="-150" w="150" h="90" /></stage><stage stageid="6862c95a-4e64-4c04-b803-d6bc0a961d6a" name="End" type="End"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><display x="-210" y="-75" /><outputs><output type="text" name="EmailBody" narrative="EmailBody" stage="EmailBody" /></outputs></stage><stage stageid="ff4d1244-1d26-4128-98e6-f4754763a8c1" name="Start" type="Start"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><display x="-210" y="-165" /><inputs><input type="collection" name="Input Collection" narrative="Input Collection" stage="Input Collection" /></inputs><onsuccess>859ced28-a0dd-4dbb-b000-ecf640625892</onsuccess></stage><stage stageid="859ced28-a0dd-4dbb-b000-ecf640625892" name="Create HTML Email Body" type="Action"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><narrative>Create HTML Email Body</narrative><display x="-210" y="-120" /><inputs><input type="collection" name="Input Collection" narrative="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="text" name="EmailBody" narrative="EmailBody" stage="EmailBody" /></outputs><onsuccess>6862c95a-4e64-4c04-b803-d6bc0a961d6a</onsuccess><resource object="Get User Details - Create HTML Body" action="Get HTML Body" /></stage><stage stageid="24304d94-f275-4f94-86f9-a3abeee86b65" name="Input Collection" type="Collection"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><display x="-450" y="-60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="7e8b61ee-fbd9-4be5-a54a-6cc01a24bde7" name="EmailBody" type="Data"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><display x="-450" y="15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="94a754e8-71cc-422f-8fd8-e95cf84bec84" name="Input" type="Block"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><narrative>Input</narrative><display x="-495" y="-90" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="eac56d71-f967-42e8-9eba-705ad2cbc019" name="Output" type="Block"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><narrative>Output</narrative><display x="-495" y="-15" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="67b426b6-5767-4953-86b0-beb8ce370f5a" name="EmailBody" type="Data"><display x="-375" y="240" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="cf70bc41-ca56-402c-b2bb-ed2a008c15a2" name="Send Email Notification" type="SubSheetInfo"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-375" y="-195" w="210" h="90" /></stage><stage stageid="68752e26-56ee-4f6c-92ca-7bba08ec25f0" name="Start" type="Start"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-180" y="-210" /><inputs><input type="text" name="To" narrative="Email To" stage="Email To" /><input type="text" name="Subject" narrative="Email Subject" stage="Email Subject" /><input type="text" name="Body" narrative="Email Body" stage="Email Body" /><input type="flag" name="htmlFlag" narrative="htmlFlag" stage="htmlFlag" /></inputs><onsuccess>8eb0f99b-1304-4f91-a25b-56bf7673aab0</onsuccess></stage><stage stageid="ef4c679e-21c0-4123-a23e-c4d954603a85" name="End" type="End"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-180" y="-30" /></stage><stage stageid="b2af3c72-11b1-4e77-b2b8-928a782fb350" name="Configure" type="Action"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-180" y="-120" /><inputs><input type="text" name="Username" narrative="The POP3 and SMTP Username" expr="[Email Username]" /><input type="password" name="Password" narrative="The POP3 and SMTP Password" expr="[Email Password]" /><input type="text" name="POP3 Server" narrative="The POP3 Server address e.g. pop.domain.com" expr="" /><input type="text" name="SMTP Server" narrative="The SMTP Server address e.g. smtp.domain.com" expr="[GUD_Configure Email SMTP Server]" /><input type="number" name="POP3 Port" narrative="The POP3 Port, e.g. 110 or 995" expr="" /><input type="number" name="SMTP Port" narrative="The SMTP Port, e.g 25 or 465" expr="[GUD_Configure Email Server Port]" /><input type="flag" name="POP3 UseSSL" narrative="Whether to use SSL for POP3" expr="" /><input type="flag" name="SMTP UseSSL" narrative="Whether to use SSL for SMTP" expr="[GUD_Configure Email Use SSL Flag]" /></inputs><onsuccess>d24e24dd-ad09-46c8-84a0-d5f31bdfe3ad</onsuccess><resource object="Email - POP3/SMTP" action="Configure" /></stage><stage stageid="d24e24dd-ad09-46c8-84a0-d5f31bdfe3ad" name="Send Message" type="Action"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-180" y="-75" /><inputs><input type="text" name="From" narrative="The email address of the sender." expr="[Email Username]" /><input type="text" name="To" narrative="The email address of the recipient. To address multiple recipients use the format &quot;john.smith@example.com, henry.jones@example.com&quot; OR &quot;John Smith &lt;john.smith@example.com&gt;, Henry Jones &lt;henry.jones@example.com&gt;&quot;." expr="[Email To]" /><input type="text" name="Subject" narrative="The subject of the email." expr="[Email Subject]" /><input type="text" name="Body" narrative="The body of the email." expr="[Email Body]" /><input type="collection" name="Attachments" narrative="A Collection containing a list of files to add to the email as attachments." expr="[Attachments]" /><input type="flag" name="BodyIsHTML" narrative="Indicates if the body should be sent as HTML" expr="True" /><input type="text" name="CC" narrative="The email address of the recipient. To address multiple recipients use the format &quot;john.smith@example.com, henry.jones@example.com&quot; OR &quot;John Smith &lt;john.smith@example.com&gt;, Henry Jones &lt;henry.jones@example.com&gt;&quot;." expr="" /></inputs><onsuccess>ef4c679e-21c0-4123-a23e-c4d954603a85</onsuccess><resource object="Email - POP3/SMTP" action="Send Message" /></stage><stage stageid="8306f7e5-e945-49a5-98e2-fe6dee40f17a" name="Email To" type="Data"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-435" y="-90" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3305056a-b5b1-4e0d-a82a-62015916e4f5" name="Email Subject" type="Data"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-375" y="-90" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e5da7472-ea1e-4c26-88e6-b56b61fa2e0f" name="Email Body" type="Data"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-315" y="-90" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7ed571ea-ad3c-484b-813e-b32b747a0f80" name="Email Data" type="Block"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-480" y="-120" w="210" h="105" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="bdb28744-11a2-42c6-bfc0-7024358291b6" name="GUD_Configure Email Server Port" type="Data"><display x="-375" y="75" /><datatype>number</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="4f47700e-fd56-4eab-bc28-a6e8e3c1a444" name="GUD_Configure Email SMTP Server" type="Data"><display x="-435" y="75" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="9bf51dbf-8884-4d1e-a1c3-5f7d25fbc015" name="GUD_Configure Email Use SSL Flag" type="Data"><display x="-315" y="120" /><datatype>flag</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="a2254466-e65d-4d86-8989-089c43dbec28" name="GUD_From Email Credential Name" type="Data"><display x="-435" y="120" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="cc0445d4-c6d3-4edf-96ee-f1039189fa78" name="Send Email Notification" type="SubSheet"><display x="-120" y="780" /><inputs><input type="text" name="To" narrative="Email To" expr="[User Email]" /><input type="text" name="Subject" narrative="Email Subject" expr="&quot;Your Details with us&quot;" /><input type="text" name="Body" narrative="Email Body" expr="[EmailBody]" /><input type="flag" name="htmlFlag" narrative="htmlFlag" expr="True" /></inputs><onsuccess>f35188a0-a70b-4d28-ac6c-b69c0da617e8</onsuccess><processid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</processid></stage><stage stageid="4f2eeb94-aba2-4918-8340-26a03a099018" name="htmlFlag" type="Data"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-435" y="-45" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8eb0f99b-1304-4f91-a25b-56bf7673aab0" name="Get Credentials" type="Action"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><narrative>Get the specified set of credentials.

An Exception will occur if access to the credentials is not allowed, based on the running Resource, Process and User.</narrative><display x="-180" y="-165" /><inputs><input type="text" name="Credentials Name" narrative="The name of the credentials to get" expr="[GUD_From Email Credential Name]" /></inputs><outputs><output type="password" name="Password" narrative="The password" stage="Email Password" /><output type="text" name="Username" narrative="The user name" stage="Email Username" /><output type="date" name="Expiry Date" narrative="The expiry date" stage="" /><output type="text" name="Status" narrative="The status" stage="" /></outputs><onsuccess>b2af3c72-11b1-4e77-b2b8-928a782fb350</onsuccess><resource object="Blueprism.Automate.clsCredentialsActions" action="Get" /></stage><stage stageid="dafa8d9c-60d0-4be2-a954-4d332471d350" name="Email Password" type="Data"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-315" y="-45" /><datatype>password</datatype><initialvalueenc></initialvalueenc><private /><alwaysinit /></stage><stage stageid="1e3b0dcf-14e8-47ae-b0f7-4b50bcabfd19" name="Email Username" type="Data"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-375" y="-45" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="45d64d3a-4b39-43ae-a041-f6275468ad13" name="GUD_User Email Field in Database Table" type="Data"><display x="-375" y="120" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="e3f56eed-69bc-4a11-b523-50937b97a486" name="User Email" type="Data"><display x="-435" y="240" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="04622725-d0e8-4b7e-acca-48048272148a" name="Get User Email Address" type="Action"><narrative>Get User Email Address</narrative><display x="-120" y="150" /><inputs><input type="collection" name="Collection" narrative="The collection to read." expr="[Excel Data]" /><input type="text" name="Field Name" narrative="The field within the collection to read." expr="[GUD_User Email Field in Database Table]" /><input type="number" name="Row Index" narrative="The row index within the collection to read from. The index is from 0 to N-1 (where N is the total number of rows in the collection)." expr="[Row Index Excel Data]" /></inputs><outputs><output type="text" name="Value Read" narrative="The value of the requested field as text." stage="User Email" /></outputs><onsuccess>97dc2fbc-979f-42f6-9f3a-ad183afa7ae7</onsuccess><resource object="Utility - Collection Manipulation" action="Read Collection Field" /></stage><stage stageid="de246c9d-b97b-420a-a0b3-7b4fc07e9883" name="Row Index Excel Data" type="Data"><narrative>Row Index Excel Data</narrative><display x="-375" y="360" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="011ab111-2abf-4f17-a716-57abb73d0786" name="Send Email Notification" type="SubSheet"><display x="-45" y="690" /><inputs><input type="text" name="To" narrative="Email To" expr="[User Email]" /><input type="text" name="Subject" narrative="Email Subject" expr="&quot;Your Details with us: No Record Found&quot;" /><input type="text" name="Body" narrative="Email Body" expr="&quot;Dear Requestor,&quot;&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;&quot;This is to inform you that we do not have any of your details with us, matching with your email address.&quot;&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;&quot;Regards,&quot;&amp;NewLine()&amp;&#xA;&quot;Backend Team&quot;" /><input type="flag" name="htmlFlag" narrative="htmlFlag" expr="False" /></inputs><onsuccess>57ba0075-5c35-4ad6-8fe0-512fbf3301a0</onsuccess><processid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</processid></stage><stage stageid="054e3f4f-b823-422d-bec0-68697c3c2d4e" name="Anchor21" type="Anchor"><display x="-45" y="870" w="10" h="10" /><onsuccess>4ad2dcbd-673b-4af7-a35a-384bc84e2715</onsuccess></stage><stage stageid="dcbe6263-436f-41b0-b1d8-aece8241ed30" name="Get HTML Email Body Recover" type="Recover"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><narrative>Get HTML Email Body Recover</narrative><display x="30" y="-150" /><onsuccess>5b5a62eb-248d-476d-81e4-4f253271598d</onsuccess></stage><stage stageid="3b4196ef-48dd-40ba-b21e-9850f947b363" name="Throw Exception" type="Exception"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><narrative>Throw Exception</narrative><display x="180" y="-150" /><exception type="System" detail="[Exception]" /></stage><stage stageid="5b5a62eb-248d-476d-81e4-4f253271598d" name="Get Exception" type="Calculation"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><narrative>Get Exception</narrative><display x="105" y="-150" /><onsuccess>3b4196ef-48dd-40ba-b21e-9850f947b363</onsuccess><calculation expression="ExceptionDetail()" stage="Exception" /></stage><stage stageid="1f646da1-1ac1-4845-af6c-4882f8f687c6" name="Get HTML Email Body Recover" type="Recover"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><narrative>Get HTML Email Body Recover</narrative><display x="0" y="-195" /><onsuccess>b15527e9-6378-4302-a9ef-c0e5ee65c55f</onsuccess></stage><stage stageid="6da83306-fa99-4ab7-a921-c35e7bb84b3f" name="Throw Exception" type="Exception"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><narrative>Throw Exception</narrative><display x="150" y="-195" /><exception type="System" detail="[Exception]" /></stage><stage stageid="b15527e9-6378-4302-a9ef-c0e5ee65c55f" name="Get Exception" type="Calculation"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><narrative>Get Exception</narrative><display x="75" y="-195" /><onsuccess>6da83306-fa99-4ab7-a921-c35e7bb84b3f</onsuccess><calculation expression="ExceptionDetail()" stage="Exception" /></stage><stage stageid="3b77dfcd-a98c-450a-af7e-39b10a69496a" name="Exception" type="Data"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><display x="-450" y="90" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6363e54d-9ca0-4842-ba0b-88db0ddf5b70" name="Exception" type="Block"><subsheetid>07df77d3-e38c-4149-944b-21efdd8189f4</subsheetid><narrative>Exception</narrative><display x="-495" y="60" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="FF0000" /></stage><stage stageid="bd8f30b6-4b38-4fba-92f5-30e76196db67" name="Exception" type="Data"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><display x="-435" y="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="567421c9-7f74-42c0-9a99-d1ec5bf6c6d3" name="Exception" type="Block"><subsheetid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</subsheetid><narrative>Exception</narrative><display x="-480" y="0" w="210" h="60" /><font family="Segoe UI" size="10" style="Regular" color="FF0000" /></stage><stage stageid="dff93205-3c3a-4809-8bd4-6291255a7524" name="Set Table Checked Flag" type="Calculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>This flag is to check if the table is included in Join or not afer INNER JOIN &lt;here&gt;</narrative><display x="-285" y="750" /><onsuccess>792cb5ef-54b5-4945-9c99-f54510edb2c1</onsuccess><calculation expression="False" stage="Table Name Checked ?" /></stage><stage stageid="94e4eae3-bd27-4970-a5d5-2aeafbca68af" name="Create From Clause" type="MultipleCalculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Create From Clause</narrative><display x="-210" y="840" /><onsuccess>1ce0bc17-940c-478e-be70-687c32708b9b</onsuccess><steps><calculation expression="[From Clasue]&amp;Trim([Extracted Table.Name])" stage="From Clasue" /><calculation expression="[Loop Counter]+1" stage="Loop Counter" /><calculation expression="True" stage="From Clause Updated ?" /></steps></stage><stage stageid="c2468002-45f1-4ad7-bc20-9fc0b574bb56" name="From Clause Updated ?" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-330" y="195" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="92b1f29a-be6f-4197-97b1-caa4b9eb8a7d" name="From Cluase Updated ?" type="Decision"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>From Cluase Updated ?</narrative><display x="-210" y="975" /><decision expression="[From Clause Updated ?]" /><ontrue>1c4a5f0c-dcb8-4894-8791-506e41f96b92</ontrue><onfalse>2ab2b68a-a6bf-44c2-ba15-99f4391d7174</onfalse></stage><stage stageid="2ab2b68a-a6bf-44c2-ba15-99f4391d7174" name="Update From Clause" type="MultipleCalculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Update From Clause</narrative><display x="-135" y="975" /><onsuccess>f01ce1af-1e44-4aa6-a5e3-4949b9cf58cc</onsuccess><steps><calculation expression="[From Clasue]&amp;&quot; AND &quot;&amp;Trim([Database Criterias.Criteria])" stage="From Clasue" /><calculation expression="False" stage="From Clause Updated ?" /></steps></stage><stage stageid="1c4a5f0c-dcb8-4894-8791-506e41f96b92" name="Update From Clause" type="MultipleCalculation"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Update From Clause</narrative><display x="-210" y="1020" /><onsuccess>0a82dc50-a6b8-490a-98d4-b9fcd35c75b1</onsuccess><steps><calculation expression="[From Clasue]&amp;&quot; on &quot;&amp;[Database Criterias.Criteria]" stage="From Clasue" /><calculation expression="False" stage="From Clause Updated ?" /></steps></stage><stage stageid="f01ce1af-1e44-4aa6-a5e3-4949b9cf58cc" name="Anchor28" type="Anchor"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-135" y="1065" w="10" h="10" /><onsuccess>0a82dc50-a6b8-490a-98d4-b9fcd35c75b1</onsuccess></stage><stage stageid="55265c93-fdbc-454f-b4ed-527a2440841f" name="Environment Variables" type="Block"><narrative>Environment Variables</narrative><display x="-480" y="-90" w="210" h="285" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="5f7206d0-37a3-4fb9-8ba7-7671ef77b970" name="Email Data &amp; Collections" type="Block"><narrative>Email Data &amp; Collections</narrative><display x="-480" y="210" w="210" h="105" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="f562d31b-04d7-4757-ac77-f1bc78be7da4" name="Data Items" type="Block"><narrative>Data Items</narrative><display x="-480" y="330" w="210" h="225" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="8e3458b7-cfb5-4549-9eba-91785d189bd7" name="Exception" type="Data"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><display x="-435" y="390" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="67e608c8-dea6-41b7-983f-bde09adefa70" name="Exception" type="Block"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Exception</narrative><display x="-480" y="360" w="180" h="60" /><font family="Segoe UI" size="10" style="Regular" color="FF0000" /></stage><stage stageid="0ad54182-0140-404a-bc75-2213d8d16460" name="Inputs" type="Block"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Inputs</narrative><display x="-480" y="-90" w="180" h="150" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="276c2a94-fed1-4fe8-94cf-14c110f58bd7" name="SQL Data Items" type="Block"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>SQL Data Items</narrative><display x="-480" y="75" w="180" h="195" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="95af4b9c-8434-4df5-9ee6-10b259b99958" name="Output" type="Block"><subsheetid>2fed4c53-23ed-4284-a173-4901c29e4eea</subsheetid><narrative>Output</narrative><display x="-480" y="285" w="180" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="aade06da-62cd-4146-b19c-f45f38efb833" name="Main Page Global Recover" type="Recover"><narrative>Main Page Global Recover</narrative><display x="90" y="-150" /><onsuccess>ce0be141-7624-44b6-b875-a863242fde86</onsuccess></stage><stage stageid="342a01a7-03b9-41f9-8086-f39c1a2341e8" name="Throw Exception" type="Exception"><narrative>Throw Exception</narrative><display x="315" y="-150" /><exception type="System" detail="[Exception]" /></stage><stage stageid="ce0be141-7624-44b6-b875-a863242fde86" name="Get Exception" type="Calculation"><narrative>Get Exception</narrative><display x="165" y="-150" /><onsuccess>c6cb645e-0c00-425c-95d7-226d904fd93f</onsuccess><calculation expression="ExceptionDetail()" stage="Exception" /></stage><stage stageid="c6cb645e-0c00-425c-95d7-226d904fd93f" name="Send Email Notification" type="SubSheet"><display x="240" y="-150" /><inputs><input type="text" name="To" narrative="Email To" expr="[GUD_Controller Email ID]" /><input type="text" name="Subject" narrative="Email Subject" expr="&quot;Terminated!!! GDPR-SAR: Get User Details Process&quot;" /><input type="text" name="Body" narrative="Email Body" expr="&quot;Dear Controller,&quot;&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;&quot;This is to inform you that the &quot;&quot;GDPR-SAR: Get User Details Process&quot;&quot;&quot;&amp;&quot; got terminated. Details are as below:&quot;&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;&quot;Date/Time: &quot;&amp;Now()&amp;NewLine()&amp;&#xA;&quot;Message: &quot;&amp;[Exception]&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;&quot;Regards,&quot;&amp;NewLine()&amp;&#xA;&quot;BOT&quot;" /><input type="flag" name="htmlFlag" narrative="htmlFlag" expr="False" /></inputs><onsuccess>342a01a7-03b9-41f9-8086-f39c1a2341e8</onsuccess><processid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</processid></stage><stage stageid="e7a893c8-7a82-4ad7-82a3-f3664fa7fb00" name="GUD_Report Flag" type="Data"><display x="-435" y="165" /><datatype>flag</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="d4a96507-d2ec-4a9a-a573-6f17369f62ce" name="Exception" type="Data"><display x="-435" y="600" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="593d2da4-99ee-4a70-9add-8e99817fb7cd" name="Exception" type="Block"><narrative>Exception</narrative><display x="-480" y="570" w="210" h="60" /><font family="Segoe UI" size="10" style="Regular" color="FF0000" /></stage><stage stageid="0b5470f5-f994-442e-ac49-615faf4bd3ee" name="Archive Excel File" type="SubSheetInfo"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-405" y="-135" w="150" h="90" /></stage><stage stageid="c8165aac-d6e5-4363-8583-e658b65e2aae" name="Start" type="Start"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-195" y="-150" /><inputs><input type="text" name="Excel Path" narrative="Excel Path" stage="Excel Path" /></inputs><onsuccess>4955f57d-8ea4-45a9-8780-1edf22953cbf</onsuccess></stage><stage stageid="95656189-e762-4308-bd24-e74a2744208a" name="End" type="End"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-195" y="270" /></stage><stage stageid="35858fac-c936-48bb-b3f7-04a37154070d" name="GUD_Folder Archive Path" type="Data"><display x="-435" y="-15" /><datatype>text</datatype><initialvalue /><exposure>Environment</exposure><alwaysinit /></stage><stage stageid="ff2859be-ffef-4e46-9185-4c8d27aac6f9" name="Move File" type="Action"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><narrative>Move File</narrative><display x="-195" y="180" /><inputs><input type="text" name="File Path" narrative="The full path to the file to move" expr="[Excel Path]" /><input type="text" name="Destination Path" narrative="The path to the folder to move the file to" expr="[Today's Folder Path]" /></inputs><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs><onsuccess>ac890f11-821e-4bf1-85d2-a6db89f6da8e</onsuccess><resource object="Utility - File Management" action="Move File" /></stage><stage stageid="98242623-cd53-47ba-a8fb-a028c57c335f" name="Success" type="Data"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-435" y="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d8c5c5f0-7784-448c-bd98-36ac63bd99fd" name="Message" type="Data"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-375" y="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c276e74c-d4fa-42b6-b8c9-f06b6f52a261" name="Move File Variables" type="Block"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><narrative>Move File Variables</narrative><display x="-480" y="0" w="150" h="90" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="ac890f11-821e-4bf1-85d2-a6db89f6da8e" name="File Moved ?" type="Decision"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><narrative>File Moved ?</narrative><display x="-195" y="225" /><decision expression="[Success]" /><ontrue>95656189-e762-4308-bd24-e74a2744208a</ontrue><onfalse>d10ab24e-12cb-491f-9cfb-7c30b2b0ef10</onfalse></stage><stage stageid="d10ab24e-12cb-491f-9cfb-7c30b2b0ef10" name="Send Email Notification" type="SubSheet"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-120" y="225" /><inputs><input type="text" name="To" narrative="Email To" expr="[GUD_Controller Email ID]" /><input type="text" name="Subject" narrative="Email Subject" expr="&quot;GDPR-SAR Process: File Could NOT be archieved!!!&quot;" /><input type="text" name="Body" narrative="Email Body" expr="&quot;Dear Controller,&quot;&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;&quot;This is to inform you that the Excel File with user details could not be archived. Please archive the file manually if needed.&quot;&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;&quot;Date/Time: &quot;&amp;Now()&amp;NewLine()&amp;&#xA;&quot;File: &quot;&amp;&quot;&quot;&amp;[GUD_Excel Path]&amp;&quot;&quot;&amp;NewLine()&amp;&#xA;&quot;Message: &quot;&amp;[Message]&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;&quot;Regards,&quot;&amp;NewLine()&amp;&#xA;&quot;BOT&quot;" /><input type="flag" name="htmlFlag" narrative="htmlFlag" expr="False" /></inputs><onsuccess>c1ce9b41-bbc1-46f4-8eb7-b3fb0bca6737</onsuccess><processid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</processid></stage><stage stageid="c1ce9b41-bbc1-46f4-8eb7-b3fb0bca6737" name="Anchor29" type="Anchor"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-120" y="270" w="10" h="10" /><onsuccess>95656189-e762-4308-bd24-e74a2744208a</onsuccess></stage><stage stageid="9f32a64a-8a6b-4c84-bd23-27490552b8eb" name="Archive Excel File" type="SubSheet"><display x="-120" y="960" /><inputs><input type="text" name="Excel Path" narrative="Excel Path" expr="[GUD_Excel Path]" /></inputs><onsuccess>e61ff39f-3ed8-4b00-a524-509124c46bc9</onsuccess><processid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</processid></stage><stage stageid="4955f57d-8ea4-45a9-8780-1edf22953cbf" name="Excel Path Starts from Quotes ?" type="Decision"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><narrative>Check if Excel Path starts from Quotes ?</narrative><display x="-195" y="-105" /><decision expression="Left(Trim([Excel Path]), 1) = &quot;&quot;&quot;&quot; OR Left(Trim([Excel Path]), 1) = &quot;'&quot;" /><ontrue>4b869b7b-06ca-4a35-b017-733ec7b27779</ontrue><onfalse>725a5ee1-49ce-4f93-8528-e0b8f0977461</onfalse></stage><stage stageid="4b869b7b-06ca-4a35-b017-733ec7b27779" name="Remove Starting  Quotes from Excel Path" type="Calculation"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><narrative>Remove Starting  Quotes from Excel Path</narrative><display x="-195" y="-60" /><onsuccess>90345484-4993-4076-8cc9-c853dfea111c</onsuccess><calculation expression="Right(Trim([Excel Path]), Len([Excel Path])-1)" stage="Excel Path" /></stage><stage stageid="a4674a89-3355-4b71-8747-f18366ed0fa6" name="Excel Path Ends from Quotes ?" type="Decision"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><narrative>Check if Excel Path ends from Quotes ?</narrative><display x="-195" y="0" /><decision expression="Right(Trim([Excel Path]), 1) = &quot;&quot;&quot;&quot; OR Right(Trim([Excel Path]), 1) = &quot;'&quot;" /><ontrue>386b96d0-01df-4d30-8a59-bd70f3f1b893</ontrue><onfalse>81475c14-ae65-4c70-83e8-3a2a1bb79b59</onfalse></stage><stage stageid="386b96d0-01df-4d30-8a59-bd70f3f1b893" name="Remove End Quotes from Excel Path" type="Calculation"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><narrative>Remove end Quotes from Excel Path</narrative><display x="-195" y="45" /><onsuccess>81cfacb4-7a10-4184-be93-d98b5ce3a4bc</onsuccess><calculation expression="Left(Trim([Excel Path]), Len([Excel Path])-1)" stage="Excel Path" /></stage><stage stageid="725a5ee1-49ce-4f93-8528-e0b8f0977461" name="Anchor3" type="Anchor"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-150" y="-105" w="10" h="10" /><onsuccess>f84e749b-939e-4a82-8805-d61af0316bb2</onsuccess></stage><stage stageid="f84e749b-939e-4a82-8805-d61af0316bb2" name="Anchor4" type="Anchor"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-150" y="-30" w="10" h="10" /><onsuccess>90345484-4993-4076-8cc9-c853dfea111c</onsuccess></stage><stage stageid="90345484-4993-4076-8cc9-c853dfea111c" name="Anchor5" type="Anchor"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-195" y="-30" w="10" h="10" /><onsuccess>a4674a89-3355-4b71-8747-f18366ed0fa6</onsuccess></stage><stage stageid="81475c14-ae65-4c70-83e8-3a2a1bb79b59" name="Anchor7" type="Anchor"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-150" y="0" w="10" h="10" /><onsuccess>7b6e46c0-585a-4134-bd62-2419520fc3fc</onsuccess></stage><stage stageid="7b6e46c0-585a-4134-bd62-2419520fc3fc" name="Anchor30" type="Anchor"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-150" y="90" w="10" h="10" /><onsuccess>81cfacb4-7a10-4184-be93-d98b5ce3a4bc</onsuccess></stage><stage stageid="8d22443d-8abd-4065-959d-657c7fbcdea9" name="Excel Path" type="Data"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-435" y="-45" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="28ac03ac-fa2c-4abe-a94d-fc2e79ee4d33" name="Input" type="Block"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><narrative>Input</narrative><display x="-480" y="-75" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="2c0cb7b0-15fe-4f5d-a978-15bd2796f010" name="Get Row Count" type="Action"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Get Row Count</narrative><display x="-180" y="495" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Excel Data&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Row Count" /></outputs><onsuccess>aba1b8f5-7ccf-48c2-908b-45068f0c00b8</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="a14e4af2-6939-474f-a625-a7f4f963a60b" name="Row Count" type="Data"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><display x="-375" y="180" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="92fa0345-a7d2-4886-9b01-ab2cdffab75b" name="Output" type="Block"><subsheetid>23e12da6-7991-4140-b58a-19954945ca7d</subsheetid><narrative>Output</narrative><display x="-480" y="150" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="ab65c538-68f2-4e5d-9d30-de5e782342a5" name="Row Count" type="Data"><display x="-315" y="240" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a7dbd941-974d-4e10-a7d7-034160caebe8" name="Records Available ?" type="Decision"><narrative>Records Available ?</narrative><display x="-120" y="-30" /><decision expression="[Row Count]&gt;0" /><ontrue>60a8f20e-a068-4f20-950f-47a09d1b841d</ontrue><onfalse>e2f3e70a-afab-4ea1-bd0a-a782e49123a6</onfalse></stage><stage stageid="e2f3e70a-afab-4ea1-bd0a-a782e49123a6" name="No Data Available Exception" type="Exception"><narrative>No Data Available Exception</narrative><display x="-30" y="-30" /><exception type="Business" detail="&quot;No User Data is available in the spreadsheet located at: &quot;&amp;&quot;&quot;&quot;&quot;&amp;[GUD_Excel Path]&amp;&quot;&quot;&quot;&quot;" /></stage><stage stageid="60a8f20e-a068-4f20-950f-47a09d1b841d" name="Get Collection Fields" type="Action"><narrative>Get Collection Fields</narrative><display x="-120" y="15" /><inputs><input type="collection" name="Input Collection" narrative="The collection to get the fields from." expr="[Excel Data]" /></inputs><outputs><output type="collection" name="Collection Fields" narrative="A collection containing the fields." stage="Table Columns" /></outputs><onsuccess>4289ffdd-0b27-4c04-97fb-7151b8019e03</onsuccess><resource object="Utility - Collection Manipulation" action="Get Collection Fields" /></stage><stage stageid="4289ffdd-0b27-4c04-97fb-7151b8019e03" name="Add Status Column to Report Column" type="Action"><narrative>Add Status Column to Report Column</narrative><display x="-120" y="60" /><inputs><input type="collection" name="Collection" narrative="The collection to append a field to." expr="[Excel Data]" /><input type="text" name="Field Name" narrative="The name of the new field." expr="&quot;Status&quot;" /><input type="text" name="Value" narrative="The value to be put in the new field." expr="&quot;&quot;" /></inputs><outputs><output type="collection" name="Appended Collection" narrative="The collection with field appended." stage="Excel Data" /></outputs><onsuccess>ec2e5dfd-74cf-49e6-b070-cce318e970f3</onsuccess><resource object="Utility - Collection Manipulation" action="Append Field (Text)" /></stage><stage stageid="57ba0075-5c35-4ad6-8fe0-512fbf3301a0" name="Update Status" type="Calculation"><narrative>Update Status</narrative><display x="-45" y="735" /><onsuccess>054e3f4f-b823-422d-bec0-68697c3c2d4e</onsuccess><calculation expression="&quot;No record found, User has been informed by email&quot;" stage="Excel Data.Status" /></stage><stage stageid="f35188a0-a70b-4d28-ac6c-b69c0da617e8" name="Update Status" type="Calculation"><narrative>Update Status</narrative><display x="-120" y="825" /><onsuccess>4ad2dcbd-673b-4af7-a35a-384bc84e2715</onsuccess><calculation expression="&quot;Record Found, sent details to User&quot;" stage="Excel Data.Status" /></stage><stage stageid="8b09f696-d50d-4e20-ab54-19d227544d3a" name="Create Report" type="SubSheetInfo"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><display x="-405" y="-135" w="150" h="90" /></stage><stage stageid="e541116c-63a1-4c86-a378-0f76a36caaf6" name="Start" type="Start"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><display x="-210" y="-150" /><inputs><input type="collection" name="Report Collection" narrative="Report Collection" stage="Data" /></inputs><onsuccess>a562534b-7c86-4ab6-9981-c6c02a26161a</onsuccess></stage><stage stageid="f293f14c-3ad2-42ac-8817-6943ea10550a" name="End" type="End"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><display x="-210" y="345" /><outputs><output type="text" name="Report Name" narrative="Report Name" stage="Report Name" /></outputs></stage><stage stageid="fbd75203-0efa-4c4c-aea9-4e8e8b188c11" name="Check Report Flag" type="Decision"><narrative>Check Report Flag</narrative><display x="-120" y="915" /><decision expression="[GUD_Report Flag]" /><ontrue>e4974ff2-7dbb-4b30-9fca-af1d8e9731ea</ontrue><onfalse>9f32a64a-8a6b-4c84-bd23-27490552b8eb</onfalse></stage><stage stageid="e4974ff2-7dbb-4b30-9fca-af1d8e9731ea" name="Create Report" type="SubSheet"><display x="-45" y="915" /><inputs><input type="collection" name="Report Collection" narrative="Report Collection" expr="[Excel Data]" /></inputs><outputs><output type="text" name="Report Name" narrative="Report Name" stage="Report Name" /></outputs><onsuccess>3a32ca96-7b67-4ba4-b32a-759f6b94ff8d</onsuccess><processid>3d74cace-ec1b-474c-8099-0a7e8a46919a</processid></stage><stage stageid="e2dd959c-1315-4435-9714-531085729ab2" name="Send Email Notification" type="SubSheet"><display x="-45" y="960" /><inputs><input type="text" name="To" narrative="Email To" expr="[GUD_Controller Email ID]" /><input type="text" name="Subject" narrative="Email Subject" expr="&quot;GDPR-SAR Report for &quot;&amp;FormatDate(Today(), &quot;dd-MMM-yyyy&quot;)" /><input type="text" name="Body" narrative="Email Body" expr="&quot;Dear Controller,&quot;&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;&quot;Please find attached GDPR-SAR Report for today.&quot;&amp;NewLine()&amp;NewLine()&amp;&#xA;&#xA;&quot;Regards,&quot;&amp;NewLine()&amp;&#xA;&quot;BOT&quot;" /><input type="flag" name="htmlFlag" narrative="htmlFlag" expr="" /></inputs><onsuccess>9f32a64a-8a6b-4c84-bd23-27490552b8eb</onsuccess><processid>86ab28b0-c95b-46eb-a413-6bed7408ec9a</processid></stage><stage stageid="58cf1fdf-8d7c-4d8d-9c59-a38ed7802e28" name="Create Instance" type="Action"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Create Instance</narrative><display x="-210" y="30" /><inputs><input type="flag" name="Enable Events" narrative="Flag to indicate that events should be enabled / disabled on the attached instance - defaulted to True" expr="" /></inputs><outputs><output type="number" name="handle" narrative="An integer which can be used to identify the created instance in subsequent actions" stage="handle" /></outputs><onsuccess>6c93f6a4-3de8-44e4-a94b-534508713b4b</onsuccess><resource object="MS Excel VBO" action="Create Instance" /></stage><stage stageid="6c93f6a4-3de8-44e4-a94b-534508713b4b" name="Create Workbook" type="Action"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Create Workbook</narrative><display x="-210" y="75" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook should be created. The default of zero indicates the currently active instance." expr="[handle]" /></inputs><outputs><output type="text" name="Workbook Name" narrative="The name of the workbook that Excel has created - this can be changed using the &quot;Save Workbook As&quot; action" stage="Workbook Name" /></outputs><onsuccess>ca04606b-1504-4921-babd-8c321b6b38f0</onsuccess><resource object="MS Excel VBO" action="Create Workbook" /></stage><stage stageid="ca04606b-1504-4921-babd-8c321b6b38f0" name="Create Worksheet" type="Action"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Create Worksheet</narrative><display x="-210" y="120" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet should be created. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The name of the workbook in which the sheet should be created - The default empty value indicates the currently active workbook on the specified instance." expr="[Workbook Name]" /><input type="text" name="Worksheet Name" narrative="The name of the sheet which should be activated. The default empty text value indicates that the currently active sheet should be, er, activated, making this a no-op." expr="&quot;Report&quot;" /></inputs><onsuccess>ead1b48f-6b4d-4a68-b607-17ce18a2d2dc</onsuccess><resource object="MS Excel VBO" action="Create Worksheet" /></stage><stage stageid="ead1b48f-6b4d-4a68-b607-17ce18a2d2dc" name="Write Collection" type="Action"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Write Collection</narrative><display x="-210" y="165" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the specified collection should be written. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The name of the workbook within which the data should be written. The default empty value indicates the current workbook within the specified instance." expr="[Workbook Name]" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet on which the given data should be written. The default empty value indicates the current sheet within the specified workbook." expr="&quot;Report&quot;" /><input type="collection" name="Collection" narrative="The collection containing the data which should be written to the worksheet." expr="[Data]" /><input type="text" name="Cell Reference" narrative="The reference at which the collection should be written." expr="&quot;A1&quot;" /><input type="flag" name="Include Column Names" narrative="True to indicate that the column names from the collection should be written out as the first row; False to ignore the column names and just write out the data." expr="True" /></inputs><onsuccess>47b6e50a-acfa-44f6-b9fe-750b06498708</onsuccess><resource object="MS Excel VBO" action="Write Collection" /></stage><stage stageid="442f9ec9-822f-4d76-a24a-57394f6a1225" name="Save As" type="Action"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Save As</narrative><display x="-210" y="255" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook which should be saved resides. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The name of the workbook which should be saved" expr="[Workbook Name]" /><input type="text" name="Filename" narrative="The full path and filename to which the workbook should be saved." expr="[Report Name]" /></inputs><outputs><output type="text" name="New Workbook Name" narrative="The new workbook name which Excel will use to identify the workbook within the instance." stage="" /></outputs><onsuccess>d482848d-053e-424e-89e0-9ffd709973cb</onsuccess><resource object="MS Excel VBO" action="Save Workbook As" /></stage><stage stageid="d482848d-053e-424e-89e0-9ffd709973cb" name="Close Instance" type="Action"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Close Instance</narrative><display x="-210" y="300" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance to be closed. Zero indicates the currently active instance." expr="[handle]" /><input type="flag" name="Save Changes" narrative="True to save the changes to the open workbooks on the instance, False to discard any changes. Default is False." expr="False" /></inputs><onsuccess>f293f14c-3ad2-42ac-8817-6943ea10550a</onsuccess><resource object="MS Excel VBO" action="Close Instance" /></stage><stage stageid="0d759bb1-74e1-4d9b-b7a6-399170093871" name="Data" type="Collection"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Report Data</narrative><display x="-435" y="-45" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="f076f2fe-af44-4552-9c80-e074227ebcd6" name="Excel Archive Path is Provided ?" type="Decision"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Excel Archive Path is Provided ?</narrative><display x="-195" y="615" w="90" h="30" /><decision expression="Trim([GUD_Folder Archive Path]) &lt;&gt; &quot;&quot;" /><ontrue>b6694ed0-875e-442d-8862-25815988155f</ontrue><onfalse>351a5690-6aa9-4b44-9559-2311d02cccc9</onfalse></stage><stage stageid="351a5690-6aa9-4b44-9559-2311d02cccc9" name="Store Values" type="MultipleCalculation"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Store Values</narrative><display x="-90" y="615" /><onsuccess>789a6d7b-ad6f-4d13-ae21-3c6dcd59750e</onsuccess><steps><calculation expression="[Missing Values]&amp;&quot;- GUD_Excel Archive Path&quot;&amp;NewLine()" stage="Missing Values" /><calculation expression="False" stage="All EV Values Available Flag" /></steps></stage><stage stageid="b6694ed0-875e-442d-8862-25815988155f" name="Anchor31" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-195" y="645" w="10" h="10" /><onsuccess>c6d18edd-b1b2-43e9-9f14-586af3079c27</onsuccess></stage><stage stageid="789a6d7b-ad6f-4d13-ae21-3c6dcd59750e" name="Anchor32" type="Anchor"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><display x="-90" y="645" w="10" h="10" /><onsuccess>b6694ed0-875e-442d-8862-25815988155f</onsuccess></stage><stage stageid="4b2bdc6d-cda6-4200-8862-74b81fd6e8ad" name="Input" type="Block"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Input</narrative><display x="-480" y="-75" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="d5db6c64-4bf4-4b45-a1a1-abe9ec0757ee" name="handle" type="Data"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><display x="-435" y="30" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9c6186bb-b0c1-4085-92fa-514f2ad2eb45" name="Workbook Name" type="Data"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><display x="-375" y="30" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="fbe48b2e-d04e-4ad2-948d-5d440ed22e7d" name="Locals" type="Block"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Locals</narrative><display x="-480" y="0" w="150" h="90" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="47b6e50a-acfa-44f6-b9fe-750b06498708" name="Delete Sheet1" type="Action"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Delete Sheet1</narrative><display x="-210" y="210" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet which should be deleted resides. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The name of the workbook which contains the sheet to be deleted. The default empty value indicates the currently active workbook on the specified instance." expr="[Workbook Name]" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet to be deleted. The default empty value indicates the currently active worksheet." expr="&quot;Sheet1&quot;" /></inputs><onsuccess>442f9ec9-822f-4d76-a24a-57394f6a1225</onsuccess><resource object="MS Excel VBO" action="Delete Worksheet" /></stage><stage stageid="7e0f3c93-7940-498c-bfe6-5a37ecc558e3" name="Get Report Name" type="Calculation"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Create Report directly under Archive Folder</narrative><display x="-210" y="-15" /><onsuccess>58cf1fdf-8d7c-4d8d-9c59-a38ed7802e28</onsuccess><calculation expression="[GUD_Folder Archive Path]&amp;&quot;Reports\&quot;&amp;&quot;GDPR-SAR Report_&quot;&amp;FormatDateTime(Now(), &quot;dd-MMM-yyyy_hh_mm_ss&quot;)&amp;&quot;.xlsx&quot;" stage="Report Name" /></stage><stage stageid="4dc29b0d-865b-4834-bad3-c7f99a9a1b7c" name="Report Name" type="Data"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><display x="-435" y="60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="854fe214-6705-4706-9030-70b9ed2dd9a0" name="Report Name" type="Data"><display x="-435" y="540" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3a32ca96-7b67-4ba4-b32a-759f6b94ff8d" name="Add Row to Attachment Collection" type="Action"><narrative>Add Row to Attachment Collection</narrative><display x="30" y="915" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Attachments&quot;" /></inputs><onsuccess>41dd9fa1-be06-439a-a3e9-c0338d00ee6b</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="1e272adb-bb38-401b-9e52-926a2c366974" name="Attachments" type="Collection"><narrative>Collection to store Attachment Path</narrative><display x="-315" y="495" /><datatype>collection</datatype><alwaysinit /><collectioninfo><field name="Path" type="text" description="Path of the file to be attached" /></collectioninfo></stage><stage stageid="ecea7167-802c-421c-8ba2-d59844af82a4" name="Empty Attachment Collection" type="Action"><subsheetid>47035526-50c6-4fee-9655-0c1a4c785b9d</subsheetid><narrative>Delete All Rows from the collection</narrative><display x="-195" y="780" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Attachments&quot;" /></inputs><onsuccess>d323feae-957b-4da5-bd56-f1a5ccdbf0aa</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Remove All Rows" /></stage><stage stageid="41dd9fa1-be06-439a-a3e9-c0338d00ee6b" name="Store File Name in Attachments" type="Calculation"><narrative>Store File Name in Attachments</narrative><display x="30" y="960" /><onsuccess>e2dd959c-1315-4435-9714-531085729ab2</onsuccess><calculation expression="[Report Name]" stage="Attachments.Path" /></stage><stage stageid="7d656cb7-f3bd-4361-a2d9-b409a9b5c168" name="Create Today's Folder" type="Action"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><narrative>Create Today's Folder</narrative><display x="-195" y="135" /><inputs><input type="text" name="Directory Path" narrative="The path in which to create the directory" expr="[Today's Folder Path]" /><input type="flag" name="Error If Already Exists" narrative="True to generate an error if the directory already exists" expr="False" /></inputs><outputs><output type="flag" name="Success" narrative="True if successful" stage="" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="" /></outputs><onsuccess>ff2859be-ffef-4e46-9185-4c8d27aac6f9</onsuccess><resource object="Utility - File Management" action="Create Directory" /></stage><stage stageid="81cfacb4-7a10-4184-be93-d98b5ce3a4bc" name="Get Today's Folder Path for Data FIles" type="Calculation"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><narrative>Get Today's Folder Path for Data FIles</narrative><display x="-195" y="90" /><onsuccess>7d656cb7-f3bd-4361-a2d9-b409a9b5c168</onsuccess><calculation expression="[GUD_Folder Archive Path]&amp;&quot;Data Files\&quot;&amp;FormatDate(Today(), &quot;dd-MMM-yyyy&quot;)&amp;&quot;\&quot;" stage="Today's Folder Path" /></stage><stage stageid="c95e96ef-c567-4c7b-b698-df365aaf645a" name="Today's Folder Path" type="Data"><subsheetid>05ab5a2a-4a28-49b8-a142-3656a2a81f53</subsheetid><display x="-435" y="60" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a562534b-7c86-4ab6-9981-c6c02a26161a" name="Check Reports Folder Status" type="Action"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><loginhibit onsuccess="true" /><narrative>Check if Reports Folder is available under Archive directory</narrative><display x="-210" y="-105" /><inputs><input type="text" name="Directory Name" friendlyname="Directory Name" narrative="The directory to check exists" expr="[GUD_Folder Archive Path]&amp;&quot;Reports\&quot;" /></inputs><outputs><output type="flag" name="Exists" friendlyname="Exists" narrative="True if the directory exists" stage="Folder Exists ?" /></outputs><onsuccess>7eeec517-ee23-4646-b802-0f87862e2e67</onsuccess><resource object="Utility - File Management" action="Directory Exists" /></stage><stage stageid="9ddc13a9-1c1d-4a8d-a0c5-d88a1f5542a6" name="Folder Exists ?" type="Data"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><display x="-375" y="60" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7eeec517-ee23-4646-b802-0f87862e2e67" name="Folder Exists ?" type="Decision"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><narrative>Folder Exists ?</narrative><display x="-210" y="-60" /><decision expression="[Folder Exists ?]" /><ontrue>7e0f3c93-7940-498c-bfe6-5a37ecc558e3</ontrue><onfalse>8e3e48f8-a883-401a-bb22-439914d2f01c</onfalse></stage><stage stageid="8e3e48f8-a883-401a-bb22-439914d2f01c" name="Create Directory" type="Action"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><loginhibit onsuccess="true" /><narrative>Check if Reports Folder is available under Archive directory</narrative><display x="-135" y="-60" /><inputs><input type="text" name="Directory Path" friendlyname="Directory Path" narrative="The path in which to create the directory" expr="[GUD_Folder Archive Path]&amp;&quot;Reports\&quot;" /><input type="flag" name="Error If Already Exists" friendlyname="Error If Already Exists" narrative="True to generate an error if the directory already exists" expr="False" /></inputs><outputs><output type="flag" name="Success" friendlyname="Success" narrative="True if successful" stage="" /><output type="text" name="Message" friendlyname="Message" narrative="An error message if unsuccessful" stage="" /></outputs><onsuccess>a65d6806-0fbf-4d47-ab65-788a78e2e8dd</onsuccess><resource object="Utility - File Management" action="Create Directory" /></stage><stage stageid="a65d6806-0fbf-4d47-ab65-788a78e2e8dd" name="Anchor33" type="Anchor"><subsheetid>3d74cace-ec1b-474c-8099-0a7e8a46919a</subsheetid><loginhibit onsuccess="true" /><display x="-135" y="-15" w="10" h="10" /><onsuccess>7e0f3c93-7940-498c-bfe6-5a37ecc558e3</onsuccess></stage></process></process>
        <object id="29192c0f-d13c-4769-bed3-9c51217efab4" name="Data - SQL Server" xmlns="http://www.blueprism.co.uk/product/process"><process name="Data - SQL Server" version="6.0.0.434" bpversion="6.6.0.15260" narrative="SQL Server interaction object." byrefcollection="true" type="object" runmode="Background"><appdef><element name="Application Root"><id>86c30a1c-12a4-44c4-9674-b287d0dfa70d</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>50</camerax><cameray>25</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="cfb6da91-518b-40a3-8e0e-115ff0252ea7" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>-49.5</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="3eacbbb6-d03e-4df7-9904-a3b1ac67c882" type="Normal" published="True"><name>Configure</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="88d8d9e5-f97e-40d6-b049-bb643eb06852" type="Normal" published="False"><name>Raise Exception If Appropriate</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="90429413-7792-4513-8bc0-d6d079aa08b9" type="Normal" published="True"><name>Set Connection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="459569f2-c792-4948-8884-5c2a0917cc16" type="Normal" published="False"><name>Open</name><view><camerax>-41</camerax><cameray>-57</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="109afac8-f6b2-467f-971c-c6141124b87a" type="Normal" published="False"><name>Close</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="3842f7c4-4df2-4e6a-bedd-6dacf01a6db4" type="Normal" published="False"><name>Is Open</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5" type="Normal" published="False"><name>Internal Close</name><view><camerax>-40</camerax><cameray>-90</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="3ee937ec-012f-445c-9b2b-ebbcb6d3614d" type="Normal" published="True"><name>Begin Transaction</name><view><camerax>50</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ba712d56-697c-48af-bc96-85e49eb968fc" type="Normal" published="True"><name>Commit Transaction</name><view><camerax>43</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="4b6e35c6-8ec4-4fbe-b9d7-d43c48492695" type="Normal" published="True"><name>Rollback Transaction</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="c07ae8a2-a04f-46f2-8919-ec4da73d5b25" type="Normal" published="True"><name>Execute</name><view><camerax>-26</camerax><cameray>12</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a45f6098-73e2-4639-a002-31592645bfa5" type="Normal" published="True"><name>Get Records Affected</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="12d7c91f-29ac-4711-9614-7ab992dc4b1f" type="Normal" published="True"><name>Get Number</name><view><camerax>26</camerax><cameray>48</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="18349d7d-79b1-4397-a8a0-490ab27f459f" type="Normal" published="True"><name>Get Text</name><view><camerax>0</camerax><cameray>24</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="780529b8-393d-4d1d-bc5f-34f383fe53ec" type="Normal" published="True"><name>Get Collection</name><view><camerax>-49.5</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="13b6c91d-68e8-46e9-bcab-9261446dc0af" type="Normal" published="True"><name>Get CSV File</name><view><camerax>-49.5</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e50a93aa-11fe-4457-a16d-0237560fff18" type="Normal" published="True"><name>Get CSV</name><view><camerax>20</camerax><cameray>-38</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="f3bf5e12-d2cf-4c5d-bda5-0deae3c26316" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>d16cc64f-d5d1-4aaf-bea5-f814e1f2657b</onsuccess></stage><stage stageid="d16cc64f-d5d1-4aaf-bea5-f814e1f2657b" name="End" type="End"><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0efcc61e-6916-4463-ae94-c24edb2adc75" name="Stage1" type="ProcessInfo"><loginhibit /><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><references><reference>System.Data.dll</reference><reference>System.XML.dll</reference></references><imports><import>System</import><import>System.Data</import><import>System.Data.SqlClient</import><import>System.IO</import></imports><language>visualbasic</language><globalcode><![CDATA[

]]></globalcode><code><![CDATA[
Private moConnection As SqlConnection
Private moTransaction As SqlTransaction

Private Sub WriteCsv(ByVal sql As String, ByVal out As TextWriter)

	' The target data set
	Dim ds As New DataSet()

	' Build and execute the command, dumping the data into the above set
    Using cmd As New SqlCommand()
        cmd.Connection = moConnection
        cmd.Transaction = moTransaction
        cmd.CommandText = sql
        
        Using da As New SqlDataAdapter()
            da.SelectCommand = cmd
            da.Fill(ds)
        End Using
	End Using

	' Go through the data, escaping and outputting to the writer
	Dim quotesRequiredChars() As Char = {","c, """"c}
	For Each tab As DataTable In ds.Tables
		' Column headers first
		Dim first As Boolean = True
		For Each col As DataColumn In tab.Columns
			If first Then first = False Else out.Write(",")
			Dim val As String = col.ColumnName
			If val.IndexOfAny(quotesRequiredChars) >= 0 Then _
			 val = """" & val.Replace("""", """""") & """"
			out.Write(val)
		Next
		out.WriteLine()
		' Then a line for each row
		For Each row As DataRow in tab.Rows
			first = True
			For Each col As DataColumn in tab.Columns
				If first Then first = False Else out.Write(",")
				If row.IsNull(col) Then Continue For
				Dim val As String = row(col).ToString()
				If val.IndexOfAny(quotesRequiredChars) >= 0 Then _
				 val = """" & val.Replace("""", """""") & """"
				out.Write(val)
			Next
			out.WriteLine()
		Next
		' Separate each table with a couple of blank lines
		out.WriteLine()
		out.WriteLine()                
	Next
	
	out.Flush()

End Sub

Private Function GetScalar(Of T)(ByVal sql As String, _
 ByRef success As Boolean, ByRef msg As String) As T

	' Assume Success
	success = True
	msg = ""

	Try
		Using cmd As New SqlCommand()
			cmd.Connection = moConnection
			cmd.CommandText = SQL
			cmd.Transaction = moTransaction
			Return CType(cmd.ExecuteScalar(), T)
		End Using
	Catch ex As Exception
		success = False
		msg = ex.Message
		Return Nothing
	End Try

End Function]]></code></stage><stage stageid="fd95e8ae-614b-4bae-a0f9-cbd04cef37ce" name="Clean Up" type="SubSheetInfo"><subsheetid>cfb6da91-518b-40a3-8e0e-115ff0252ea7</subsheetid><loginhibit /><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="e91da0c2-e60f-4eae-a108-bd99aaff046f" name="Start" type="Start"><subsheetid>cfb6da91-518b-40a3-8e0e-115ff0252ea7</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>88b89098-8bb2-42fc-8e43-bad5b1e4f400</onsuccess></stage><stage stageid="91836284-14a0-4c0f-b9d5-8cd74b4d1632" name="End" type="End"><subsheetid>cfb6da91-518b-40a3-8e0e-115ff0252ea7</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="cf7a7a0d-0c2b-4a9e-8a52-19bdf46ef4cc" name="Set Connection" type="SubSheetInfo"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><loginhibit /><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="5395eb12-61a3-4005-88a3-ceda307cf9b1" name="Start" type="Start"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><loginhibit /><display x="15" y="-165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Server" narrative="The name of the server and, if necessary, instance name of the SQL Server instance to connect to" stage="Server" /><input type="text" name="Database" narrative="The name of the database to connect to" stage="Database" /><input type="text" name="User" narrative="If appropriate, the login name to use to connect to SQL Server. If left empty, windows authentication using the current user will be used instead of SQL Server authentication" stage="User" /><input type="text" name="Password" narrative="If appropriate, the password to use with the above login name to access SQL Server. Unused for windows authentication" stage="Password" /></inputs><onsuccess>66c19ef6-3007-4fa0-af27-b52892a9671c</onsuccess></stage><stage stageid="823a5018-5ad8-483c-a6c1-8c527bf7bc00" name="End" type="End"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="78309214-2fb3-4bd9-8433-ca0f0fc31bd4" name="new" type="Note"><subsheetid>cfb6da91-518b-40a3-8e0e-115ff0252ea7</subsheetid><loginhibit /><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically by Automate immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7bb7dcd7-acf2-4a7a-a96d-756830b2e54f" name="new" type="Note"><loginhibit /><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically by Automate immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d666ce88-be59-4711-8698-025945395207" name="Server" type="Data"><loginhibit /><display x="180" y="-105" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /></stage><stage stageid="b9720411-39cf-4e79-8fe9-af8e7581970a" name="Database" type="Data"><loginhibit /><display x="180" y="-60" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /></stage><stage stageid="d1d97b89-18c2-40ab-8f43-0cd0ce45f5b7" name="User" type="Data"><loginhibit /><display x="180" y="-15" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /></stage><stage stageid="1c8bc019-fa8a-4593-b435-81216f908452" name="Password" type="Data"><loginhibit /><display x="180" y="30" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /></stage><stage stageid="c9568fbf-1fca-4ce7-aa27-2309731df7f5" name="Connection String" type="Data"><loginhibit /><display x="180" y="75" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /></stage><stage stageid="db11541e-1f1d-48f5-a64e-e1d44d23ecf6" name="Set connection" type="Calculation"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><loginhibit /><display x="-30" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>823a5018-5ad8-483c-a6c1-8c527bf7bc00</onsuccess><calculation expression="&quot;database=&quot; &amp; [Database] &amp; &quot;;data source=&quot; &amp; [Server] &amp; &quot;; user id=&quot; &amp; [User] &amp; &quot;;password=&quot; &amp; [Password]" stage="Connection String" /></stage><stage stageid="8ed153e9-383f-4acf-9e86-3d058f27a895" name="Open" type="SubSheetInfo"><subsheetid>459569f2-c792-4948-8884-5c2a0917cc16</subsheetid><loginhibit /><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="3c501978-f53e-419d-ab66-c3cbef5cf598" name="Start" type="Start"><subsheetid>459569f2-c792-4948-8884-5c2a0917cc16</subsheetid><loginhibit /><display x="-60" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>c57babb2-f4b2-42dd-95c7-a8155b854975</onsuccess></stage><stage stageid="7295054b-4d97-4891-ab69-23416df80d09" name="End" type="End"><subsheetid>459569f2-c792-4948-8884-5c2a0917cc16</subsheetid><loginhibit /><display x="-60" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage><stage stageid="c57babb2-f4b2-42dd-95c7-a8155b854975" name="Open" type="Code"><subsheetid>459569f2-c792-4948-8884-5c2a0917cc16</subsheetid><loginhibit /><display x="-60" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="ConnectionString" expr="[Connection String]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>1c7fc106-01f3-4a2a-aa7e-44c44875fb04</onsuccess><code><![CDATA[Success = True
Message = ""

If moConnection IsNot Nothing Then Return
Try
	moConnection = New SqlConnection(ConnectionString)
	moConnection.Open()

Catch ex As Exception
	Success = False
	Message = ex.Message

End Try
]]></code></stage><stage stageid="24f2742e-2541-4680-a355-1783c4e2f2f2" name="Execute" type="SubSheetInfo"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="05448135-b8ce-4a88-9d5c-eb85fea9d352" name="Start" type="Start"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="-15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Query" narrative="The SQL query to use to perform this action" stage="SQL" /></inputs><onsuccess>3753873b-7231-4b1f-947e-e6b87deac3d8</onsuccess></stage><stage stageid="3810933f-d93a-482c-a0d8-20796ecd3049" name="Execute" type="Code"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="-15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="SQL" expr="[SQL]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /><output type="number" name="Records Affected" stage="Records Affected" /></outputs><onsuccess>2631d241-e7fb-4a03-87f8-846c6443206f</onsuccess><code><![CDATA[
Success = True
Message = ""

Try
	Using cmd As New SqlCommand()
		cmd.Connection = moConnection
		cmd.CommandText = SQL
		cmd.Transaction = moTransaction
		Records_Affected = cmd.ExecuteNonQuery()
	End Using

Catch ex As Exception
	Success = False
	Message = ex.Message

End Try
]]></code></stage><stage stageid="3753873b-7231-4b1f-947e-e6b87deac3d8" name="Open" type="SubSheet"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="-15" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>1ac9d798-c898-4a5a-8b07-f435dc0500d4</onsuccess><processid>459569f2-c792-4948-8884-5c2a0917cc16</processid></stage><stage stageid="1ac9d798-c898-4a5a-8b07-f435dc0500d4" name="Success?" type="Decision"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="75" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>3810933f-d93a-482c-a0d8-20796ecd3049</ontrue><onfalse>dbe6faa5-9cd8-4ead-a98d-1880a84975af</onfalse></stage><stage stageid="4a78a3ea-35e5-4496-bfe0-509900dc5137" name="Internal Close" type="SubSheetInfo"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="-195" y="-180" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f5aab680-3f4a-4cb2-9873-7c2aa718133f" name="Close" type="Code"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="0" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="clearPool" expr="[Clear Pool]" /><input type="text" name="connString" expr="[Connection String]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>274a1082-2d15-4bf8-84f2-043aae4e60e7</onsuccess><code><![CDATA[
Success = True
Message = ""

Try
	' If we're clearing the pool, we need a
	' connection so that we can specify the pool
	' we want to clear, so, somewhat obscenely,
	' we must create a connection if one does not
	' currently exist. Then close it immediately
	If clearPool Then
		If moConnection Is Nothing Then _
		 moConnection = New SqlConnection(connString)
		SqlConnection.ClearPool(moConnection)
	End If
	If moConnection IsNot Nothing Then
		moConnection.Close()
		moConnection.Dispose()
		moConnection = Nothing
	End If

Catch ex As Exception
	Success = False
	Message = ex.Message
End Try
]]></code></stage><stage stageid="b0d71d51-0e09-4333-a7e8-e16c11d5cc2c" name="Internal Close" type="SubSheet"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="75" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Clear Pool" narrative="True to clear the connection pool when closing the connection; False to just release the connection back into the pool" expr="False" /></inputs><outputs><output type="flag" name="Success" stage="Close Success" /><output type="text" name="Message" stage="Close Message" /></outputs><onsuccess>28719a2d-9d55-4414-8a91-4f3c8ce10cba</onsuccess><processid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</processid></stage><stage stageid="2f46d078-5aeb-4c4a-a493-e807b2c7a995" name="Get Number" type="SubSheetInfo"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f2d1ef6c-115c-4900-9a62-d8bac04b0b09" name="Start" type="Start"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="0" y="-75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Query" narrative="The SQL query to use to perform this action" stage="SQL" /></inputs><onsuccess>05b0b107-7095-4e9d-bc37-924f6b11869d</onsuccess></stage><stage stageid="3098273a-9d5f-43bd-8f67-dd5fa306c621" name="End" type="End"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="0" y="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="Result" narrative="The numeric result from the SQL query provided - if multiple results were generated, this will be the first result from the first result set" stage="Number Result" /><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage><stage stageid="17da1b91-9f66-4fe1-b2e3-ff423f3f827a" name="Execute Return Number" type="Code"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="0" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="SQL" expr="[SQL]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /><output type="number" name="Result" stage="Number Result" /></outputs><onsuccess>12f14b00-5eb3-4995-afa2-e3eeeadcb5c0</onsuccess><code><![CDATA[
Result = GetScalar(Of Decimal)( _
 SQL, Success, Message)
]]></code></stage><stage stageid="05b0b107-7095-4e9d-bc37-924f6b11869d" name="Open" type="SubSheet"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="0" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>4f04e547-353a-4b31-9d76-06f4a406e438</onsuccess><processid>459569f2-c792-4948-8884-5c2a0917cc16</processid></stage><stage stageid="4f04e547-353a-4b31-9d76-06f4a406e438" name="Success?" type="Decision"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="90" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>17da1b91-9f66-4fe1-b2e3-ff423f3f827a</ontrue><onfalse>0da291c6-e906-4852-b112-79384aafeb77</onfalse></stage><stage stageid="06bce91a-1f23-4c23-acdf-19564c453382" name="Number Result" type="Data"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="-195" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /></stage><stage stageid="1e9d4de5-9638-4bec-a23c-dda3f743abd2" name="Get Records Affected" type="SubSheetInfo"><subsheetid>a45f6098-73e2-4639-a002-31592645bfa5</subsheetid><loginhibit /><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1bc1e722-9f5a-4ca8-becb-07c73ba5427b" name="Start" type="Start"><subsheetid>a45f6098-73e2-4639-a002-31592645bfa5</subsheetid><loginhibit /><display x="0" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Query" narrative="The SQL query to use to perform this action" stage="SQL" /></inputs><onsuccess>ec1e523c-2d7f-49ab-bdbf-97c9629d4f0b</onsuccess></stage><stage stageid="5c3b4cc9-288d-4fae-b9d3-dca1f01d452c" name="End" type="End"><subsheetid>a45f6098-73e2-4639-a002-31592645bfa5</subsheetid><loginhibit /><display x="0" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="Records Affected" narrative="The number of records which matched the constraints specified in the SQL provided" stage="Records Affected" /><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage><stage stageid="98ced6bf-c219-4b6f-8788-428ae730dffa" name="Records Affected" type="Data"><loginhibit /><display x="180" y="165" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue></stage><stage stageid="ec1e523c-2d7f-49ab-bdbf-97c9629d4f0b" name="Execute" type="SubSheet"><subsheetid>a45f6098-73e2-4639-a002-31592645bfa5</subsheetid><loginhibit /><display x="0" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Query" expr="[SQL]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>5c3b4cc9-288d-4fae-b9d3-dca1f01d452c</onsuccess><processid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</processid></stage><stage stageid="b302f1fb-5a49-4ea5-a4f3-1dadc0ab9051" name="Get Text" type="SubSheetInfo"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1841a582-8544-4daa-ace7-1e0e40837056" name="Start" type="Start"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-15" y="-75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Query" narrative="The SQL query to use to perform this action" stage="SQL" /></inputs><onsuccess>eb060128-54bc-417e-9d48-71beda3e0d4d</onsuccess></stage><stage stageid="281eca77-1f39-4ace-8815-a8145727a1e3" name="End" type="End"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-15" y="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Result" narrative="The text result from the SQL query provided - if multiple results were generated, this will be the first result from the first result set" stage="Text Result" /><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage><stage stageid="9f94c434-d4c4-43a6-9393-df126ab0c0ca" name="Execute Return Text" type="Code"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-15" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="SQL" expr="[SQL]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /><output type="text" name="Result" stage="Text Result" /></outputs><onsuccess>d689a9ea-0ae1-4208-b0ca-ece39ddd838f</onsuccess><code><![CDATA[
Result = GetScalar(Of String)( _
 SQL, Success, Message)
]]></code></stage><stage stageid="eb060128-54bc-417e-9d48-71beda3e0d4d" name="Open" type="SubSheet"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-15" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>9c17dfa7-6435-4b40-a7db-533bfe76902f</onsuccess><processid>459569f2-c792-4948-8884-5c2a0917cc16</processid></stage><stage stageid="9c17dfa7-6435-4b40-a7db-533bfe76902f" name="Success?" type="Decision"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="75" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>9f94c434-d4c4-43a6-9393-df126ab0c0ca</ontrue><onfalse>8e6271bb-9473-4b6c-b90d-6832537a8075</onfalse></stage><stage stageid="8fa93518-b432-4252-bf80-0a9c96171faa" name="Text Result" type="Data"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-195" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /></stage><stage stageid="88b89098-8bb2-42fc-8e43-bad5b1e4f400" name="Internal Close" type="SubSheet"><subsheetid>cfb6da91-518b-40a3-8e0e-115ff0252ea7</subsheetid><loginhibit /><display x="15" y="-15" w="60" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Clear Pool" narrative="True to clear the connection pool when closing the connection; False to just release the connection back into the pool" expr="True" /></inputs><outputs><output type="flag" name="Success" stage="Close Success" /><output type="text" name="Message" stage="Close Message" /></outputs><onsuccess>91836284-14a0-4c0f-b9d5-8cd74b4d1632</onsuccess><processid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</processid></stage><stage stageid="8eebcae5-eab4-4d0d-98ac-60bb9a4f645c" name="Begin Transaction" type="SubSheetInfo"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="110c04fd-0f65-422a-ad21-bdb7db8a4a96" name="Start" type="Start"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><preconditions><condition narrative="None" /></preconditions><postconditions><condition narrative="A transaction will be started on the currently open connection" /></postconditions><display x="15" y="-180" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>6a763136-0514-4c6d-9dff-0a0c4a1d10e7</onsuccess></stage><stage stageid="eac4efa0-7168-4dee-a333-0923f422d458" name="Begin Transaction" type="Code"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="15" y="45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>a0610c45-e0f3-48ce-86be-2d9fe00d5faf</onsuccess><code><![CDATA[' Assume Success
Success = True
Message = ""

Try
	moTransaction = moConnection.BeginTransaction()
Catch ex As Exception
	Success = False
	Message = ex.Message
End Try
]]></code></stage><stage stageid="faff14a4-e148-47ec-8e4d-fc4e4bc1519d" name="Commit Transaction" type="SubSheetInfo"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="-285" y="-120" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="dcca40c4-f5b7-4875-b4b4-1c8c50a4be99" name="Start" type="Start"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>175695ba-0b55-4490-b99a-7c5fa1e95899</onsuccess></stage><stage stageid="01c9256c-c4e8-47d0-8bce-cbb4f916399d" name="Commit Transaction" type="Code"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="15" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>f26aaae6-36b1-4739-9465-1e208144a8bf</onsuccess><code><![CDATA[
' Assume success
Success = True
Message = ""

Try
	moTransaction.Commit()
	moTransaction = Nothing
Catch ex As Exception
	Success = False
	Message = ex.Message
End Try
]]></code></stage><stage stageid="e2cc64c2-12bd-4614-bca3-0650718ccfee" name="Rollback Transaction" type="SubSheetInfo"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="-225" y="-135" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="245c9f37-0f51-4fd3-aaa9-480630d4ac3f" name="Start" type="Start"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="15" y="-150" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>093c958e-ad24-4cb8-bfd6-e9f7dba49311</onsuccess></stage><stage stageid="921f479a-2714-4314-b394-c5c941b281e8" name="Rollback Transaction" type="Code"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>7c11fab5-28c4-48fd-b752-cbeac0598534</onsuccess><code><![CDATA[
Success = True
Message = ""

Try
	moTransaction.Rollback()
	moTransaction = Nothing
Catch ex As Exception
	Success = False
	Message = ex.Message
End Try
]]></code></stage><stage stageid="2631d241-e7fb-4a03-87f8-846c6443206f" name="In Transaction?" type="Decision"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="-15" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[In Transaction]" /><ontrue>ac70463c-d9f4-44cc-8427-004224405a91</ontrue><onfalse>b0d71d51-0e09-4333-a7e8-e16c11d5cc2c</onfalse></stage><stage stageid="f3d61e3c-3094-4c38-9370-3d142d7448c1" name="In Transaction" type="Data"><loginhibit /><display x="180" y="210" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue></stage><stage stageid="0441a51b-0a7c-49e6-8305-4a877c32cc8a" name="In Transaction" type="Calculation"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="15" y="90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>5705d9af-28ea-4c05-832b-4f40d34a3511</onsuccess><calculation expression="True" stage="In Transaction" /></stage><stage stageid="f26aaae6-36b1-4739-9465-1e208144a8bf" name="Not In Transaction" type="Calculation"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="15" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>6cc92a8f-1561-462a-8eaf-bbd32e32a936</onsuccess><calculation expression="False" stage="In Transaction" /></stage><stage stageid="7c11fab5-28c4-48fd-b752-cbeac0598534" name="Not In Transaction" type="Calculation"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>876d7128-a56d-4c53-8fde-3713a1c173f5</onsuccess><calculation expression="False" stage="In Transaction" /></stage><stage stageid="28719a2d-9d55-4414-8a91-4f3c8ce10cba" name="anchor1" type="Anchor"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="135" y="0" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>63e4c694-de67-4b39-a04c-5af3186af635</onsuccess></stage><stage stageid="269b8cc6-856b-426a-ba48-b362a98fc752" name="Internal Close" type="SubSheet"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="90" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Clear Pool" narrative="True to clear the connection pool when closing the connection; False to just release the connection back into the pool" expr="False" /></inputs><outputs><output type="flag" name="Success" stage="Close Success" /><output type="text" name="Message" stage="Close Message" /></outputs><onsuccess>047bee83-bd7d-43b1-aeb3-6f4183c42c63</onsuccess><processid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</processid></stage><stage stageid="12f14b00-5eb3-4995-afa2-e3eeeadcb5c0" name="In Transaction?" type="Decision"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="0" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[In Transaction]" /><ontrue>8173e4d5-0932-4184-b3e8-01a761341966</ontrue><onfalse>269b8cc6-856b-426a-ba48-b362a98fc752</onfalse></stage><stage stageid="ffd23eb7-b1b9-4f82-ad2f-05d4db50bcd2" name="Internal Close" type="SubSheet"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="75" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Clear Pool" narrative="True to clear the connection pool when closing the connection; False to just release the connection back into the pool" expr="False" /></inputs><outputs><output type="flag" name="Success" stage="Close Success" /><output type="text" name="Message" stage="Close Message" /></outputs><onsuccess>61bf908d-c640-41f1-921e-fbac0bc44b57</onsuccess><processid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</processid></stage><stage stageid="d689a9ea-0ae1-4208-b0ca-ece39ddd838f" name="In Transaction?" type="Decision"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-15" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[In Transaction]" /><ontrue>8ecc58ce-889b-4d69-8dbd-43f4c4cb11aa</ontrue><onfalse>ffd23eb7-b1b9-4f82-ad2f-05d4db50bcd2</onfalse></stage><stage stageid="221cc4f2-f3b6-4a62-985a-350066ad7c79" name="Get Collection" type="SubSheetInfo"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="76ba8075-200c-47f3-a5b0-81d2a545b93b" name="Start" type="Start"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="-45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="SQL" narrative="The SQL query to use to perform this action" stage="SQL" /></inputs><onsuccess>98267e1e-20b7-4ce9-a0b8-847c18c1976f</onsuccess></stage><stage stageid="469b68e3-523f-4723-ab11-b47348bbdf33" name="End" type="End"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="-45" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /><output type="collection" name="Results" narrative="The collection of results from the query" stage="Results" /></outputs></stage><stage stageid="897f736f-bc15-4938-9d97-b4c1065dd5e1" name="Get Data Table" type="Code"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="-45" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="SQL" expr="[SQL]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /><output type="collection" name="Results" stage="Results" /></outputs><onsuccess>d5771181-59a5-4bfd-b8f1-01bd7b7dbb3d</onsuccess><code><![CDATA[
' Assume success
Success = True
Message = ""

Try
	Using cmd As New SqlCommand()
		cmd.Connection = moConnection
		cmd.Transaction = moTransaction
		cmd.CommandText = SQL

		Using adapter As New SqlDataAdapter()
			adapter.SelectCommand = cmd
			Dim ds As New DataSet()
			adapter.Fill(ds)
			Results = ds.Tables(0)
		End Using
	End Using

Catch ex As Exception
	Success = False
	Message = ex.Message

End Try]]></code></stage><stage stageid="98267e1e-20b7-4ce9-a0b8-847c18c1976f" name="Open" type="SubSheet"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="-45" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>1c0c847f-0d0a-4f0d-9c66-25a64b4c477f</onsuccess><processid>459569f2-c792-4948-8884-5c2a0917cc16</processid></stage><stage stageid="1c0c847f-0d0a-4f0d-9c66-25a64b4c477f" name="Success?" type="Decision"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="30" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>897f736f-bc15-4938-9d97-b4c1065dd5e1</ontrue><onfalse>6247786f-c914-40c2-9acb-156178f5b62d</onfalse></stage><stage stageid="71604ec6-dbf3-40c1-b400-8a5eea8eda3f" name="Results" type="Collection"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="-195" y="30" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6247786f-c914-40c2-9acb-156178f5b62d" name="anchor2" type="Anchor"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="30" y="0" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>d5771181-59a5-4bfd-b8f1-01bd7b7dbb3d</onsuccess></stage><stage stageid="99f0a166-b905-44ab-ba9d-1fa79b71f6f6" name="Success" type="Data"><subsheetid>459569f2-c792-4948-8884-5c2a0917cc16</subsheetid><loginhibit /><display x="60" y="-135" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="e981674b-56d4-4624-8c36-d156009e2a52" name="Message" type="Data"><subsheetid>459569f2-c792-4948-8884-5c2a0917cc16</subsheetid><loginhibit /><display x="60" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f81f3fe8-65f8-4b08-928d-1e9b3a2d8db1" name="Success" type="Data"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="-195" y="-105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="728d45f7-0717-4872-ab22-b9ae8a142957" name="Message" type="Data"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="-195" y="-75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="67c3cea7-7915-4e88-9e86-a1355e251b7d" name="Success" type="Data"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="345" y="-135" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="71de5830-7d23-4ba9-8354-30f54dacdff4" name="Message" type="Data"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="345" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d5b51384-618c-4c4a-8510-baa7b99b6e20" name="Success" type="Data"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="150" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="29a89d90-a1e6-4a7d-8586-d40cb4c63a97" name="Message" type="Data"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="150" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="235b42fd-91d3-4351-bef7-4e7407a29ffe" name="Success" type="Data"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="150" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="92878142-4175-4d93-90d4-7ea4dd84f1da" name="Message" type="Data"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="150" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b50d625f-a5cd-464b-bc26-3a94288c485e" name="Success" type="Data"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="-195" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="8eeb44dd-6e76-4f9d-9988-c3638cc5916c" name="Message" type="Data"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="-195" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a1938177-269a-461e-b3fa-7cb2714659a8" name="Success" type="Data"><subsheetid>a45f6098-73e2-4639-a002-31592645bfa5</subsheetid><loginhibit /><display x="-195" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="079adbce-1d95-4720-b83f-0567741a0749" name="Message" type="Data"><subsheetid>a45f6098-73e2-4639-a002-31592645bfa5</subsheetid><loginhibit /><display x="-195" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8ac84956-cd26-456e-a622-6b3426601f4a" name="Success" type="Data"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="-195" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="c40edd8e-a34c-49ad-ad39-9025a0f9b946" name="Message" type="Data"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="-195" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="34a8e2f0-1a6b-4bdc-b2d2-46fed237de50" name="Success" type="Data"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-195" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="f2ebc91f-7722-42d3-907c-6bf37b0cd1e7" name="Message" type="Data"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="20e595a2-0799-4731-b244-c3cf6be8d791" name="Success" type="Data"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="-195" y="90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="97efd2f3-8f58-454f-b7ef-db9e6bef8aea" name="Message" type="Data"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="-195" y="120" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="95a4ec5c-e0ae-43f8-958e-c44907def3f0" name="Get CSV File" type="SubSheetInfo"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="518048a9-d28c-48bd-889f-30dab7f502e0" name="Start" type="Start"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><loginhibit /><display x="-45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="SQL" narrative="The SQL query to use to perform this action" stage="SQL" /><input type="text" name="File" narrative="The full path of the file to which the CSV result should be written" stage="File" /></inputs><onsuccess>8d11deee-1ae6-42be-8726-53fb6cc7e117</onsuccess></stage><stage stageid="f82dbcac-aaf6-4e85-ada7-e7f28d96bb97" name="End" type="End"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><loginhibit /><display x="-45" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage><stage stageid="9af3a6f4-53d9-4e14-9e1e-9c161160fec6" name="Get File" type="Code"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><loginhibit /><display x="-45" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="SQL" expr="[SQL]" /><input type="text" name="File" expr="[File]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>7dc1a88f-716e-4f2b-80dd-dd6306d6db07</onsuccess><code><![CDATA[
' Assume success
Success = True
Message = ""

Try
	' Write it out using the method in Global Code
	Using sw As New StreamWriter(File, False)
		WriteCsv(SQL, sw)
	End Using
Catch ex As Exception
	Success = False
	Message = ex.Message
End Try
]]></code></stage><stage stageid="8d11deee-1ae6-42be-8726-53fb6cc7e117" name="Open" type="SubSheet"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><loginhibit /><display x="-45" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>be5bca8d-64c2-4521-a293-b1a736a543bf</onsuccess><processid>459569f2-c792-4948-8884-5c2a0917cc16</processid></stage><stage stageid="be5bca8d-64c2-4521-a293-b1a736a543bf" name="Success?" type="Decision"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><loginhibit /><display x="30" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>9af3a6f4-53d9-4e14-9e1e-9c161160fec6</ontrue><onfalse>8ee4a00c-f248-4c89-8c4b-4b86cb50ad50</onfalse></stage><stage stageid="8ee4a00c-f248-4c89-8c4b-4b86cb50ad50" name="anchor2" type="Anchor"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><loginhibit /><display x="30" y="0" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>7dc1a88f-716e-4f2b-80dd-dd6306d6db07</onsuccess></stage><stage stageid="47d47b05-34f0-49f6-b703-f594ecee8108" name="Success" type="Data"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><loginhibit /><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="c26f4e3a-832a-4e80-a4b5-cf864ee7abb4" name="Message" type="Data"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><loginhibit /><display x="-195" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6bb45052-f59c-4af2-866e-d7973096bc2a" name="File" type="Data"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><display x="-195" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7d3515fc-4af8-451d-96e6-cc2d4c6808c7" name="Get CSV" type="SubSheetInfo"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="70f8039e-4af2-4364-b7d2-483c6d3260a4" name="Start" type="Start"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="SQL" narrative="The SQL query to use to perform this action" stage="SQL" /></inputs><onsuccess>e1bfc556-cb0c-49cf-8cfd-2767e9516e59</onsuccess></stage><stage stageid="029dc82b-e289-4579-8a43-d8b9c93158be" name="End" type="End"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><loginhibit /><display x="15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /><output type="text" name="CSV" narrative="The CSV output from the query" stage="CSV" /></outputs></stage><stage stageid="584fab2b-6e03-4169-8b6f-2032ad3893b3" name="Get CSV" type="Code"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="SQL" expr="[SQL]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /><output type="text" name="CSV" stage="CSV" /></outputs><onsuccess>69fcc128-f010-4628-a2ca-291756ca05b9</onsuccess><code><![CDATA[
' Assume success
Success = True
Message = ""

Try
	' Write it out using the method in Global Code
	Using sw As New StringWriter()
		WriteCsv(SQL, sw)
		CSV = sw.ToString()
	End Using
Catch ex As Exception
	Success = False
	Message = ex.Message
End Try
]]></code></stage><stage stageid="e1bfc556-cb0c-49cf-8cfd-2767e9516e59" name="Open" type="SubSheet"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>0288c100-557c-4271-8753-82f7651c876c</onsuccess><processid>459569f2-c792-4948-8884-5c2a0917cc16</processid></stage><stage stageid="0288c100-557c-4271-8753-82f7651c876c" name="Success?" type="Decision"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><loginhibit /><display x="90" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>584fab2b-6e03-4169-8b6f-2032ad3893b3</ontrue><onfalse>1303eb98-48c5-438c-aa5a-54fe90868c4f</onfalse></stage><stage stageid="1303eb98-48c5-438c-aa5a-54fe90868c4f" name="anchor2" type="Anchor"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><loginhibit /><display x="90" y="30" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>69fcc128-f010-4628-a2ca-291756ca05b9</onsuccess></stage><stage stageid="233b888b-7601-4969-8205-7513d73f088d" name="Success" type="Data"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><loginhibit /><display x="-195" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="5723f6bf-aa06-451d-a08a-e92cdfdf9013" name="Message" type="Data"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><loginhibit /><display x="-195" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d1458d90-c2cf-4c78-879a-d30165d35480" name="CSV" type="Data"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><display x="-195" y="45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3f4ca0da-93ad-492e-af65-ff637c54b37a" name="User Set?" type="Decision"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><loginhibit /><narrative>If the user is not set than this must be LAN connection</narrative><display x="15" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[User]&lt;&gt;&quot;&quot;" /><ontrue>db11541e-1f1d-48f5-a64e-e1d44d23ecf6</ontrue><onfalse>fbf4d6d4-763b-41f2-926a-ce6745964763</onfalse></stage><stage stageid="fbf4d6d4-763b-41f2-926a-ce6745964763" name="Set connection" type="Calculation"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><loginhibit /><display x="60" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>823a5018-5ad8-483c-a6c1-8c527bf7bc00</onsuccess><calculation expression="&quot;database=&quot; &amp; [Database] &amp; &quot;;data source=&quot; &amp; [Server] &amp; &quot;;Trusted_Connection=Yes&quot;" stage="Connection String" /></stage><stage stageid="68cc3f0e-e762-450c-921f-2cfbccedfead" name="Close Success" type="Data"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><display x="195" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5b2f24bf-84b2-4292-8cb3-df7286ec6cee" name="Close Message" type="Data"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><display x="195" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8365b22c-f9dd-44ac-9bdf-968ef941b1b7" name="Close Success" type="Data"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><display x="-195" y="90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a546aa36-ad70-4a81-9648-1de977e52ea0" name="Close Message" type="Data"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><display x="-195" y="120" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e75dc2f8-ea07-48f4-b2a7-245ca2da63bd" name="Close Success" type="Data"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><display x="-195" y="90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4049cd6d-bffc-4414-abba-d9c2c426354a" name="Close Message" type="Data"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><display x="-195" y="120" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c16520e0-e8d3-41c0-ae96-6254e954bc1a" name="In A Transaction?" type="Decision"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="0" y="-105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[In Transaction]" /><ontrue>e52851c8-abcd-46d9-b76a-921773c5cbb4</ontrue><onfalse>f185afb3-9c52-4c13-81d3-55a11480cf64</onfalse></stage><stage stageid="e52851c8-abcd-46d9-b76a-921773c5cbb4" name="Rollback Transaction" type="SubSheet"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="0" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>f5aab680-3f4a-4cb2-9873-7c2aa718133f</onsuccess><processid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</processid></stage><stage stageid="f185afb3-9c52-4c13-81d3-55a11480cf64" name="anchor3" type="Anchor"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="-75" y="-105" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>384bb280-cd20-4a3c-b8b0-9a97e61f7010</onsuccess></stage><stage stageid="384bb280-cd20-4a3c-b8b0-9a97e61f7010" name="anchor4" type="Anchor"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="-75" y="15" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>f5aab680-3f4a-4cb2-9873-7c2aa718133f</onsuccess></stage><stage stageid="20f109d0-a273-44a5-b964-b45248511186" name="Is Open" type="SubSheetInfo"><subsheetid>3842f7c4-4df2-4e6a-bedd-6dacf01a6db4</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="cc3b1970-2275-44bb-8cfd-176166531993" name="Start" type="Start"><subsheetid>3842f7c4-4df2-4e6a-bedd-6dacf01a6db4</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>42ae3b51-badc-419e-9609-b0ce24dc7fe3</onsuccess></stage><stage stageid="8992da0e-f17e-401d-81a4-cf0dbeaf3af1" name="End" type="End"><subsheetid>3842f7c4-4df2-4e6a-bedd-6dacf01a6db4</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Is Open" narrative="Flag indicating if a connection is currently open in this VBO" stage="IsOpen" /></outputs></stage><stage stageid="42ae3b51-badc-419e-9609-b0ce24dc7fe3" name="Check Connection" type="Code"><subsheetid>3842f7c4-4df2-4e6a-bedd-6dacf01a6db4</subsheetid><loginhibit /><display x="15" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="IsOpen" stage="IsOpen" /></outputs><onsuccess>8992da0e-f17e-401d-81a4-cf0dbeaf3af1</onsuccess><code><![CDATA[IsOpen = ( _
  moConnection IsNot Nothing AndAlso _
  moConnection.State = ConnectionState.Open _
)]]></code></stage><stage stageid="aafe4270-a6b3-4607-878e-86975da9c5cf" name="IsOpen" type="Data"><subsheetid>3842f7c4-4df2-4e6a-bedd-6dacf01a6db4</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0a7585ee-e2b5-4c76-893e-f1c483a97130" name="Is Open?" type="Decision"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Is Open]" /><ontrue>a06c1db3-79bd-492a-8c88-aca6b858c053</ontrue><onfalse>9eb59433-0a23-4cdd-bd25-7ae10e31947e</onfalse></stage><stage stageid="330a716e-6d2d-495c-9921-2660dfeb6210" name="Is Open" type="SubSheet"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="15" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Is Open" narrative="Flag indicating if a connection is currently open in this VBO" stage="Is Open" /></outputs><onsuccess>0a7585ee-e2b5-4c76-893e-f1c483a97130</onsuccess><processid>3842f7c4-4df2-4e6a-bedd-6dacf01a6db4</processid></stage><stage stageid="2a427672-1805-4178-8c75-5c94c4b82f09" name="Is Open" type="Data"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><display x="-195" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a06c1db3-79bd-492a-8c88-aca6b858c053" name="anchor5" type="Anchor"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="-60" y="-45" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>6ff75f66-de9a-4114-98e6-f985272a313b</onsuccess></stage><stage stageid="6ff75f66-de9a-4114-98e6-f985272a313b" name="anchor6" type="Anchor"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="-60" y="45" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>eac4efa0-7168-4dee-a333-0923f422d458</onsuccess></stage><stage stageid="9eb59433-0a23-4cdd-bd25-7ae10e31947e" name="Open" type="SubSheet"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>9a9f6e74-7cd8-4580-af73-041602ccba94</onsuccess><processid>459569f2-c792-4948-8884-5c2a0917cc16</processid></stage><stage stageid="9a9f6e74-7cd8-4580-af73-041602ccba94" name="Success?" type="Decision"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="120" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>eac4efa0-7168-4dee-a333-0923f422d458</ontrue><onfalse>62fbd57b-30bc-4365-9fcb-62860030332f</onfalse></stage><stage stageid="62fbd57b-30bc-4365-9fcb-62860030332f" name="anchor5" type="Anchor"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="180" y="0" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>52f9aedd-8666-495d-a007-ef3c02028ee7</onsuccess></stage><stage stageid="c0d90f91-927f-45e0-84a0-0d6b4e823f6c" name="anchor6" type="Anchor"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="180" y="135" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>5705d9af-28ea-4c05-832b-4f40d34a3511</onsuccess></stage><stage stageid="175695ba-0b55-4490-b99a-7c5fa1e95899" name="In Transaction?" type="Decision"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="15" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[In Transaction]" /><ontrue>01c9256c-c4e8-47d0-8bce-cbb4f916399d</ontrue><onfalse>7b32c515-605e-41e1-ae0c-9ad7c7ee6dab</onfalse></stage><stage stageid="7b32c515-605e-41e1-ae0c-9ad7c7ee6dab" name="Error Message" type="Calculation"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="-105" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>c20b6f48-8689-4164-9435-7d9f6f5f2aa7</onsuccess><calculation expression="&quot;There is no open transaction to commit&quot;" stage="Message" /></stage><stage stageid="c20b6f48-8689-4164-9435-7d9f6f5f2aa7" name="anchor7" type="Anchor"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="-105" y="45" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>6cc92a8f-1561-462a-8eaf-bbd32e32a936</onsuccess></stage><stage stageid="093c958e-ad24-4cb8-bfd6-e9f7dba49311" name="In Transaction?" type="Decision"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="15" y="-105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[In Transaction]" /><ontrue>921f479a-2714-4314-b394-c5c941b281e8</ontrue><onfalse>d5c94e05-a642-4107-b7b6-15ce461428e7</onfalse></stage><stage stageid="d5c94e05-a642-4107-b7b6-15ce461428e7" name="Error Message" type="Calculation"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="-105" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>ae90029d-81d2-4ae3-b27a-f7a302533401</onsuccess><calculation expression="&quot;There is no open transaction to rollback&quot;" stage="Message" /></stage><stage stageid="6cc92a8f-1561-462a-8eaf-bbd32e32a936" name="Internal Close" type="SubSheet"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="15" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Clear Pool" narrative="True to clear the connection pool when closing the connection; False to just release the connection back into the pool" expr="False" /></inputs><outputs><output type="flag" name="Success" stage="Close Success" /><output type="text" name="Message" stage="Close Message" /></outputs><onsuccess>63aeb2d7-aeb8-41f2-9ea1-0fd0cea0da8d</onsuccess><processid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</processid></stage><stage stageid="10757947-9682-4dcb-b789-93777cb333b1" name="Close Success" type="Data"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><display x="150" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="18b41ab6-a52b-45ff-874e-ffece3292e4b" name="Close Message" type="Data"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><display x="150" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ae90029d-81d2-4ae3-b27a-f7a302533401" name="anchor7" type="Anchor"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="-105" y="30" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>876d7128-a56d-4c53-8fde-3713a1c173f5</onsuccess></stage><stage stageid="876d7128-a56d-4c53-8fde-3713a1c173f5" name="Internal Close" type="SubSheet"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="15" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Clear Pool" narrative="True to clear the connection pool when closing the connection; False to just release the connection back into the pool" expr="False" /></inputs><outputs><output type="flag" name="Success" stage="Close Success" /><output type="text" name="Message" stage="Close Message" /></outputs><onsuccess>375d6173-3de9-4f72-bee6-b4ff132e1287</onsuccess><processid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</processid></stage><stage stageid="2e2a27c5-d63d-44b0-b693-e673844e664e" name="Close Success" type="Data"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><display x="135" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4e5cc1d8-b2a7-45b7-a8eb-7dbedcfb4f2b" name="Close Message" type="Data"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><display x="135" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e652ce3f-f9fc-414a-9006-2616854cb925" name="Start" type="Start"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="0" y="-240" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Clear Pool" narrative="True to clear the connection pool when closing the connection; False to just release the connection back into the pool" stage="Clear Pool" /></inputs><onsuccess>8c118cde-3b9a-4ed9-861d-f48b007e1200</onsuccess></stage><stage stageid="382d3006-4861-4bfe-a57e-3f65fbce6c2c" name="Clear Pool" type="Data"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><display x="-195" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="96ed6cdf-d202-4b37-b3e4-ae598756fb96" name="Close" type="SubSheetInfo"><subsheetid>109afac8-f6b2-467f-971c-c6141124b87a</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="30b5ba60-22d3-4fe6-9e92-9269372d1a6c" name="Start" type="Start"><subsheetid>109afac8-f6b2-467f-971c-c6141124b87a</subsheetid><loginhibit /><display x="-45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>25dfab67-8902-4f2a-8a18-a776aead1331</onsuccess></stage><stage stageid="25dfab67-8902-4f2a-8a18-a776aead1331" name="Internal Close" type="SubSheet"><subsheetid>109afac8-f6b2-467f-971c-c6141124b87a</subsheetid><loginhibit /><display x="-45" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Clear Pool" narrative="True to clear the connection pool when closing the connection; False to just release the connection back into the pool" expr="False" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>042dd86c-3c68-4015-83b1-dcf5b036fc90</onsuccess><processid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</processid></stage><stage stageid="6c042b25-556f-4563-9663-c41aecc77a31" name="Success" type="Data"><subsheetid>109afac8-f6b2-467f-971c-c6141124b87a</subsheetid><display x="75" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d1d7e2ef-771a-4001-922b-fd1f3881328f" name="Message" type="Data"><subsheetid>109afac8-f6b2-467f-971c-c6141124b87a</subsheetid><display x="75" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6a763136-0514-4c6d-9dff-0a0c4a1d10e7" name="In Transaction?" type="Decision"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="15" y="-135" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[In Transaction]" /><ontrue>32130444-6454-4780-80fd-2b005ed696a4</ontrue><onfalse>330a716e-6d2d-495c-9921-2660dfeb6210</onfalse></stage><stage stageid="32130444-6454-4780-80fd-2b005ed696a4" name="Transaction Already Open Error" type="Calculation"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="180" y="-135" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>62fbd57b-30bc-4365-9fcb-62860030332f</onsuccess><calculation expression="&quot;A transaction is already open in this connection&quot;" stage="Message" /></stage><stage stageid="c8303f15-a646-4677-8a63-2f0904ef1815" name="Close Success" type="Data"><subsheetid>cfb6da91-518b-40a3-8e0e-115ff0252ea7</subsheetid><loginhibit /><display x="165" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="17c8449f-6f6b-4cba-a705-ce95ef3e49e0" name="Close Message" type="Data"><subsheetid>cfb6da91-518b-40a3-8e0e-115ff0252ea7</subsheetid><loginhibit /><display x="165" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ba273a3e-4b65-4f6b-8ec6-6676a2bede70" name="Configure" type="SubSheetInfo"><subsheetid>3eacbbb6-d03e-4df7-9904-a3b1ac67c882</subsheetid><narrative>Configures this instance of the utility VBO. Calling it with no parameters will cause the configuration to be reset to default values.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b1167043-5e4b-4cbf-bfdc-347fcdc34981" name="End" type="End"><subsheetid>3eacbbb6-d03e-4df7-9904-a3b1ac67c882</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ce5d2c13-15b8-4abc-99e1-0c32e44cc795" name="Raise exception on any failure" type="Data"><subsheetid>3eacbbb6-d03e-4df7-9904-a3b1ac67c882</subsheetid><display x="-195" y="-30" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><alwaysinit /></stage><stage stageid="23fa0822-2b63-4407-87f4-9b37ce869e58" name="Start" type="Start"><subsheetid>3eacbbb6-d03e-4df7-9904-a3b1ac67c882</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Raise exception on any failure" narrative="Flag indicating if failure should cause an exception to be raised rather than a return of a success output value" stage="Raise exception on any failure" /></inputs><onsuccess>b1167043-5e4b-4cbf-bfdc-347fcdc34981</onsuccess></stage><stage stageid="0b2ebe92-b578-4aa3-b255-b75a73c135d8" name="Raise Exception If Appropriate" type="SubSheetInfo"><subsheetid>88d8d9e5-f97e-40d6-b049-bb643eb06852</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0ef42cb2-e5a9-47c2-9845-2471b9f41643" name="Start" type="Start"><subsheetid>88d8d9e5-f97e-40d6-b049-bb643eb06852</subsheetid><loginhibit /><display x="-45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" stage="Success" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" stage="Error Message" /></inputs><onsuccess>9a7620f2-75fe-4415-a778-45b839268e52</onsuccess></stage><stage stageid="5e8228c7-ac43-4b93-986b-e5fb23a3e572" name="End" type="End"><subsheetid>88d8d9e5-f97e-40d6-b049-bb643eb06852</subsheetid><loginhibit /><display x="-45" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9a7620f2-75fe-4415-a778-45b839268e52" name="Should Raise Exception?" type="Decision"><subsheetid>88d8d9e5-f97e-40d6-b049-bb643eb06852</subsheetid><loginhibit /><display x="-45" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success] = False AND [Raise exception on any failure]" /><ontrue>c161d6a7-6f02-4f29-8c41-2d93471ae952</ontrue><onfalse>5e8228c7-ac43-4b93-986b-e5fb23a3e572</onfalse></stage><stage stageid="c161d6a7-6f02-4f29-8c41-2d93471ae952" name="FAIL" type="Exception"><subsheetid>88d8d9e5-f97e-40d6-b049-bb643eb06852</subsheetid><display x="30" y="-90" w="30" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Action Failed" detail="[Error Message]" /></stage><stage stageid="1c7fc106-01f3-4a2a-aa7e-44c44875fb04" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>459569f2-c792-4948-8884-5c2a0917cc16</subsheetid><loginhibit /><display x="-60" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>7295054b-4d97-4891-ab69-23416df80d09</onsuccess><processid>88d8d9e5-f97e-40d6-b049-bb643eb06852</processid></stage><stage stageid="5705d9af-28ea-4c05-832b-4f40d34a3511" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="15" y="135" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>dd554ab9-61de-4d37-bee5-c25e1a5c74f1</onsuccess><processid>88d8d9e5-f97e-40d6-b049-bb643eb06852</processid></stage><stage stageid="a0610c45-e0f3-48ce-86be-2d9fe00d5faf" name="Success?" type="Decision"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="120" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>0441a51b-0a7c-49e6-8305-4a877c32cc8a</ontrue><onfalse>52f9aedd-8666-495d-a007-ef3c02028ee7</onfalse></stage><stage stageid="52f9aedd-8666-495d-a007-ef3c02028ee7" name="anchor5" type="Anchor"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="180" y="45" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>c0d90f91-927f-45e0-84a0-0d6b4e823f6c</onsuccess></stage><stage stageid="63aeb2d7-aeb8-41f2-9ea1-0fd0cea0da8d" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="15" y="90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>9ccac2c0-2efd-4399-8d02-c71ac4d7e812</onsuccess><processid>88d8d9e5-f97e-40d6-b049-bb643eb06852</processid></stage><stage stageid="375d6173-3de9-4f72-bee6-b4ff132e1287" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="15" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>b17027f1-8559-430b-9f36-724b3097e487</onsuccess><processid>88d8d9e5-f97e-40d6-b049-bb643eb06852</processid></stage><stage stageid="dbe6faa5-9cd8-4ead-a98d-1880a84975af" name="anchor8" type="Anchor"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="135" y="-90" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>28719a2d-9d55-4414-8a91-4f3c8ce10cba</onsuccess></stage><stage stageid="ac70463c-d9f4-44cc-8427-004224405a91" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="-15" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>7906b7ac-88bd-4971-991d-46bf74ab7207</onsuccess><processid>88d8d9e5-f97e-40d6-b049-bb643eb06852</processid></stage><stage stageid="63e4c694-de67-4b39-a04c-5af3186af635" name="anchor9" type="Anchor"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="135" y="45" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>ac70463c-d9f4-44cc-8427-004224405a91</onsuccess></stage><stage stageid="8173e4d5-0932-4184-b3e8-01a761341966" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="0" y="105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>3098273a-9d5f-43bd-8f67-dd5fa306c621</onsuccess><processid>88d8d9e5-f97e-40d6-b049-bb643eb06852</processid></stage><stage stageid="0da291c6-e906-4852-b112-79384aafeb77" name="anchor10" type="Anchor"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="135" y="-30" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>047bee83-bd7d-43b1-aeb3-6f4183c42c63</onsuccess></stage><stage stageid="047bee83-bd7d-43b1-aeb3-6f4183c42c63" name="anchor11" type="Anchor"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="135" y="60" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>b565deea-e08d-4195-b081-ab4f2eaad4ad</onsuccess></stage><stage stageid="b565deea-e08d-4195-b081-ab4f2eaad4ad" name="anchor12" type="Anchor"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="135" y="105" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>8173e4d5-0932-4184-b3e8-01a761341966</onsuccess></stage><stage stageid="8e6271bb-9473-4b6c-b90d-6832537a8075" name="anchor13" type="Anchor"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="120" y="-30" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>61bf908d-c640-41f1-921e-fbac0bc44b57</onsuccess></stage><stage stageid="61bf908d-c640-41f1-921e-fbac0bc44b57" name="anchor14" type="Anchor"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="120" y="60" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>63cca0a5-90a1-4eb5-9daa-65633aa5c6d3</onsuccess></stage><stage stageid="63cca0a5-90a1-4eb5-9daa-65633aa5c6d3" name="anchor15" type="Anchor"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="120" y="105" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>8ecc58ce-889b-4d69-8dbd-43f4c4cb11aa</onsuccess></stage><stage stageid="8ecc58ce-889b-4d69-8dbd-43f4c4cb11aa" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-15" y="105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>281eca77-1f39-4ace-8815-a8145727a1e3</onsuccess><processid>88d8d9e5-f97e-40d6-b049-bb643eb06852</processid></stage><stage stageid="ab15b6c7-3e1d-417a-9750-8ca92fb7924e" name="Note1" type="Note"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><narrative>Note that we don't throw an exception here even if a failure is encountered - this is probably being called as part of a wider action, and the caller has the context with which to decide where the exception should be raised.</narrative><display x="-195" y="75" w="270" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>8fcd4c90-9846-476a-a7f4-05a7edc6e62b</onsuccess></stage><stage stageid="d5771181-59a5-4bfd-b8f1-01bd7b7dbb3d" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="-45" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>469b68e3-523f-4723-ab11-b47348bbdf33</onsuccess><processid>88d8d9e5-f97e-40d6-b049-bb643eb06852</processid></stage><stage stageid="7dc1a88f-716e-4f2b-80dd-dd6306d6db07" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><loginhibit /><display x="-45" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>f82dbcac-aaf6-4e85-ada7-e7f28d96bb97</onsuccess><processid>88d8d9e5-f97e-40d6-b049-bb643eb06852</processid></stage><stage stageid="69fcc128-f010-4628-a2ca-291756ca05b9" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><loginhibit /><display x="15" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>029dc82b-e289-4579-8a43-d8b9c93158be</onsuccess><processid>88d8d9e5-f97e-40d6-b049-bb643eb06852</processid></stage><stage stageid="470e696c-742e-49d7-9421-f2a1544972f9" name="Success" type="Data"><subsheetid>88d8d9e5-f97e-40d6-b049-bb643eb06852</subsheetid><display x="-195" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4576bffa-323c-45f4-9233-9905d56e85ee" name="Error Message" type="Data"><subsheetid>88d8d9e5-f97e-40d6-b049-bb643eb06852</subsheetid><display x="-195" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="95b31d93-f94b-416b-84da-6fe8337d8feb" name="Closing" type="Data"><loginhibit /><narrative>Flag indicating that the connection wrapped by this VBO is currently in the process of closing</narrative><display x="180" y="255" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><alwaysinit /></stage><stage stageid="e85c42a3-de4b-461c-8b38-c5f6f44cd4ce" name="Closing:=True" type="Calculation"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="0" y="-150" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>c16520e0-e8d3-41c0-ae96-6254e954bc1a</onsuccess><calculation expression="True" stage="Closing" /></stage><stage stageid="8c118cde-3b9a-4ed9-861d-f48b007e1200" name="Already Closing?" type="Decision"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="0" y="-195" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Closing]" /><ontrue>34659a52-f242-427f-988d-763542f1f33f</ontrue><onfalse>e85c42a3-de4b-461c-8b38-c5f6f44cd4ce</onfalse></stage><stage stageid="34659a52-f242-427f-988d-763542f1f33f" name="Note2" type="Note"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><narrative>Ensure that we're not being called by 'Rollback' which was called by this action - infinite loops are bad.</narrative><display x="150" y="-195" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>adf47186-7a7b-4396-b1cb-e994400f72c9</onsuccess></stage><stage stageid="adf47186-7a7b-4396-b1cb-e994400f72c9" name="anchor16" type="Anchor"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="150" y="105" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>8fcd4c90-9846-476a-a7f4-05a7edc6e62b</onsuccess></stage><stage stageid="274a1082-2d15-4bf8-84f2-043aae4e60e7" name="Closing:=False" type="Calculation"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="0" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>8fcd4c90-9846-476a-a7f4-05a7edc6e62b</onsuccess><calculation expression="False" stage="Closing" /></stage><stage stageid="56def720-71ec-4d7b-9e58-17b4f23dc6fc" name=" " type="Block"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="-60" y="-75" w="195" h="60" /><font family="Tahoma" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="aa70afba-b9df-48a6-a0c2-beb7fa5cdc82" name="Ignore" type="Recover"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="90" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>92889732-12eb-4041-ac27-8a9a20af1cf5</onsuccess></stage><stage stageid="92889732-12eb-4041-ac27-8a9a20af1cf5" name=" " type="Resume"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="90" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>f5aab680-3f4a-4cb2-9873-7c2aa718133f</onsuccess></stage><stage stageid="22e10c68-07d1-4cc4-9072-7c9b0b0c97cf" name="SQL" type="Data"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="47ca5361-bb0f-4f18-9c74-7d5d09f239dd" name="SQL" type="Data"><subsheetid>a45f6098-73e2-4639-a002-31592645bfa5</subsheetid><loginhibit /><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3616b67e-fe87-422b-b9ea-6180525fddc3" name="SQL" type="Data"><subsheetid>12d7c91f-29ac-4711-9614-7ab992dc4b1f</subsheetid><loginhibit /><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="46a7daee-e5e4-441f-92fc-39a696518e79" name="SQL" type="Data"><subsheetid>18349d7d-79b1-4397-a8a0-490ab27f459f</subsheetid><loginhibit /><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d1d6948f-3783-4b3f-afa7-bef3378cafc3" name="SQL" type="Data"><subsheetid>e50a93aa-11fe-4457-a16d-0237560fff18</subsheetid><loginhibit /><display x="-195" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ae6e30b2-099e-4fd8-9481-75eeccea424a" name="SQL" type="Data"><subsheetid>780529b8-393d-4d1d-bc5f-34f383fe53ec</subsheetid><loginhibit /><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="540222b0-7793-476e-a330-59f84b93108c" name="SQL" type="Data"><subsheetid>13b6c91d-68e8-46e9-bcab-9261446dc0af</subsheetid><loginhibit /><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="66c19ef6-3007-4fa0-af27-b52892a9671c" name="Connection String already set?" type="Decision"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><loginhibit /><display x="15" y="-120" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Connection String] &lt;&gt; &quot;&quot;" /><ontrue>5d9aed4f-c61b-40dc-9104-e0720a324d22</ontrue><onfalse>cb1901f1-02a7-4e86-8618-cef7a98b283f</onfalse></stage><stage stageid="90d7c944-c618-41dd-bfe2-5da022f3353a" name="Internal Close" type="SubSheet"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><loginhibit /><display x="150" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Clear Pool" narrative="True to clear the connection pool when closing the connection; False to just release the connection back into the pool" expr="True" /></inputs><outputs><output type="flag" name="Success" stage="Close Success" /><output type="text" name="Message" stage="Close Message" /></outputs><onsuccess>cb1901f1-02a7-4e86-8618-cef7a98b283f</onsuccess><processid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</processid></stage><stage stageid="5d9aed4f-c61b-40dc-9104-e0720a324d22" name="Note3" type="Note"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><loginhibit /><narrative>Close and clear the connection pool</narrative><display x="150" y="-120" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>90d7c944-c618-41dd-bfe2-5da022f3353a</onsuccess></stage><stage stageid="fbf49160-dd35-4922-a2f3-6b17985bfb74" name="Close Success" type="Data"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f81af5a5-7d4a-4f5d-b914-0b008c1273ec" name="Close Message" type="Data"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><display x="-195" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="cb1901f1-02a7-4e86-8618-cef7a98b283f" name="anchor17" type="Anchor"><subsheetid>90429413-7792-4513-8bc0-d6d079aa08b9</subsheetid><loginhibit /><display x="15" y="-75" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>3f4ca0da-93ad-492e-af65-ff637c54b37a</onsuccess></stage><stage stageid="042dd86c-3c68-4015-83b1-dcf5b036fc90" name="End" type="End"><subsheetid>109afac8-f6b2-467f-971c-c6141124b87a</subsheetid><loginhibit /><display x="-45" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage><stage stageid="8fcd4c90-9846-476a-a7f4-05a7edc6e62b" name="End" type="End"><subsheetid>7ee7ad42-e017-40ff-92aa-3cfc5c6dd0e5</subsheetid><loginhibit /><display x="0" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage><stage stageid="dd554ab9-61de-4d37-bee5-c25e1a5c74f1" name="End" type="End"><subsheetid>3ee937ec-012f-445c-9b2b-ebbcb6d3614d</subsheetid><loginhibit /><display x="15" y="180" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage><stage stageid="9ccac2c0-2efd-4399-8d02-c71ac4d7e812" name="End" type="End"><subsheetid>ba712d56-697c-48af-bc96-85e49eb968fc</subsheetid><loginhibit /><display x="15" y="135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage><stage stageid="b17027f1-8559-430b-9f36-724b3097e487" name="End" type="End"><subsheetid>4b6e35c6-8ec4-4fbe-b9d7-d43c48492695</subsheetid><loginhibit /><display x="15" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage><stage stageid="7906b7ac-88bd-4971-991d-46bf74ab7207" name="End" type="End"><subsheetid>c07ae8a2-a04f-46f2-8919-ec4da73d5b25</subsheetid><loginhibit /><display x="-15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="Flag indicating success (True) or failure (False)" stage="Success" /><output type="text" name="Message" narrative="Error message giving detail regarding why this action failed" stage="Message" /></outputs></stage></process></object>
        <object id="b99d5b9f-f5b7-45a4-b7b2-17a2cce2ac4c" name="Email - POP3/SMTP" xmlns="http://www.blueprism.co.uk/product/process"><process name="Email - POP3/SMTP" version="6.6.0.15260" bpversion="6.6.0.15260" narrative="Retrieve email via POP3 protocol and send using SMTP protocol" byrefcollection="true" type="object" runmode="Exclusive"><appdef><element name="Application Root"><id>011d2f54-1ac9-4681-a6e7-993aa460851d</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="ad30cfbe-8a8c-44e4-8a26-6ca67f058f7d" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="67bff276-3cf2-4985-a957-e462b800ac3b" type="Normal" published="True"><name>Get Message</name><view><camerax>0</camerax><cameray>79</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="cc1b4ba2-0510-4980-92bd-d6312072c5bf" type="Normal" published="True"><name>Send Message</name><view><camerax>0</camerax><cameray>14</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e" type="Normal" published="True"><name>Delete Message</name><view><camerax>0</camerax><cameray>-6</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="849d1a37-179b-40ae-9683-4ebb0d951576" type="Normal" published="True"><name>Delete Messages</name><view><camerax>0</camerax><cameray>160</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="4688b112-6575-4f8a-980c-713566729518" type="Normal" published="False"><name>Number From ID</name><view><camerax>0</camerax><cameray>64</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="544abb24-e623-4adb-a24d-3a5dba6164ba" type="Normal" published="True"><name>Configure</name><view><camerax>63</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="954d358e-45d9-44b3-b56a-87e1c21f9d0f" type="Normal" published="False"><name>Connect POP3</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="c8b9e601-7444-4385-b2aa-6709658ad472" type="Normal" published="False"><name>Disconnect POP3</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f" type="Normal" published="True"><name>List Messages</name><view><camerax>0</camerax><cameray>64</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="803f1a2c-38f9-4614-97aa-5ca66d454d2d" type="Normal" published="True"><name>Save Attachments</name><view><camerax>0</camerax><cameray>-27</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="f87d36b8-5544-47f1-bd36-115a2493fdcd" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>a378f6c1-35f0-4954-9186-e304278d369e</onsuccess></stage><stage stageid="a378f6c1-35f0-4954-9186-e304278d369e" name="End" type="End"><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="65d9a6b9-33b9-4e6b-8211-7aa840ca5eee" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><references><reference>System.dll</reference><reference>System.Data.dll</reference><reference>System.Xml.dll</reference></references><imports><import>System</import><import>System.IO</import><import>System.Net</import><import>System.Net.Mail</import><import>System.Net.Mime</import><import>System.Net.Sockets</import><import>System.Net.Security</import><import>System.Collections.Generic</import><import>System.Collections.Specialized</import><import>System.Text</import><import>System.Security.Cryptography</import><import>System.Globalization</import><import>System.Text.RegularExpressions</import><import>System.Data</import></imports><language>csharp</language><globalcode><![CDATA[]]></globalcode><code><![CDATA[Pop3Client _rclient;

/// <summary>
/// This interface describes a MessageTraverser which is able to traverse a Message structure
/// and deliver some answer given some question.
/// </summary>
/// <typeparam name="TAnswer">This is the type of the answer you want to have delivered.</typeparam>
/// <typeparam name="TQuestion">This is the type of the question you want to have answered.</typeparam>
public interface IQuestionAnswerMessageTraverser<TQuestion, TAnswer>
{
    /// <summary>
    /// Call this when you want to apply this traverser on a <see cref="Message"/>.
    /// </summary>
    /// <param name="message">The <see cref="Message"/> which you want to traverse. Must not be <see langword="null"/>.</param>
    /// <param name="question">The question</param>
    /// <returns>An answer</returns>
    TAnswer VisitMessage(Message message, TQuestion question);

    /// <summary>
    /// Call this when you want to apply this traverser on a <see cref="MessagePart"/>.
    /// </summary>
    /// <param name="messagePart">The <see cref="MessagePart"/> which you want to traverse. Must not be <see langword="null"/>.</param>
    /// <param name="question">The question</param>
    /// <returns>An answer</returns>
    TAnswer VisitMessagePart(MessagePart messagePart, TQuestion question);
}

///<summary>
/// Finds all the <see cref="MessagePart"/>s which have a given MediaType using a depth first traversal.
///</summary>
internal class FindAllMessagePartsWithMediaType : IQuestionAnswerMessageTraverser<string, List<MessagePart>>
{
    /// <summary>
    /// Finds all the <see cref="MessagePart"/>s with the given MediaType
    /// </summary>
    /// <param name="message">The <see cref="Message"/> to start looking in</param>
    /// <param name="question">The MediaType to look for. Case is ignored.</param>
    /// <returns>
    /// A List of <see cref="MessagePart"/>s with the given MediaType.<br/>
    /// <br/>
    /// The List might be empty if no such <see cref="MessagePart"/>s were found.<br/>
    /// The order of the elements in the list is the order which they are found using
    /// a depth first traversal of the <see cref="Message"/> hierarchy.
    /// </returns>
    public List<MessagePart> VisitMessage(Message message, string question)
    {
        if (message == null)
            throw new ArgumentNullException("message");

        return VisitMessagePart(message.MessagePart, question);
    }

    /// <summary>
    /// Finds all the <see cref="MessagePart"/>s with the given MediaType
    /// </summary>
    /// <param name="messagePart">The <see cref="MessagePart"/> to start looking in</param>
    /// <param name="question">The MediaType to look for. Case is ignored.</param>
    /// <returns>
    /// A List of <see cref="MessagePart"/>s with the given MediaType.<br/>
    /// <br/>
    /// The List might be empty if no such <see cref="MessagePart"/>s were found.<br/>
    /// The order of the elements in the list is the order which they are found using
    /// a depth first traversal of the <see cref="Message"/> hierarchy.
    /// </returns>
    public List<MessagePart> VisitMessagePart(MessagePart messagePart, string question)
    {
        if (messagePart == null)
            throw new ArgumentNullException("messagePart");

        List<MessagePart> results = new List<MessagePart>();

        if (messagePart.ContentType.MediaType.Equals(question, StringComparison.OrdinalIgnoreCase))
            results.Add(messagePart);

        if (messagePart.IsMultiPart)
        {
            foreach (MessagePart part in messagePart.MessageParts)
            {
                List<MessagePart> result = VisitMessagePart(part, question);
                results.AddRange(result);
            }
        }

        return results;
    }
}

///<summary>
/// Finds the first <see cref="MessagePart"/> which have a given MediaType in a depth first traversal.
///</summary>
internal class FindFirstMessagePartWithMediaType : IQuestionAnswerMessageTraverser<string, MessagePart>
{
    /// <summary>
    /// Finds the first <see cref="MessagePart"/> with the given MediaType
    /// </summary>
    /// <param name="message">The <see cref="Message"/> to start looking in</param>
    /// <param name="question">The MediaType to look for. Case is ignored.</param>
    /// <returns>A <see cref="MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="MessagePart"/> was found</returns>
    public MessagePart VisitMessage(Message message, string question)
    {
        if (message == null)
            throw new ArgumentNullException("message");

        return VisitMessagePart(message.MessagePart, question);
    }

    /// <summary>
    /// Finds the first <see cref="MessagePart"/> with the given MediaType
    /// </summary>
    /// <param name="messagePart">The <see cref="MessagePart"/> to start looking in</param>
    /// <param name="question">The MediaType to look for. Case is ignored.</param>
    /// <returns>A <see cref="MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="MessagePart"/> was found</returns>
    public MessagePart VisitMessagePart(MessagePart messagePart, string question)
    {
        if (messagePart == null)
            throw new ArgumentNullException("messagePart");

        if (messagePart.ContentType.MediaType.Equals(question, StringComparison.OrdinalIgnoreCase))
            return messagePart;

        if (messagePart.IsMultiPart)
        {
            foreach (MessagePart part in messagePart.MessageParts)
            {
                MessagePart result = VisitMessagePart(part, question);
                if (result != null)
                    return result;
            }
        }

        return null;
    }
}

/// <summary>
/// Finds all <see cref="MessagePart"/>s which are considered to be attachments
/// </summary>
internal class AttachmentFinder : MultipleMessagePartFinder
{
    protected override List<MessagePart> CaseLeaf(MessagePart messagePart)
    {
        if (messagePart == null)
            throw new ArgumentNullException("messagePart");

        // Maximum space needed is one
        List<MessagePart> leafAnswer = new List<MessagePart>(1);

        if (messagePart.IsAttachment)
            leafAnswer.Add(messagePart);

        return leafAnswer;
    }
}

/// <summary>
/// This interface describes a MessageTraverser which is able to traverse a Message hierarchy structure
/// and deliver some answer.
/// </summary>
/// <typeparam name="TAnswer">This is the type of the answer you want to have delivered.</typeparam>
public interface IAnswerMessageTraverser<TAnswer>
{
    /// <summary>
    /// Call this when you want to apply this traverser on a <see cref="Message"/>.
    /// </summary>
    /// <param name="message">The <see cref="Message"/> which you want to traverse. Must not be <see langword="null"/>.</param>
    /// <returns>An answer</returns>
    TAnswer VisitMessage(Message message);

    /// <summary>
    /// Call this when you want to apply this traverser on a <see cref="MessagePart"/>.
    /// </summary>
    /// <param name="messagePart">The <see cref="MessagePart"/> which you want to traverse. Must not be <see langword="null"/>.</param>
    /// <returns>An answer</returns>
    TAnswer VisitMessagePart(MessagePart messagePart);
}

/// <summary>
/// This is an abstract class which handles traversing of a <see cref="Message"/> tree structure.<br/>
/// It runs through the message structure using a depth-first traversal.
/// </summary>
/// <typeparam name="TAnswer">The answer you want from traversing the message tree structure</typeparam>
public abstract class AnswerMessageTraverser<TAnswer> : IAnswerMessageTraverser<TAnswer>
{
    /// <summary>
    /// Call this when you want an answer for a full message.
    /// </summary>
    /// <param name="message">The message you want to traverse</param>
    /// <returns>An answer</returns>
    /// <exception cref="ArgumentNullException">if <paramref name="message"/> is <see langword="null"/></exception>
    public TAnswer VisitMessage(Message message)
    {
        if (message == null)
            throw new ArgumentNullException("message");

        return VisitMessagePart(message.MessagePart);
    }

    /// <summary>
    /// Call this method when you want to find an answer for a <see cref="MessagePart"/>
    /// </summary>
    /// <param name="messagePart">The <see cref="MessagePart"/> part you want an answer from.</param>
    /// <returns>An answer</returns>
    /// <exception cref="ArgumentNullException">if <paramref name="messagePart"/> is <see langword="null"/></exception>
    public TAnswer VisitMessagePart(MessagePart messagePart)
    {
        if (messagePart == null)
            throw new ArgumentNullException("messagePart");

        if (messagePart.IsMultiPart)
        {
            List<TAnswer> leafAnswers = new List<TAnswer>(messagePart.MessageParts.Count);
            foreach (MessagePart part in messagePart.MessageParts)
            {
                leafAnswers.Add(VisitMessagePart(part));
            }
            return MergeLeafAnswers(leafAnswers);
        }

        return CaseLeaf(messagePart);
    }

    /// <summary>
    /// For a concrete implementation an answer must be returned for a leaf <see cref="MessagePart"/>, which are
    /// MessageParts that are not <see cref="MessagePart.IsMultiPart">MultiParts.</see>
    /// </summary>
    /// <param name="messagePart">The message part which is a leaf and thereby not a MultiPart</param>
    /// <returns>An answer</returns>
    protected abstract TAnswer CaseLeaf(MessagePart messagePart);

    /// <summary>
    /// For a concrete implementation, when a MultiPart <see cref="MessagePart"/> has fetched it's answers from it's children, these
    /// answers needs to be merged. This is the responsibility of this method.
    /// </summary>
    /// <param name="leafAnswers">The answer that the leafs gave</param>
    /// <returns>A merged answer</returns>
    protected abstract TAnswer MergeLeafAnswers(List<TAnswer> leafAnswers);
}

///<summary>
/// An abstract class that implements the MergeLeafAnswers method.<br/>
/// The method simply returns the union of all answers from the leaves.
///</summary>
public abstract class MultipleMessagePartFinder : AnswerMessageTraverser<List<MessagePart>>
{
    /// <summary>
    /// Adds all the <paramref name="leafAnswers"/> in one big answer
    /// </summary>
    /// <param name="leafAnswers">The answers to merge</param>
    /// <returns>A list with has all the elements in the <paramref name="leafAnswers"/> lists</returns>
    /// <exception cref="ArgumentNullException">if <paramref name="leafAnswers"/> is <see langword="null"/></exception>
    protected override List<MessagePart> MergeLeafAnswers(List<List<MessagePart>> leafAnswers)
    {
        if (leafAnswers == null)
            throw new ArgumentNullException("leafAnswers");

        // We simply create a list with all the answer generated from the leaves
        List<MessagePart> mergedResults = new List<MessagePart>();

        foreach (List<MessagePart> leafAnswer in leafAnswers)
        {
            mergedResults.AddRange(leafAnswer);
        }

        return mergedResults;
    }
}

/// <summary>
/// Finds all text/[something] versions in a Message hierarchy
/// </summary>
internal class TextVersionFinder : MultipleMessagePartFinder
{
    protected override List<MessagePart> CaseLeaf(MessagePart messagePart)
    {
        if (messagePart == null)
            throw new ArgumentNullException("messagePart");

        // Maximum space needed is one
        List<MessagePart> leafAnswer = new List<MessagePart>(1);

        if (messagePart.IsText)
            leafAnswer.Add(messagePart);

        return leafAnswer;
    }
}

/// <summary>
/// This class is responsible for decoding parameters that has been encoded with:<br/>
/// <list type="bullet">
/// <item>
///    <b>Continuation</b><br/>
///    This is where a single parameter has such a long value that it could
///    be wrapped while in transit. Instead multiple parameters is used on each line.<br/>
///    <br/>
///    <b>Example</b><br/>
///    From: <c>Content-Type: text/html; boundary="someVeryLongStringHereWhichCouldBeWrappedInTransit"</c><br/>
///    To: <c>Content-Type: text/html; boundary*0="someVeryLongStringHere" boundary*1="WhichCouldBeWrappedInTransit"</c><br/>
/// </item>
/// <item>
///    <b>Encoding</b><br/>
///    Sometimes other characters then ASCII characters are needed in parameters.<br/>
///    The parameter is then given a different name to specify that it is encoded.<br/>
///    <br/>
///    <b>Example</b><br/>
///    From: <c>Content-Disposition attachment; filename="specialCharsÆØÅ"</c><br/>
///    To: <c>Content-Disposition attachment; filename*="ISO-8859-1'en-us'specialCharsC6D8C0"</c><br/>
///    This encoding is almost the same as <see cref="EncodedWord"/> encoding, and is used to decode the value.<br/>
/// </item>
/// <item>
///    <b>Continuation and Encoding</b><br/>
///    Both Continuation and Encoding can be used on the same time.<br/>
///    <br/>
///    <b>Example</b><br/>
///    From: <c>Content-Disposition attachment; filename="specialCharsÆØÅWhichIsSoLong"</c><br/>
///    To: <c>Content-Disposition attachment; filename*0*="ISO-8859-1'en-us'specialCharsC6D8C0"; filename*1*="WhichIsSoLong"</c><br/>
///    This could also be encoded as:<br/>
///    To: <c>Content-Disposition attachment; filename*0*="ISO-8859-1'en-us'specialCharsC6D8C0"; filename*1="WhichIsSoLong"</c><br/>
///    Notice that <c>filename*1</c> does not have an <c>*</c> after it - denoting it IS NOT encoded.<br/>
///    There are some rules about this:<br/>
///    <list type="number">
///      <item>The encoding must be mentioned in the first part (filename*0*), which has to be encoded.</item>
///      <item>No other part must specify an encoding, but if encoded it uses the encoding mentioned in the first part.</item>
///      <item>Parts may be encoded or not in any order.</item>
///    </list>
///    <br/>
/// </item>
/// </list>
/// More information and the specification is available in <see href="http://tools.ietf.org/html/rfc2231">RFC 2231</see>.
/// </summary>
internal static class Rfc2231Decoder
{
    /// <summary>
    /// Decodes a string of the form:<br/>
    /// <c>value0; key1=value1; key2=value2; key3=value3</c><br/>
    /// The returned List of key value pairs will have the key as key and the decoded value as value.<br/>
    /// The first value0 will have a key of <see cref="string.Empty"/>.<br/>
    /// <br/>
    /// If continuation is used, then multiple keys will be merged into one key with the different values
    /// decoded into on big value for that key.<br/>
    /// Example:<br/>
    /// <code>
    /// title*0=part1
    /// title*1=part2
    /// </code>
    /// will have key and value of:<br></br>
    /// <c>title=decode(part1)decode(part2)</c>
    /// </summary>
    /// <param name="toDecode">The string to decode.</param>
    /// <returns>A list of decoded key value pairs.</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
    public static List<KeyValuePair<string, string>> Decode(string toDecode)
		{
			if(toDecode == null)
				throw new ArgumentNullException("toDecode");

			// Normalize the input to take account for missing semicolons after parameters.
			// Example
			// text/plain; charset=\"iso-8859-1\" name=\"somefile.txt\" or
            // text/plain;\tcharset=\"iso-8859-1\"\tname=\"somefile.txt\"
			// is normalized to
			// text/plain; charset=\"iso-8859-1\"; name=\"somefile.txt\"
			// Only works for parameters inside quotes
			// \s = matches whitespace
			toDecode = Regex.Replace(toDecode, "=\\s*\"(?<value>[^\"]*)\"\\s", "=\"${value}\"; ");

			// Normalize 
			// Since the above only works for parameters inside quotes, we need to normalize
			// the special case with the first parameter.
			// Example:
			// attachment filename="foo"
			// is normalized to
			// attachment; filename="foo"
			// ^ = matches start of line (when not inside square bracets [])
			toDecode = Regex.Replace(toDecode, @"^(?<first>[^;\s]+)\s(?<second>[^;\s]+)", "${first}; ${second}");

			// Split by semicolon, but only if not inside quotes
			List<string> splitted = Utility.SplitStringWithCharNotInsideQuotes(toDecode.Trim(), ';');

			List<KeyValuePair<string, string>> collection = new List<KeyValuePair<string, string>>(splitted.Count);

			foreach (string part in splitted)
			{
				// Empty strings should not be processed
				if (part.Trim().Length == 0)
					continue;

				string[] keyValue = part.Trim().Split(new char[] {'='}, 2);
				if(keyValue.Length == 1)
				{
					collection.Add(new KeyValuePair<string, string>("", keyValue[0]));
				} else if (keyValue.Length == 2)
				{
					collection.Add(new KeyValuePair<string, string>(keyValue[0], keyValue[1]));
				} else
				{
					throw new ArgumentException("When splitting the part \"" + part + "\" by = there was " + keyValue.Length + " parts. Only 1 and 2 are supported");
				}
			}

			return DecodePairs(collection);
		}

    /// <summary>
    /// Decodes the list of key value pairs into a decoded list of key value pairs.<br/>
    /// There may be less keys in the decoded list, but then the values for the lost keys will have been appended
    /// to the new key.
    /// </summary>
    /// <param name="pairs">The pairs to decode</param>
    /// <returns>A decoded list of pairs</returns>
    private static List<KeyValuePair<string, string>> DecodePairs(List<KeyValuePair<string, string>> pairs)
    {
        if (pairs == null)
            throw new ArgumentNullException("pairs");

        List<KeyValuePair<string, string>> resultPairs = new List<KeyValuePair<string, string>>(pairs.Count);

        int pairsCount = pairs.Count;
        for (int i = 0; i < pairsCount; i++)
        {
            KeyValuePair<string, string> currentPair = pairs[i];
            string key = currentPair.Key;
            string value = Utility.RemoveQuotesIfAny(currentPair.Value);

            // Is it a continuation parameter? (encoded or not)
            if (key.EndsWith("*0", StringComparison.OrdinalIgnoreCase) || key.EndsWith("*0*", StringComparison.OrdinalIgnoreCase))
            {
                // This encoding will not be used if we get into the if which tells us
                // that the whole continuation is not encoded

                string encoding = "notEncoded - Value here is never used";

                // Now lets find out if it is encoded too.
                if (key.EndsWith("*0*", StringComparison.OrdinalIgnoreCase))
                {
                    // It is encoded.

                    // Fetch out the encoding for later use and decode the value
                    // If the value was not encoded as the email specified
                    // encoding will be set to null. This will be used later.
                    value = DecodeSingleValue(value, out encoding);

                    // Find the right key to use to store the full value
                    // Remove the start *0 which tells is it is a continuation, and the first one
                    // And remove the * afterwards which tells us it is encoded
                    key = key.Replace("*0*", "");
                }
                else
                {
                    // It is not encoded, and no parts of the continuation is encoded either

                    // Find the right key to use to store the full value
                    // Remove the start *0 which tells is it is a continuation, and the first one
                    key = key.Replace("*0", "");
                }

                // The StringBuilder will hold the full decoded value from all continuation parts
                StringBuilder builder = new StringBuilder();

                // Append the decoded value
                builder.Append(value);

                // Now go trough the next keys to see if they are part of the continuation
                for (int j = i + 1, continuationCount = 1; j < pairsCount; j++, continuationCount++)
                {
                    string jKey = pairs[j].Key;
                    string valueJKey = Utility.RemoveQuotesIfAny(pairs[j].Value);

                    if (jKey.Equals(key + "*" + continuationCount))
                    {
                        // This value part of the continuation is not encoded
                        // Therefore remove qoutes if any and add to our stringbuilder
                        builder.Append(valueJKey);

                        // Remember to increment i, as we have now treated one more KeyValuePair
                        i++;
                    }
                    else if (jKey.Equals(key + "*" + continuationCount + "*"))
                    {
                        // We will not get into this part if the first part was not encoded
                        // Therefore the encoding will only be used if and only if the
                        // first part was encoded, in which case we have remembered the encoding used

                        // Sometimes an email creator says that a string was encoded, but it really
                        // `was not. This is to catch that problem.
                        if (encoding != null)
                        {
                            // This value part of the continuation is encoded
                            // the encoding is not given in the current value,
                            // but was given in the first continuation, which we remembered for use here
                            valueJKey = DecodeSingleValue(valueJKey, encoding);
                        }
                        builder.Append(valueJKey);

                        // Remember to increment i, as we have now treated one more KeyValuePair
                        i++;
                    }
                    else
                    {
                        // No more keys for this continuation
                        break;
                    }
                }

                // Add the key and the full value as a pair
                value = builder.ToString();
                resultPairs.Add(new KeyValuePair<string, string>(key, value));
            }
            else if (key.EndsWith("*", StringComparison.OrdinalIgnoreCase))
            {
                // This parameter is only encoded - it is not part of a continuation
                // We need to change the key from "<key>*" to "<key>" and decode the value

                // To get the key we want, we remove the last * that denotes
                // that the value hold by the key was encoded
                key = key.Replace("*", "");

                // Decode the value
                string throwAway;
                value = DecodeSingleValue(value, out throwAway);

                // Now input the new value with the new key
                resultPairs.Add(new KeyValuePair<string, string>(key, value));
            }
            else
            {
                // Fully normal key - the value is not encoded
                // Therefore nothing to do, and we can simply pass the pair
                // as being decoded now
                resultPairs.Add(currentPair);
            }
        }

        return resultPairs;
    }

    /// <summary>
    /// This will decode a single value of the form: <c>ISO-8859-1'en-us'%3D%3DIamHere</c><br/>
    /// Which is basically a <see cref="EncodedWord"/> form just using % instead of =<br/>
    /// Notice that 'en-us' part is not used for anything.<br/>
    /// <br/>
    /// If the single value given is not on the correct form, it will be returned without 
    /// being decoded and <paramref name="encodingUsed"/> will be set to <see langword="null"/>.
    /// </summary>
    /// <param name="encodingUsed">
    /// The encoding used to decode with - it is given back for later use.<br/>
    /// <see langword="null"/> if input was not in the correct form.
    /// </param>
    /// <param name="toDecode">The value to decode</param>
    /// <returns>
    /// The decoded value that corresponds to <paramref name="toDecode"/> or if
    /// <paramref name="toDecode"/> is not on the correct form, it will be non-decoded.
    /// </returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
    private static string DecodeSingleValue(string toDecode, out string encodingUsed)
    {
        if (toDecode == null)
            throw new ArgumentNullException("toDecode");

        // Check if input has a part describing the encoding
        if (toDecode.IndexOf('\'') == -1)
        {
            // The input was not encoded (at least not valid) and it is returned as is
            //DefaultLogger.Log.LogDebug("Rfc2231Decoder: Someone asked me to decode a string which was not encoded - returning raw string. Input: " + toDecode);
            encodingUsed = null;
            return toDecode;
        }
        encodingUsed = toDecode.Substring(0, toDecode.IndexOf('\''));
        toDecode = toDecode.Substring(toDecode.LastIndexOf('\'') + 1);
        return DecodeSingleValue(toDecode, encodingUsed);
    }

    /// <summary>
    /// This will decode a single value of the form: %3D%3DIamHere
    /// Which is basically a <see cref="EncodedWord"/> form just using % instead of =
    /// </summary>
    /// <param name="valueToDecode">The value to decode</param>
    /// <param name="encoding">The encoding used to decode with</param>
    /// <returns>The decoded value that corresponds to <paramref name="valueToDecode"/></returns>
    /// <exception cref="ArgumentNullException">If <paramref name="valueToDecode"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentNullException">If <paramref name="encoding"/> is <see langword="null"/></exception>
    private static string DecodeSingleValue(string valueToDecode, string encoding)
    {
        if (valueToDecode == null)
            throw new ArgumentNullException("valueToDecode");

        if (encoding == null)
            throw new ArgumentNullException("encoding");

        // The encoding used is the same as QuotedPrintable, we only
        // need to change % to =
        // And otherwise make it look like the correct EncodedWord encoding
        valueToDecode = "=?" + encoding + "?Q?" + valueToDecode.Replace("%", "=") + "?=";
        return EncodedWord.Decode(valueToDecode);
    }
}

/// <summary>
/// Class that can parse different fields in the header sections of a MIME message.
/// </summary>
internal static class HeaderFieldParser
{
    /// <summary>
    /// Parses the Content-Transfer-Encoding header.
    /// </summary>
    /// <param name="headerValue">The value for the header to be parsed</param>
    /// <returns>A <see cref="ContentTransferEncoding"/></returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentException">If the <paramref name="headerValue"/> could not be parsed to a <see cref="ContentTransferEncoding"/></exception>
    public static ContentTransferEncoding ParseContentTransferEncoding(string headerValue)
    {
        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        switch (headerValue.Trim().ToUpperInvariant())
        {
            case "7BIT":
                return ContentTransferEncoding.SevenBit;

            case "8BIT":
                return ContentTransferEncoding.EightBit;

            case "QUOTED-PRINTABLE":
                return ContentTransferEncoding.QuotedPrintable;

            case "BASE64":
                return ContentTransferEncoding.Base64;

            case "BINARY":
                return ContentTransferEncoding.Binary;

            // If a wrong argument is passed to this parser method, then we assume
            // default encoding, which is SevenBit.
            // This is to ensure that we do not throw exceptions, even if the email not MIME valid.
            default:
                //DefaultLogger.Log.LogDebug("Wrong ContentTransferEncoding was used. It was: " + headerValue);
                return ContentTransferEncoding.SevenBit;
        }
    }

    /// <summary>
    /// Parses an ImportanceType from a given Importance header value.
    /// </summary>
    /// <param name="headerValue">The value to be parsed</param>
    /// <returns>A <see cref="MailPriority"/>. If the <paramref name="headerValue"/> is not recognized, Normal is returned.</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
    public static MailPriority ParseImportance(string headerValue)
    {
        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        switch (headerValue.ToUpperInvariant())
        {
            case "5":
            case "HIGH":
                return MailPriority.High;

            case "3":
            case "NORMAL":
                return MailPriority.Normal;

            case "1":
            case "LOW":
                return MailPriority.Low;

            default:
                //DefaultLogger.Log.LogDebug("HeaderFieldParser: Unknown importance value: \"" + headerValue + "\". Using default of normal importance.");
                return MailPriority.Normal;
        }
    }

    /// <summary>
    /// Parses a the value for the header Content-Type to 
    /// a <see cref="ContentType"/> object.
    /// </summary>
    /// <param name="headerValue">The value to be parsed</param>
    /// <returns>A <see cref="ContentType"/> object</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
    public static ContentType ParseContentType(string headerValue)
    {
        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        // We create an empty Content-Type which we will fill in when we see the values
        ContentType contentType = new ContentType();

        // Now decode the parameters
        List<KeyValuePair<string, string>> parameters = Rfc2231Decoder.Decode(headerValue);

        foreach (KeyValuePair<string, string> keyValuePair in parameters)
        {
            string key = keyValuePair.Key.ToUpperInvariant().Trim();
            string value = Utility.RemoveQuotesIfAny(keyValuePair.Value.Trim());
            switch (key)
            {
                case "":
                    // This is the MediaType - it has no key since it is the first one mentioned in the
                    // headerValue and has no = in it.

                    // Check for illegal content-type
                    if (value.ToUpperInvariant().Equals("TEXT"))
                        value = "text/plain";

                    contentType.MediaType = value;
                    break;

                case "BOUNDARY":
                    contentType.Boundary = value;
                    break;

                case "CHARSET":
                    contentType.CharSet = value;
                    break;

                case "NAME":
                    contentType.Name = EncodedWord.Decode(value);
                    break;

                default:
                    // This is to shut up the code help that is saying that contentType.Parameters
                    // can be null - which it cant!
                    if (contentType.Parameters == null)
                        throw new Exception("The ContentType parameters property is null. This will never be thrown.");

                    // We add the unknown value to our parameters list
                    // "Known" unknown values are:
                    // - title
                    // - report-type
                    contentType.Parameters.Add(key, value);
                    break;
            }
        }

        return contentType;
    }

    /// <summary>
    /// Parses a the value for the header Content-Disposition to a <see cref="ContentDisposition"/> object.
    /// </summary>
    /// <param name="headerValue">The value to be parsed</param>
    /// <returns>A <see cref="ContentDisposition"/> object</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception>
    public static ContentDisposition ParseContentDisposition(string headerValue)
    {
        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        // See http://www.ietf.org/rfc/rfc2183.txt for RFC definition

        // Create empty ContentDisposition - we will fill in details as we read them
        ContentDisposition contentDisposition = new ContentDisposition();

        // Now decode the parameters
        List<KeyValuePair<string, string>> parameters = Rfc2231Decoder.Decode(headerValue);

        foreach (KeyValuePair<string, string> keyValuePair in parameters)
        {
            string key = keyValuePair.Key.ToUpperInvariant().Trim();
            string value = keyValuePair.Value;
            switch (key)
            {
                case "":
                    // This is the DispisitionType - it has no key since it is the first one
                    // and has no = in it.
                    contentDisposition.DispositionType = value;
                    break;

                // The correct name of the parameter is filename, but some emails also contains the parameter
                // name, which also holds the name of the file. Therefore we use both names for the same field.
                case "NAME":
                case "FILENAME":
                    // The filename might be in qoutes, and it might be encoded-word encoded
                    contentDisposition.FileName = EncodedWord.Decode(Utility.RemoveQuotesIfAny(value));
                    break;

                case "CREATION-DATE":
                    // Notice that we need to create a new DateTime because of a failure in .NET 2.0.
                    // The failure is: you cannot give contentDisposition a DateTime with a Kind of UTC
                    // It will set the CreationDate correctly, but when trying to read it out it will throw an exception.
                    // It is the same with ModificationDate and ReadDate.
                    // This is fixed in 4.0 - maybe in 3.0 too.
                    // Therefore we create a new DateTime which have a DateTimeKind set to unspecified
                    DateTime creationDate = new DateTime(Rfc2822DateTime.StringToDate(Utility.RemoveQuotesIfAny(value)).Ticks);
                    contentDisposition.CreationDate = creationDate;
                    break;

                case "MODIFICATION-DATE":
                    DateTime midificationDate = new DateTime(Rfc2822DateTime.StringToDate(Utility.RemoveQuotesIfAny(value)).Ticks);
                    contentDisposition.ModificationDate = midificationDate;
                    break;

                case "READ-DATE":
                    DateTime readDate = new DateTime(Rfc2822DateTime.StringToDate(Utility.RemoveQuotesIfAny(value)).Ticks);
                    contentDisposition.ReadDate = readDate;
                    break;

                case "SIZE":
                    contentDisposition.Size = int.Parse(Utility.RemoveQuotesIfAny(value), CultureInfo.InvariantCulture);
                    break;

                default:
                    if (key.StartsWith("X-"))
                    {
                        contentDisposition.Parameters.Add(key, Utility.RemoveQuotesIfAny(value));
                        break;
                    }

                    throw new ArgumentException("Unknown parameter in Content-Disposition. Ask developer to fix! Parameter: " + key);
            }
        }

        return contentDisposition;
    }

    /// <summary>
    /// Parses an ID like Message-Id and Content-Id.<br/>
    /// Example:<br/>
    /// <c>&lt;test@test.com&gt;</c><br/>
    /// into<br/>
    /// <c>test@test.com</c>
    /// </summary>
    /// <param name="headerValue">The id to parse</param>
    /// <returns>A parsed ID</returns>
    public static string ParseId(string headerValue)
    {
        // Remove whitespace in front and behind since
        // whitespace is allowed there
        // Remove the last > and the first <
        return headerValue.Trim().TrimEnd('>').TrimStart('<');
    }

    /// <summary>
    /// Parses multiple IDs from a single string like In-Reply-To.
    /// </summary>
    /// <param name="headerValue">The value to parse</param>
    /// <returns>A list of IDs</returns>
    public static List<string> ParseMultipleIDs(string headerValue)
		{
			List<string> returner = new List<string>();

			// Split the string by >
			// We cannot use ' ' (space) here since this is a possible value:
			// <test@test.com><test2@test.com>
			string[] ids = headerValue.Trim().Split(new char[]{ '>' }, StringSplitOptions.RemoveEmptyEntries);
			foreach (string id in ids)
			{
				returner.Add(ParseId(id));
			}

			return returner;
		}
}

/// <summary>
/// Utility class for dealing with encoded word strings<br/>
/// <br/>
/// EncodedWord encoded strings are only in ASCII, but can embed information
/// about characters in other character sets.<br/>
/// <br/>
/// It is done by specifying the character set, an encoding that maps from ASCII to
/// the correct bytes and the actual encoded string.<br/>
/// <br/>
/// It is specified in a format that is best summarized by a BNF:<br/>
/// <c>"=?" character_set "?" encoding "?" encoded-text "?="</c><br/>
/// </summary>
/// <example>
/// <c>=?ISO-8859-1?Q?=2D?=</c>
/// Here <c>ISO-8859-1</c> is the character set.<br/>
/// <c>Q</c> is the encoding method (quoted-printable). <c>B</c> is also supported (Base 64).<br/>
/// The encoded text is the <c>=2D</c> part which is decoded to a space.
/// </example>
internal static class EncodedWord
{
    /// <summary>
    /// Decode text that is encoded with the <see cref="EncodedWord"/> encoding.<br/>
    ///<br/>
    /// This method will decode any encoded-word found in the string.<br/>
    /// All parts which is not encoded will not be touched.<br/>
    /// <br/>
    /// From <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>:<br/>
    /// <code>
    /// Generally, an "encoded-word" is a sequence of printable ASCII
    /// characters that begins with "=?", ends with "?=", and has two "?"s in
    /// between.  It specifies a character set and an encoding method, and
    /// also includes the original text encoded as graphic ASCII characters,
    /// according to the rules for that encoding method.
    /// </code>
    /// Example:<br/>
    /// <c>=?ISO-8859-1?q?this=20is=20some=20text?= other text here</c>
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc2047#section-2">RFC 2047 section 2</a> "Syntax of encoded-words" for more details</remarks>
    /// <param name="encodedWords">Source text. May be content which is not encoded.</param>
    /// <returns>Decoded text</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="encodedWords"/> is <see langword="null"/></exception>
    public static string Decode(string encodedWords)
    {
        if (encodedWords == null)
            throw new ArgumentNullException("encodedWords");

        // Notice that RFC2231 redefines the BNF to
        // encoded-word := "=?" charset ["*" language] "?" encoded-text "?="
        // but no usage of this BNF have been spotted yet. It is here to
        // ease debugging if such a case is discovered.

        // This is the regex that should fit the BNF
        // RFC Says that NO WHITESPACE is allowed in this encoding, but there are examples
        // where whitespace is there, and therefore this regex allows for such.
        const string encodedWordRegex = @"\=\?(?<Charset>\S+?)\?(?<Encoding>\w)\?(?<Content>.+?)\?\=";
        // \w	Matches any word character including underscore. Equivalent to "[A-Za-z0-9_]".
        // \S	Matches any nonwhite space character. Equivalent to "[^ \f\n\r\t\v]".
        // +?   non-gready equivalent to +
        // (?<NAME>REGEX) is a named group with name NAME and regular expression REGEX

        // Any amount of linear-space-white between 'encoded-word's,
        // even if it includes a CRLF followed by one or more SPACEs,
        // is ignored for the purposes of display.
        // http://tools.ietf.org/html/rfc2047#page-12
        // Define a regular expression that captures two encoded words with some whitespace between them
        const string replaceRegex = @"(?<first>" + encodedWordRegex + @")\s+(?<second>" + encodedWordRegex + ")";

        // Then, find an occourance of such an expression, but remove the whitespace inbetween when found
        encodedWords = Regex.Replace(encodedWords, replaceRegex, "${first}${second}");

        string decodedWords = encodedWords;

        MatchCollection matches = Regex.Matches(encodedWords, encodedWordRegex);
        foreach (Match match in matches)
        {
            // If this match was not a success, we should not use it
            if (!match.Success) continue;

            string fullMatchValue = match.Value;

            string encodedText = match.Groups["Content"].Value;
            string encoding = match.Groups["Encoding"].Value;
            string charset = match.Groups["Charset"].Value;

            // Get the encoding which corrosponds to the character set
            Encoding charsetEncoding = EncodingFinder.FindEncoding(charset);

            // Store decoded text here when done
            string decodedText;

            // Encoding may also be written in lowercase
            switch (encoding.ToUpperInvariant())
            {
                // RFC:
                // The "B" encoding is identical to the "BASE64" 
                // encoding defined by RFC 2045.
                // http://tools.ietf.org/html/rfc2045#section-6.8
                case "B":
                    decodedText = Base64.Decode(encodedText, charsetEncoding);
                    break;

                // RFC:
                // The "Q" encoding is similar to the "Quoted-Printable" content-
                // transfer-encoding defined in RFC 2045.
                // There are more details to this. Please check
                // http://tools.ietf.org/html/rfc2047#section-4.2
                // 
                case "Q":
                    decodedText = QuotedPrintable.DecodeEncodedWord(encodedText, charsetEncoding);
                    break;

                default:
                    throw new ArgumentException("The encoding " + encoding + " was not recognized");
            }

            // Repalce our encoded value with our decoded value
            decodedWords = decodedWords.Replace(fullMatchValue, decodedText);
        }

        return decodedWords;
    }
}

/// <summary>
/// Contains common operations needed while decoding.
/// </summary>
internal static class Utility
{
    /// <summary>
    /// Remove quotes, if found, around the string.
    /// </summary>
    /// <param name="text">Text with quotes or without quotes</param>
    /// <returns>Text without quotes</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="text"/> is <see langword="null"/></exception>
    public static string RemoveQuotesIfAny(string text)
    {
        if (text == null)
            throw new ArgumentNullException("text");

        // Check if there are qoutes at both ends
        if (text[0] == '"' && text[text.Length - 1] == '"')
        {
            // Remove quotes at both ends
            return text.Substring(1, text.Length - 2);
        }

        // If no quotes were found, the text is just returned
        return text;
    }

    /// <summary>
    /// Split a string into a list of strings using a specified character.<br/>
    /// Everything inside quotes are ignored.
    /// </summary>
    /// <param name="input">A string to split</param>
    /// <param name="toSplitAt">The character to use to split with</param>
    /// <returns>A List of strings that was delimited by the <paramref name="toSplitAt"/> character</returns>
    public static List<string> SplitStringWithCharNotInsideQuotes(string input, char toSplitAt)
    {
        List<string> elements = new List<string>();

        int lastSplitLocation = 0;
        bool insideQuote = false;

        char[] characters = input.ToCharArray();

        for (int i = 0; i < characters.Length; i++)
        {
            char character = characters[i];
            if (character == '\"')
                insideQuote = !insideQuote;

            // Only split if we are not inside quotes
            if (character == toSplitAt && !insideQuote)
            {
                // We need to split
                int length = i - lastSplitLocation;
                elements.Add(input.Substring(lastSplitLocation, length));

                // Update last split location
                // + 1 so that we do not include the character used to split with next time
                lastSplitLocation = i + 1;
            }
        }

        // Add the last part
        elements.Add(input.Substring(lastSplitLocation, input.Length - lastSplitLocation));

        return elements;
    }
}

/// <summary>
/// Class used to decode RFC 2822 Date header fields.
/// </summary>
internal static class Rfc2822DateTime
{
    /// <summary>
    /// Converts a string in RFC 2822 format into a <see cref="DateTime"/> object
    /// </summary>
    /// <param name="inputDate">The date to convert</param>
    /// <returns>
    /// A valid <see cref="DateTime"/> object, which represents the same time as the string that was converted. 
    /// If <paramref name="inputDate"/> is not a valid date representation, then <see cref="DateTime.MinValue"/> is returned.
    /// </returns>
    /// <exception cref="ArgumentNullException"><exception cref="ArgumentNullException">If <paramref name="inputDate"/> is <see langword="null"/></exception></exception>
    /// <exception cref="ArgumentException">If the <paramref name="inputDate"/> could not be parsed into a <see cref="DateTime"/> object</exception>
    public static DateTime StringToDate(string inputDate)
    {
        if (inputDate == null)
            throw new ArgumentNullException("inputDate");

        // Old date specification allows comments and a lot of whitespace
        inputDate = StripCommentsAndExcessWhitespace(inputDate);

        try
        {
            // Extract the DateTime
            DateTime dateTime = ExtractDateTime(inputDate);

            // If a day-name is specified in the inputDate string, check if it fits with the date
            ValidateDayNameIfAny(dateTime, inputDate);

            // Convert the date into UTC
            dateTime = new DateTime(dateTime.Ticks, DateTimeKind.Utc);

            // Adjust according to the time zone
            dateTime = AdjustTimezone(dateTime, inputDate);

            // Return the parsed date
            return dateTime;
        }
        catch (FormatException e)	// Convert.ToDateTime() Failure
        {
            throw new ArgumentException("Could not parse date: " + e.Message + ". Input was: \"" + inputDate + "\"", e);
        }
        catch (ArgumentException e)
        {
            throw new ArgumentException("Could not parse date: " + e.Message + ". Input was: \"" + inputDate + "\"", e);
        }
    }

    /// <summary>
    /// Adjust the <paramref name="dateTime"/> object given according to the timezone specified in the <paramref name="dateInput"/>.
    /// </summary>
    /// <param name="dateTime">The date to alter</param>
    /// <param name="dateInput">The input date, in which the timezone can be found</param>
    /// <returns>An date altered according to the timezone</returns>
    /// <exception cref="ArgumentException">If no timezone was found in <paramref name="dateInput"/></exception>
    private static DateTime AdjustTimezone(DateTime dateTime, string dateInput)
    {
        // We know that the timezones are always in the last part of the date input
        string[] parts = dateInput.Split(' ');
        string lastPart = parts[parts.Length - 1];

        // Convert timezones in older formats to [+-]dddd format.
        lastPart = Regex.Replace(lastPart, @"UT|GMT|EST|EDT|CST|CDT|MST|MDT|PST|PDT|[A-I]|[K-Y]|Z", MatchEvaluator);

        // Find the timezone specification
        // Example: Fri, 21 Nov 1997 09:55:06 -0600
        // finds -0600
        Match match = Regex.Match(lastPart, @"[\+-](?<hours>\d\d)(?<minutes>\d\d)");
        if (match.Success)
        {
            // We have found that the timezone is in +dddd or -dddd format
            // Add the number of hours and minutes to our found date
            int hours = int.Parse(match.Groups["hours"].Value);
            int minutes = int.Parse(match.Groups["minutes"].Value);

            int factor = match.Value[0] == '+' ? -1 : 1;

            dateTime = dateTime.AddHours(factor * hours);
            dateTime = dateTime.AddMinutes(factor * minutes);

            return dateTime;
        }

        //DefaultLogger.Log.LogDebug("No timezone found in date: " + dateInput + ". Using -0000 as default.");

        // A timezone of -0000 is the same as doing nothing
        return dateTime;
    }

    /// <summary>
    /// Convert timezones in older formats to [+-]dddd format.
    /// </summary>
    /// <param name="match">The match that was found</param>
    /// <returns>The string to replace the matched string with</returns>
    private static string MatchEvaluator(Match match)
    {
        if (!match.Success)
        {
            throw new ArgumentException("Match success are always true");
        }

        switch (match.Value)
        {
            // "A" through "I"
            // are equivalent to "+0100" through "+0900" respectively
            case "A": return "+0100";
            case "B": return "+0200";
            case "C": return "+0300";
            case "D": return "+0400";
            case "E": return "+0500";
            case "F": return "+0600";
            case "G": return "+0700";
            case "H": return "+0800";
            case "I": return "+0900";

            // "K", "L", and "M"
            // are equivalent to "+1000", "+1100", and "+1200" respectively
            case "K": return "+1000";
            case "L": return "+1100";
            case "M": return "+1200";

            // "N" through "Y"
            // are equivalent to "-0100" through "-1200" respectively
            case "N": return "-0100";
            case "O": return "-0200";
            case "P": return "-0300";
            case "Q": return "-0400";
            case "R": return "-0500";
            case "S": return "-0600";
            case "T": return "-0700";
            case "U": return "-0800";
            case "V": return "-0900";
            case "W": return "-1000";
            case "X": return "-1100";
            case "Y": return "-1200";

            // "Z", "UT" and "GMT"
            // is equivalent to "+0000"
            case "Z":
            case "UT":
            case "GMT":
                return "+0000";

            // US time zones
            case "EDT": return "-0400"; // EDT is semantically equivalent to -0400
            case "EST": return "-0500"; // EST is semantically equivalent to -0500
            case "CDT": return "-0500"; // CDT is semantically equivalent to -0500
            case "CST": return "-0600"; // CST is semantically equivalent to -0600
            case "MDT": return "-0600"; // MDT is semantically equivalent to -0600
            case "MST": return "-0700"; // MST is semantically equivalent to -0700
            case "PDT": return "-0700"; // PDT is semantically equivalent to -0700
            case "PST": return "-0800"; // PST is semantically equivalent to -0800

            default:
                throw new ArgumentException("Unexpected input");
        }
    }

    /// <summary>
    /// Extracts the date and time parts from the <paramref name="dateInput"/>
    /// </summary>
    /// <param name="dateInput">The date input string, from which to extract the date and time parts</param>
    /// <returns>The extracted date part or <see langword="DateTime.MinValue"/> if <paramref name="dateInput"/> is not recognized as a valid date.</returns>
    private static DateTime ExtractDateTime(string dateInput)
    {
        // Matches the date and time part of a string
        // Example: Fri, 21 Nov 1997 09:55:06 -0600
        // Finds: 21 Nov 1997 09:55:06
        // Seconds does not need to be specified
        // Even though it is illigal, sometimes hours, minutes or seconds are only specified with one digit
        Match match = Regex.Match(dateInput, @"\d\d? .+ (\d\d\d\d|\d\d) \d?\d:\d?\d(:\d?\d)?");
        if (match.Success)
        {
            return Convert.ToDateTime(match.Value, CultureInfo.InvariantCulture);
        }

        //DefaultLogger.Log.LogError("The given date does not appear to be in a valid format: " + dateInput);
        return DateTime.MinValue;
    }

    /// <summary>
    /// Validates that the given <paramref name="dateTime"/> agrees with a day-name specified
    /// in <paramref name="dateInput"/>.
    /// </summary>
    /// <param name="dateTime">The time to check</param>
    /// <param name="dateInput">The date input to extract the day-name from</param>
    /// <exception cref="ArgumentException">If <paramref name="dateTime"/> and <paramref name="dateInput"/> does not agree on the day</exception>
    private static void ValidateDayNameIfAny(DateTime dateTime, string dateInput)
    {
        // Check if there is a day name in front of the date
        // Example: Fri, 21 Nov 1997 09:55:06 -0600
        if (dateInput.Length >= 4 && dateInput[3] == ',')
        {
            string dayName = dateInput.Substring(0, 3);

            // If a dayName was specified. Check that the dateTime and the dayName
            // agrees on which day it is
            // This is just a failure-check and could be left out
            if ((dateTime.DayOfWeek == DayOfWeek.Monday && !dayName.Equals("Mon")) ||
                (dateTime.DayOfWeek == DayOfWeek.Tuesday && !dayName.Equals("Tue")) ||
                (dateTime.DayOfWeek == DayOfWeek.Wednesday && !dayName.Equals("Wed")) ||
                (dateTime.DayOfWeek == DayOfWeek.Thursday && !dayName.Equals("Thu")) ||
                (dateTime.DayOfWeek == DayOfWeek.Friday && !dayName.Equals("Fri")) ||
                (dateTime.DayOfWeek == DayOfWeek.Saturday && !dayName.Equals("Sat")) ||
                (dateTime.DayOfWeek == DayOfWeek.Sunday && !dayName.Equals("Sun")))
            {
                //DefaultLogger.Log.LogDebug("Day-name does not correspond to the weekday of the date: " + dateInput);
            }
        }

        // If no day name was found no checks can be made
    }

    /// <summary>
    /// Strips and removes all comments and excessive whitespace from the string
    /// </summary>
    /// <param name="input">The input to strip from</param>
    /// <returns>The stripped string</returns>
    private static string StripCommentsAndExcessWhitespace(string input)
    {
        // Strip out comments
        // Also strips out nested comments
        input = Regex.Replace(input, @"(\((?>\((?<C>)|\)(?<-C>)|.?)*(?(C)(?!))\))", "");

        // Reduce any whitespace character to one space only
        input = Regex.Replace(input, @"\s+", " ");

        // Remove all initial whitespace
        input = Regex.Replace(input, @"^\s+", "");

        // Remove all ending whitespace
        input = Regex.Replace(input, @"\s+$", "");

        // Remove spaces at colons
        // Example: 22: 33 : 44 => 22:33:44
        input = Regex.Replace(input, @" ?: ?", ":");

        return input;
    }
}

/// <summary>
/// Utility class for dealing with Base64 encoded strings
/// </summary>
internal static class Base64
{
    /// <summary>
    /// Decodes a base64 encoded string into the bytes it describes
    /// </summary>
    /// <param name="base64Encoded">The string to decode</param>
    /// <returns>A byte array that the base64 string described</returns>
    public static byte[] Decode(string base64Encoded)
    {
        try
        {
            return Convert.FromBase64String(base64Encoded);
        }
        catch //(FormatException e)
        {
            //DefaultLogger.Log.LogError("Base64: (FormatException) " + e.Message + "\r\nOn string: " + base64Encoded);
            throw;
        }
    }

    /// <summary>
    /// Decodes a Base64 encoded string using a specified <see cref="System.Text.Encoding"/> 
    /// </summary>
    /// <param name="base64Encoded">Source string to decode</param>
    /// <param name="encoding">The encoding to use for the decoded byte array that <paramref name="base64Encoded"/> describes</param>
    /// <returns>A decoded string</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="base64Encoded"/> or <paramref name="encoding"/> is <see langword="null"/></exception>
    /// <exception cref="FormatException">If <paramref name="base64Encoded"/> is not a valid base64 encoded string</exception>
    public static string Decode(string base64Encoded, Encoding encoding)
    {
        if (base64Encoded == null)
            throw new ArgumentNullException("base64Encoded");

        if (encoding == null)
            throw new ArgumentNullException("encoding");

        return encoding.GetString(Decode(base64Encoded));
    }
}

/// <summary>
/// Used for decoding Quoted-Printable text.<br/>
/// This is a robust implementation of a Quoted-Printable decoder defined in <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a> and <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>.<br/>
/// Every measurement has been taken to conform to the RFC.
/// </summary>
internal static class QuotedPrintable
{
    /// <summary>
    /// Decodes a Quoted-Printable string according to <a href="http://tools.ietf.org/html/rfc2047">RFC 2047</a>.<br/>
    /// RFC 2047 is used for decoding Encoded-Word encoded strings.
    /// </summary>
    /// <param name="toDecode">Quoted-Printable encoded string</param>
    /// <param name="encoding">Specifies which encoding the returned string will be in</param>
    /// <returns>A decoded string in the correct encoding</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toDecode"/> or <paramref name="encoding"/> is <see langword="null"/></exception>
    public static string DecodeEncodedWord(string toDecode, Encoding encoding)
    {
        if (toDecode == null)
            throw new ArgumentNullException("toDecode");

        if (encoding == null)
            throw new ArgumentNullException("encoding");

        // Decode the QuotedPrintable string and return it
        return encoding.GetString(Rfc2047QuotedPrintableDecode(toDecode, true));
    }

    /// <summary>
    /// Decodes a Quoted-Printable string according to <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a>.<br/>
    /// RFC 2045 specifies the decoding of a body encoded with Content-Transfer-Encoding of quoted-printable.
    /// </summary>
    /// <param name="toDecode">Quoted-Printable encoded string</param>
    /// <returns>A decoded byte array that the Quoted-Printable encoded string described</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
    public static byte[] DecodeContentTransferEncoding(string toDecode)
    {
        if (toDecode == null)
            throw new ArgumentNullException("toDecode");

        // Decode the QuotedPrintable string and return it
        return Rfc2047QuotedPrintableDecode(toDecode, false);
    }

    /// <summary>
    /// This is the actual decoder.
    /// </summary>
    /// <param name="toDecode">The string to be decoded from Quoted-Printable</param>
    /// <param name="encodedWordVariant">
    /// If <see langword="true"/>, specifies that RFC 2047 quoted printable decoding is used.<br/>
    /// This is for quoted-printable encoded words<br/>
    /// <br/>
    /// If <see langword="false"/>, specifies that RFC 2045 quoted printable decoding is used.<br/>
    /// This is for quoted-printable Content-Transfer-Encoding
    /// </param>
    /// <returns>A decoded byte array that was described by <paramref name="toDecode"/></returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toDecode"/> is <see langword="null"/></exception>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc2047#section-4.2">RFC 2047 section 4.2</a> for RFC details</remarks>
    private static byte[] Rfc2047QuotedPrintableDecode(string toDecode, bool encodedWordVariant)
    {
        if (toDecode == null)
            throw new ArgumentNullException("toDecode");

        // Create a byte array builder which is roughly equivalent to a StringBuilder
        using (MemoryStream byteArrayBuilder = new MemoryStream())
        {
            // Remove illegal control characters
            toDecode = RemoveIllegalControlCharacters(toDecode);

            // Run through the whole string that needs to be decoded
            for (int i = 0; i < toDecode.Length; i++)
            {
                char currentChar = toDecode[i];
                if (currentChar == '=')
                {
                    // Check that there is at least two characters behind the equal sign
                    if (toDecode.Length - i < 3)
                    {
                        // We are at the end of the toDecode string, but something is missing. Handle it the way RFC 2045 states
                        WriteAllBytesToStream(byteArrayBuilder, DecodeEqualSignNotLongEnough(toDecode.Substring(i)));

                        // Since it was the last part, we should stop parsing anymore
                        break;
                    }

                    // Decode the Quoted-Printable part
                    string quotedPrintablePart = toDecode.Substring(i, 3);
                    WriteAllBytesToStream(byteArrayBuilder, DecodeEqualSign(quotedPrintablePart));

                    // We now consumed two extra characters. Go forward two extra characters
                    i += 2;
                }
                else
                {
                    // This character is not quoted printable hex encoded.

                    // Could it be the _ character, which represents space
                    // and are we using the encoded word variant of QuotedPrintable
                    if (currentChar == '_' && encodedWordVariant)
                    {
                        // The RFC specifies that the "_" always represents hexadecimal 20 even if the
                        // SPACE character occupies a different code position in the character set in use.
                        byteArrayBuilder.WriteByte(0x20);
                    }
                    else
                    {
                        // This is not encoded at all. This is a literal which should just be included into the output.
                        byteArrayBuilder.WriteByte((byte)currentChar);
                    }
                }
            }

            return byteArrayBuilder.ToArray();
        }
    }

    /// <summary>
    /// Writes all bytes in a byte array to a stream
    /// </summary>
    /// <param name="stream">The stream to write to</param>
    /// <param name="toWrite">The bytes to write to the <paramref name="stream"/></param>
    private static void WriteAllBytesToStream(Stream stream, byte[] toWrite)
    {
        stream.Write(toWrite, 0, toWrite.Length);
    }

    /// <summary>
    /// RFC 2045 states about robustness:<br/>
    /// <code>
    /// Control characters other than TAB, or CR and LF as parts of CRLF pairs,
    /// must not appear. The same is true for octets with decimal values greater
    /// than 126.  If found in incoming quoted-printable data by a decoder, a
    /// robust implementation might exclude them from the decoded data and warn
    /// the user that illegal characters were discovered.
    /// </code>
    /// Control characters are defined in RFC 2396 as<br/>
    /// <c>control = US-ASCII coded characters 00-1F and 7F hexadecimal</c>
    /// </summary>
    /// <param name="input">String to be stripped from illegal control characters</param>
    /// <returns>A string with no illegal control characters</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
    private static string RemoveIllegalControlCharacters(string input)
    {
        if (input == null)
            throw new ArgumentNullException("input");

        // First we remove any \r or \n which is not part of a \r\n pair
        input = RemoveCarriageReturnAndNewLinewIfNotInPair(input);

        // Here only legal \r\n is left over
        // We now simply keep them, and the \t which is also allowed
        // \x0A = \n
        // \x0D = \r
        // \x09 = \t)
        return Regex.Replace(input, "[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]", "");
    }

    /// <summary>
    /// This method will remove any \r and \n which is not paired as \r\n
    /// </summary>
    /// <param name="input">String to remove lonely \r and \n's from</param>
    /// <returns>A string without lonely \r and \n's</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
    private static string RemoveCarriageReturnAndNewLinewIfNotInPair(string input)
    {
        if (input == null)
            throw new ArgumentNullException("input");

        // Use this for building up the new string. This is used for performance instead
        // of altering the input string each time a illegal token is found
        StringBuilder newString = new StringBuilder(input.Length);

        for (int i = 0; i < input.Length; i++)
        {
            // There is a character after it
            // Check for lonely \r
            // There is a lonely \r if it is the last character in the input or if there
            // is no \n following it
            if (input[i] == '\r' && (i + 1 >= input.Length || input[i + 1] != '\n'))
            {
                // Illegal token \r found. Do not add it to the new string

                // Check for lonely \n
                // There is a lonely \n if \n is the first character or if there
                // is no \r in front of it
            }
            else if (input[i] == '\n' && (i - 1 < 0 || input[i - 1] != '\r'))
            {
                // Illegal token \n found. Do not add it to the new string
            }
            else
            {
                // No illegal tokens found. Simply insert the character we are at
                // in our new string
                newString.Append(input[i]);
            }
        }

        return newString.ToString();
    }

    /// <summary>
    /// RFC 2045 says that a robust implementation should handle:<br/>
    /// <code>
    /// An "=" cannot be the ultimate or penultimate character in an encoded
    /// object. This could be handled as in case (2) above.
    /// </code>
    /// Case (2) is:<br/>
    /// <code>
    /// An "=" followed by a character that is neither a
    /// hexadecimal digit (including "abcdef") nor the CR character of a CRLF pair
    /// is illegal.  This case can be the result of US-ASCII text having been
    /// included in a quoted-printable part of a message without itself having
    /// been subjected to quoted-printable encoding.  A reasonable approach by a
    /// robust implementation might be to include the "=" character and the
    /// following character in the decoded data without any transformation and, if
    /// possible, indicate to the user that proper decoding was not possible at
    /// this point in the data.
    /// </code>
    /// </summary>
    /// <param name="decode">
    /// The string to decode which cannot have length above or equal to 3
    /// and must start with an equal sign.
    /// </param>
    /// <returns>A decoded byte array</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="decode"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentException">Thrown if a the <paramref name="decode"/> parameter has length above 2 or does not start with an equal sign.</exception>
    private static byte[] DecodeEqualSignNotLongEnough(string decode)
    {
        if (decode == null)
            throw new ArgumentNullException("decode");

        // We can only decode wrong length equal signs
        if (decode.Length >= 3)
            throw new ArgumentException("decode must have length lower than 3", "decode");

        // First char must be =
        if (decode[0] != '=')
            throw new ArgumentException("First part of decode must be an equal sign", "decode");

        // We will now believe that the string sent to us, was actually not encoded
        // Therefore it must be in US-ASCII and we will return the bytes it corrosponds to
        return Encoding.ASCII.GetBytes(decode);
    }

    /// <summary>
    /// This helper method will decode a string of the form "=XX" where X is any character.<br/>
    /// This method will never fail, unless an argument of length not equal to three is passed.
    /// </summary>
    /// <param name="decode">The length 3 character that needs to be decoded</param>
    /// <returns>A decoded byte array</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="decode"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentException">Thrown if a the <paramref name="decode"/> parameter does not have length 3 or does not start with an equal sign.</exception>
    private static byte[] DecodeEqualSign(string decode)
		{
			if (decode == null)
				throw new ArgumentNullException("decode");

			// We can only decode the string if it has length 3 - other calls to this function is invalid
			if (decode.Length != 3)
				throw new ArgumentException("decode must have length 3", "decode");

			// First char must be =
			if (decode[0] != '=')
				throw new ArgumentException("decode must start with an equal sign", "decode");

			// There are two cases where an equal sign might appear
			// It might be a
			//   - hex-string like =3D, denoting the character with hex value 3D
			//   - it might be the last character on the line before a CRLF
			//     pair, denoting a soft linebreak, which simply
			//     splits the text up, because of the 76 chars per line restriction
			if (decode.Contains("\r\n"))
			{
				// Soft break detected
				// We want to return string.Empty which is equivalent to a zero-length byte array
				return new byte[0]; 
			}

			// Hex string detected. Convertion needed.
			// It might be that the string located after the equal sign is not hex characters
			// An example: =JU
			// In that case we would like to catch the FormatException and do something else
			try
			{
				// The number part of the string is the last two digits. Here we simply remove the equal sign
				string numberString = decode.Substring(1);

				// Now we create a byte array with the converted number encoded in the string as a hex value (base 16)
				// This will also handle illegal encodings like =3d where the hex digits are not uppercase,
				// which is a robustness requirement from RFC 2045.
				byte[] oneByte = { Convert.ToByte(numberString, 16) };

				// Simply return our one byte byte array
				return oneByte;
			} catch (FormatException)
			{
				// RFC 2045 says about robust implementation:
				// An "=" followed by a character that is neither a
				// hexadecimal digit (including "abcdef") nor the CR
				// character of a CRLF pair is illegal.  This case can be
				// the result of US-ASCII text having been included in a
				// quoted-printable part of a message without itself
				// having been subjected to quoted-printable encoding.  A
				// reasonable approach by a robust implementation might be
				// to include the "=" character and the following
				// character in the decoded data without any
				// transformation and, if possible, indicate to the user
				// that proper decoding was not possible at this point in
				// the data.

				// So we choose to believe this is actually an un-encoded string
				// Therefore it must be in US-ASCII and we will return the bytes it corrosponds to
				return Encoding.ASCII.GetBytes(decode);
			}
		}
}

///<summary>
/// Utility class that divides a message into a body and a header.<br/>
/// The header is then parsed to a strongly typed <see cref="MessageHeader"/> object.
///</summary>
internal static class HeaderExtractor
{
    /// <summary>
    /// Find the end of the header section in a byte array.<br/>
    /// The headers have ended when a blank line is found
    /// </summary>
    /// <param name="messageContent">The full message stored as a byte array</param>
    /// <returns>The position of the line just after the header end blank line</returns>
    private static int FindHeaderEndPosition(byte[] messageContent)
    {
        // Convert the byte array into a stream
        using (Stream stream = new MemoryStream(messageContent))
        {
            while (true)
            {
                // Read a line from the stream. We know headers are in US-ASCII
                // therefore it is not problem to read them as such
                string line = StreamUtility.ReadLineAsAscii(stream);

                // The end of headers is signaled when a blank line is found
                // or if the line is null - in which case the email is actually an email with
                // only headers but no body
                if (string.IsNullOrEmpty(line))
                    return (int)stream.Position;
            }
        }
    }

    /// <summary>
    /// Extract the header part and body part of a message.<br/>
    /// The headers are then parsed to a strongly typed <see cref="MessageHeader"/> object.
    /// </summary>
    /// <param name="fullRawMessage">The full message in bytes where header and body needs to be extracted from</param>
    /// <param name="headers">The extracted header parts of the message</param>
    /// <param name="body">The body part of the message</param>
    /// <exception cref="ArgumentNullException">If <paramref name="fullRawMessage"/> is <see langword="null"/></exception>
    public static void ExtractHeadersAndBody(byte[] fullRawMessage, out MessageHeader headers, out byte[] body)
    {
        if (fullRawMessage == null)
            throw new ArgumentNullException("fullRawMessage");

        // Find the end location of the headers
        int endOfHeaderLocation = FindHeaderEndPosition(fullRawMessage);

        // The headers are always in ASCII - therefore we can convert the header part into a string
        // using US-ASCII encoding
        string headersString = Encoding.ASCII.GetString(fullRawMessage, 0, endOfHeaderLocation);

        // Now parse the headers to a NameValueCollection
        NameValueCollection headersUnparsedCollection = ExtractHeaders(headersString);

        // Use the NameValueCollection to parse it into a strongly-typed MessageHeader header
        headers = new MessageHeader(headersUnparsedCollection);

        // Since we know where the headers end, we also know where the body is
        // Copy the body part into the body parameter
        body = new byte[fullRawMessage.Length - endOfHeaderLocation];
        Array.Copy(fullRawMessage, endOfHeaderLocation, body, 0, body.Length);
    }

    /// <summary>
    /// Method that takes a full message and extract the headers from it.
    /// </summary>
    /// <param name="messageContent">The message to extract headers from. Does not need the body part. Needs the empty headers end line.</param>
    /// <returns>A collection of Name and Value pairs of headers</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="messageContent"/> is <see langword="null"/></exception>
    private static NameValueCollection ExtractHeaders(string messageContent)
    {
        if (messageContent == null)
            throw new ArgumentNullException("messageContent");

        NameValueCollection headers = new NameValueCollection();

        using (StringReader messageReader = new StringReader(messageContent))
        {
            // Read until all headers have ended.
            // The headers ends when an empty line is encountered
            // An empty message might actually not have an empty line, in which
            // case the headers end with null value.
            string line;
            while (!string.IsNullOrEmpty(line = messageReader.ReadLine()))
            {
                // Split into name and value
                KeyValuePair<string, string> header = SeparateHeaderNameAndValue(line);

                // First index is header name
                string headerName = header.Key;

                // Second index is the header value.
                // Use a StringBuilder since the header value may be continued on the next line
                StringBuilder headerValue = new StringBuilder(header.Value);

                // Keep reading until we would hit next header
                // This if for handling multi line headers
                while (IsMoreLinesInHeaderValue(messageReader))
                {
                    // Unfolding is accomplished by simply removing any CRLF
                    // that is immediately followed by WSP
                    // This was done using ReadLine (it discards CRLF)
                    // See http://tools.ietf.org/html/rfc822#section-3.1.1 for more information
                    string moreHeaderValue = messageReader.ReadLine();

                    // If this exception is ever raised, there is an serious algorithm failure
                    // IsMoreLinesInHeaderValue does not return true if the next line does not exist
                    // This check is only included to stop the nagging "possibly null" code analysis hint
                    if (moreHeaderValue == null)
                        throw new ArgumentException("This will never happen");

                    // Simply append the line just read to the header value
                    headerValue.Append(moreHeaderValue);
                }

                // Now we have the name and full value. Add it
                headers.Add(headerName, headerValue.ToString());
            }
        }

        return headers;
    }

    /// <summary>
    /// Check if the next line is part of the current header value we are parsing by
    /// peeking on the next character of the <see cref="TextReader"/>.<br/>
    /// This should only be called while parsing headers.
    /// </summary>
    /// <param name="reader">The reader from which the header is read from</param>
    /// <returns><see langword="true"/> if multi-line header. <see langword="false"/> otherwise</returns>
    private static bool IsMoreLinesInHeaderValue(TextReader reader)
    {
        int peek = reader.Peek();
        if (peek == -1)
            return false;

        char peekChar = (char)peek;

        // A multi line header must have a whitespace character
        // on the next line if it is to be continued
        return peekChar == ' ' || peekChar == '\t';
    }

    /// <summary>
    /// Separate a full header line into a header name and a header value.
    /// </summary>
    /// <param name="rawHeader">The raw header line to be separated</param>
    /// <exception cref="ArgumentNullException">If <paramref name="rawHeader"/> is <see langword="null"/></exception>
    internal static KeyValuePair<string, string> SeparateHeaderNameAndValue(string rawHeader)
    {
        if (rawHeader == null)
            throw new ArgumentNullException("rawHeader");

        string key = string.Empty;
        string value = string.Empty;

        int indexOfColon = rawHeader.IndexOf(':');

        // Check if it is allowed to make substring calls
        if (indexOfColon >= 0 && rawHeader.Length >= indexOfColon + 1)
        {
            key = rawHeader.Substring(0, indexOfColon).Trim();
            value = rawHeader.Substring(indexOfColon + 1).Trim();
        }

        return new KeyValuePair<string, string>(key, value);
    }
}

/// <summary>
/// Utility class used by OpenPop for mapping from a characterSet to an <see cref="Encoding"/>.<br/>
/// <br/>
/// The functionality of the class can be altered by adding mappings
/// using <see cref="AddMapping"/> and by adding a <see cref="FallbackDecoder"/>.<br/>
/// <br/>
/// Given a characterSet, it will try to find the Encoding as follows:
/// <list type="number">
///     <item>
///         <description>If a mapping for the characterSet was added, use the specified Encoding from there. Mappings can be added using <see cref="AddMapping"/>.</description>
///     </item>
///     <item>
///         <description>Try to parse the characterSet and look it up using <see cref="Encoding.GetEncoding(int)"/> for codepages or <see cref="Encoding.GetEncoding(string)"/> for named encodings.</description>
///     </item>
///     <item>
///         <description>If an encoding is not found yet, use the <see cref="FallbackDecoder"/> if defined. The <see cref="FallbackDecoder"/> is user defined.</description>
///     </item>
/// </list>
/// </summary>
public static class EncodingFinder
{
    /// <summary>
    /// Delegate that is used when the EncodingFinder is unable to find an encoding by
    /// using the <see cref="EncodingFinder.EncodingMap"/> or general code.<br/>
    /// This is used as a last resort and can be used for setting a default encoding or
    /// for finding an encoding on runtime for some <paramref name="characterSet"/>.
    /// </summary>
    /// <param name="characterSet">The character set to find an encoding for.</param>
    /// <returns>An encoding for the <paramref name="characterSet"/> or <see langword="null"/> if none could be found.</returns>
    public delegate Encoding FallbackDecoderDelegate(string characterSet);

    /// <summary>
    /// Last resort decoder. <seealso cref="FallbackDecoderDelegate"/>.
    /// </summary>
    public static FallbackDecoderDelegate FallbackDecoder { private get { return _fallbackDecoder; } set { _fallbackDecoder = value; } }
    private static FallbackDecoderDelegate _fallbackDecoder;

    /// <summary>
    /// Mapping from charactersets to encodings.
    /// </summary>
    private static Dictionary<string, Encoding> EncodingMap { get { return _encodingMap; } set { _encodingMap = value; } }
    private static Dictionary<string, Encoding> _encodingMap;

    /// <summary>
    /// Initialize the EncodingFinder
    /// </summary>
    static EncodingFinder()
    {
        Reset();
    }

    /// <summary>
    /// Used to reset this static class to facilite isolated unit testing.
    /// </summary>
    internal static void Reset()
    {
        EncodingMap = new Dictionary<string, Encoding>();
        FallbackDecoder = null;

        // Some emails incorrectly specify the encoding as utf8, but it should have been utf-8.
        AddMapping("utf8", Encoding.UTF8);
    }

    /// <summary>
    /// Parses a character set into an encoding.
    /// </summary>
    /// <param name="characterSet">The character set to parse</param>
    /// <returns>An encoding which corresponds to the character set</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="characterSet"/> is <see langword="null"/></exception>
    internal static Encoding FindEncoding(string characterSet)
    {
        if (characterSet == null)
            throw new ArgumentNullException("characterSet");

        string charSetUpper = characterSet.ToUpperInvariant();

        // Check if the characterSet is explicitly mapped to an encoding
        if (EncodingMap.ContainsKey(charSetUpper))
            return EncodingMap[charSetUpper];

        // Try to find the generally find the encoding
        try
        {
            if (charSetUpper.Contains("WINDOWS") || charSetUpper.Contains("CP"))
            {
                // It seems the characterSet contains an codepage value, which we should use to parse the encoding
                charSetUpper = charSetUpper.Replace("CP", ""); // Remove cp
                charSetUpper = charSetUpper.Replace("WINDOWS", ""); // Remove windows
                charSetUpper = charSetUpper.Replace("-", ""); // Remove - which could be used as cp-1554

                // Now we hope the only thing left in the characterSet is numbers.
                int codepageNumber = int.Parse(charSetUpper, CultureInfo.InvariantCulture);

                return Encoding.GetEncoding(codepageNumber);
            }

            // It seems there is no codepage value in the characterSet. It must be a named encoding
            return Encoding.GetEncoding(characterSet);
        }
        catch (ArgumentException)
        {
            // The encoding could not be found generally. 
            // Try to use the FallbackDecoder if it is defined.

            // Check if it is defined
            if (FallbackDecoder == null)
                throw; // It was not defined - throw catched exception

            // Use the FallbackDecoder
            Encoding fallbackDecoderResult = FallbackDecoder(characterSet);

            // Check if the FallbackDecoder had a solution
            if (fallbackDecoderResult != null)
                return fallbackDecoderResult;

            // If no solution was found, throw catched exception
            throw;
        }
    }

    /// <summary>
    /// Puts a mapping from <paramref name="characterSet"/> to <paramref name="encoding"/>
    /// into the <see cref="EncodingFinder"/>'s internal mapping Dictionary.
    /// </summary>
    /// <param name="characterSet">The string that maps to the <paramref name="encoding"/></param>
    /// <param name="encoding">The <see cref="Encoding"/> that should be mapped from <paramref name="characterSet"/></param>
    /// <exception cref="ArgumentNullException">If <paramref name="characterSet"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentNullException">If <paramref name="encoding"/> is <see langword="null"/></exception>
    public static void AddMapping(string characterSet, Encoding encoding)
    {
        if (characterSet == null)
            throw new ArgumentNullException("characterSet");

        if (encoding == null)
            throw new ArgumentNullException("encoding");

        // Add the mapping using uppercase
        EncodingMap.Add(characterSet.ToUpperInvariant(), encoding);
    }
}

/// <summary>
/// A MessagePart is a part of an email message used to describe the whole email parse tree.<br/>
/// <br/>
/// <b>Email messages are tree structures</b>:<br/>
/// Email messages may contain large tree structures, and the MessagePart are the nodes of the this structure.<br/>
/// A MessagePart may either be a leaf in the structure or a internal node with links to other MessageParts.<br/>
/// The root of the message tree is the <see cref="Message"/> class.<br/>
/// <br/>
/// <b>Leafs</b>:<br/>
/// If a MessagePart is a leaf, the part is not a <see cref="IsMultiPart">MultiPart</see> message.<br/>
/// Leafs are where the contents of an email are placed.<br/>
/// This includes, but is not limited to: attachments, text or images referenced from HTML.<br/>
/// The content of an attachment can be fetched by using the <see cref="Body"/> property.<br/>
/// If you want to have the text version of a MessagePart, use the <see cref="GetBodyAsText"/> method which will<br/>
/// convert the <see cref="Body"/> into a string using the encoding the message was sent with.<br/>
/// <br/>
/// <b>Internal nodes</b>:<br/>
/// If a MessagePart is an internal node in the email tree structure, then the part is a <see cref="IsMultiPart">MultiPart</see> message.<br/>
/// The <see cref="MessageParts"/> property will then contain links to the parts it contain.<br/>
/// The <see cref="Body"/> property of the MessagePart will not be set.<br/>
/// <br/>
/// See the example for a parsing example.<br/>
/// This class cannot be instantiated from outside the library.
/// </summary>
/// <example>
/// This example illustrates how the message parse tree looks like given a specific message<br/>
/// <br/>
/// The message source in this example is:<br/>
/// <code>
/// MIME-Version: 1.0
///	Content-Type: multipart/mixed; boundary="frontier"
///	
///	This is a message with multiple parts in MIME format.
///	--frontier
/// Content-Type: text/plain
///	
///	This is the body of the message.
///	--frontier
///	Content-Type: application/octet-stream
///	Content-Transfer-Encoding: base64
///	
///	PGh0bWw+CiAgPGHLYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg
///	Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==
///	--frontier--
/// </code>
/// The tree will look as follows, where the content-type media type of the message is listed<br/>
/// <code>
/// - Message root
///   - multipart/mixed MessagePart
///     - text/plain MessagePart
///     - application/octet-stream MessagePart
/// </code>
/// It is possible to have more complex message trees like the following:<br/>
/// <code>
/// - Message root
///   - multipart/mixed MessagePart
///     - text/plain MessagePart
///     - text/plain MessagePart
///     - multipart/parallel
///       - audio/basic
///       - image/tiff
///     - text/enriched
///     - message/rfc822
/// </code>
/// But it is also possible to have very simple message trees like:<br/>
/// <code>
/// - Message root
///   - text/plain
/// </code>
/// </example>
public class MessagePart
{
    #region Public properties
    /// <summary>
    /// The Content-Type header field.<br/>
    /// <br/>
    /// If not set, the ContentType is created by the default "text/plain; charset=us-ascii" which is
    /// defined in <a href="http://tools.ietf.org/html/rfc2045#section-5.2">RFC 2045 section 5.2</a>.<br/>
    /// <br/>
    /// If set, the default is overridden.
    /// </summary>
    public ContentType ContentType { get { return _contentType; } private set { _contentType = value; } }
    private ContentType _contentType;

    /// <summary>
    /// A human readable description of the body<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-Description header was present in the message.<br/>
    /// </summary>
    public string ContentDescription { get { return _contentDescription; } private set { _contentDescription = value; } }
    private string _contentDescription;

    /// <summary>
    /// This header describes the Content encoding during transfer.<br/>
    /// <br/>
    /// If no Content-Transfer-Encoding header was present in the message, it is set
    /// to the default of <see cref="Header.ContentTransferEncoding.SevenBit">SevenBit</see> in accordance to the RFC.
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for details</remarks>
    public ContentTransferEncoding ContentTransferEncoding { get { return _contentTransferEncoding; } private set { _contentTransferEncoding = value; } }
    private ContentTransferEncoding _contentTransferEncoding;

    /// <summary>
    /// ID of the content part (like an attached image). Used with MultiPart messages.<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-ID header field was present in the message.
    /// </summary>
    public string ContentId { get { return _contentId; } private set { _contentId = value; } }
    private string _contentId;

    /// <summary>
    /// Used to describe if a <see cref="MessagePart"/> is to be displayed or to be though of as an attachment.<br/>
    /// Also contains information about filename if such was sent.<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-Disposition header field was present in the message
    /// </summary>
    public ContentDisposition ContentDisposition { get { return _contentDisposition; } private set { _contentDisposition = value; } }
    private ContentDisposition _contentDisposition;

    /// <summary>
    /// This is the encoding used to parse the message body if the <see cref="MessagePart"/><br/>
    /// is not a MultiPart message. It is derived from the <see cref="ContentType"/> character set property.
    /// </summary>
    public Encoding BodyEncoding { get { return _bodyEncoding; } private set { _bodyEncoding = value; } }
    private Encoding _bodyEncoding;

    /// <summary>
    /// This is the parsed body of this <see cref="MessagePart"/>.<br/>
    /// It is parsed in that way, if the body was ContentTransferEncoded, it has been decoded to the
    /// correct bytes.<br/>
    /// <br/>
    /// It will be <see langword="null"/> if this <see cref="MessagePart"/> is a MultiPart message.<br/>
    /// Use <see cref="IsMultiPart"/> to check if this <see cref="MessagePart"/> is a MultiPart message.
    /// </summary>
    public byte[] Body { get { return _body; } private set { _body = value; } }
    private byte[] _body;

    /// <summary>
    /// Describes if this <see cref="MessagePart"/> is a MultiPart message<br/>
    /// <br/>
    /// The <see cref="MessagePart"/> is a MultiPart message if the <see cref="ContentType"/> media type property starts with "multipart/"
    /// </summary>
    public bool IsMultiPart
    {
        get
        {
            return ContentType.MediaType.StartsWith("multipart/", StringComparison.OrdinalIgnoreCase);
        }
    }

    /// <summary>
    /// A <see cref="MessagePart"/> is considered to be holding text in it's body if the MediaType
    /// starts either "text/" or is equal to "message/rfc822"
    /// </summary>
    public bool IsText
    {
        get
        {
            string mediaType = ContentType.MediaType;
            return mediaType.StartsWith("text/", StringComparison.OrdinalIgnoreCase) || mediaType.Equals("message/rfc822", StringComparison.OrdinalIgnoreCase);
        }
    }

    /// <summary>
    /// A <see cref="MessagePart"/> is considered to be an attachment, if<br/>
    /// - it is not holding <see cref="IsText">text</see> and is not a <see cref="IsMultiPart">MultiPart</see> message<br/>
    /// or<br/>
    /// - it has a Content-Disposition header that says it is an attachment
    /// </summary>
    public bool IsAttachment
    {
        get
        {
            // Inline is the opposite of attachment
            return (!IsText && !IsMultiPart) || (ContentDisposition != null && !ContentDisposition.Inline);
        }
    }

    /// <summary>
    /// This is a convenient-property for figuring out a FileName for this <see cref="MessagePart"/>.<br/>
    /// If the <see cref="MessagePart"/> is a MultiPart message, then it makes no sense to try to find a FileName.<br/>
    /// <br/>
    /// The FileName can be specified in the <see cref="ContentDisposition"/> or in the <see cref="ContentType"/> properties.<br/>
    /// If none of these places two places tells about the FileName, a default "(no name)" is returned.
    /// </summary>
    public string FileName { get { return _fileName; } private set { _fileName = value; } }
    private string _fileName;

    /// <summary>
    /// If this <see cref="MessagePart"/> is a MultiPart message, then this property
    /// has a list of each of the Multiple parts that the message consists of.<br/>
    /// <br/>
    /// It is <see langword="null"/> if it is not a MultiPart message.<br/>
    /// Use <see cref="IsMultiPart"/> to check if this <see cref="MessagePart"/> is a MultiPart message.
    /// </summary>
    public List<MessagePart> MessageParts { get { return _messageParts; } private set { _messageParts = value; } }
    private List<MessagePart> _messageParts;
    #endregion

    #region Constructors
    /// <summary>
    /// Used to construct the topmost message part
    /// </summary>
    /// <param name="rawBody">The body that needs to be parsed</param>
    /// <param name="headers">The headers that should be used from the message</param>
    /// <exception cref="ArgumentNullException">If <paramref name="rawBody"/> or <paramref name="headers"/> is <see langword="null"/></exception>
    internal MessagePart(byte[] rawBody, MessageHeader headers)
    {
        if (rawBody == null)
            throw new ArgumentNullException("rawBody");

        if (headers == null)
            throw new ArgumentNullException("headers");

        ContentType = headers.ContentType;
        ContentDescription = headers.ContentDescription;
        ContentTransferEncoding = headers.ContentTransferEncoding;
        ContentId = headers.ContentId;
        ContentDisposition = headers.ContentDisposition;

        FileName = FindFileName(ContentType, ContentDisposition, "(no name)");
        BodyEncoding = ParseBodyEncoding(ContentType.CharSet);

        ParseBody(rawBody);
    }
    #endregion

    #region Parsing
    /// <summary>
    /// Parses a character set into an encoding
    /// </summary>
    /// <param name="characterSet">The character set that needs to be parsed. <see langword="null"/> is allowed.</param>
    /// <returns>The encoding specified by the <paramref name="characterSet"/> parameter, or ASCII if the character set was <see langword="null"/> or empty</returns>
    private static Encoding ParseBodyEncoding(string characterSet)
    {
        // Default encoding in Mime messages is US-ASCII
        Encoding encoding = Encoding.ASCII;

        // If the character set was specified, find the encoding that the character
        // set describes, and use that one instead
        if (!string.IsNullOrEmpty(characterSet))
            encoding = EncodingFinder.FindEncoding(characterSet);

        return encoding;
    }

    /// <summary>
    /// Figures out the filename of this message part from some headers.
    /// <see cref="FileName"/> property.
    /// </summary>
    /// <param name="contentType">The Content-Type header</param>
    /// <param name="contentDisposition">The Content-Disposition header</param>
    /// <param name="defaultName">The default filename to use, if no other could be found</param>
    /// <returns>The filename found, or the default one if not such filename could be found in the headers</returns>
    /// <exception cref="ArgumentNullException">if <paramref name="contentType"/> is <see langword="null"/></exception>
    private static string FindFileName(ContentType contentType, ContentDisposition contentDisposition, string defaultName)
    {
        if (contentType == null)
            throw new ArgumentNullException("contentType");

        if (contentDisposition != null && contentDisposition.FileName != null)
            return contentDisposition.FileName;

        if (contentType.Name != null)
            return contentType.Name;

        return defaultName;
    }

    /// <summary>
    /// Parses a byte array as a body of an email message.
    /// </summary>
    /// <param name="rawBody">The byte array to parse as body of an email message. This array may not contain headers.</param>
    private void ParseBody(byte[] rawBody)
    {
        if (IsMultiPart)
        {
            // Parses a MultiPart message
            ParseMultiPartBody(rawBody);
        }
        else
        {
            // Parses a non MultiPart message
            // Decode the body accodingly and set the Body property
            Body = DecodeBody(rawBody, ContentTransferEncoding);
        }
    }

    /// <summary>
    /// Parses the <paramref name="rawBody"/> byte array as a MultiPart message.<br/>
    /// It is not valid to call this method if <see cref="IsMultiPart"/> returned <see langword="false"/>.<br/>
    /// Fills the <see cref="MessageParts"/> property of this <see cref="MessagePart"/>.
    /// </summary>
    /// <param name="rawBody">The byte array which is to be parsed as a MultiPart message</param>
    private void ParseMultiPartBody(byte[] rawBody)
    {
        // Fetch out the boundary used to delimit the messages within the body
        string multipartBoundary = ContentType.Boundary;

        // Fetch the individual MultiPart message parts using the MultiPart boundary
        List<byte[]> bodyParts = GetMultiPartParts(rawBody, multipartBoundary);

        // Initialize the MessageParts property, with room to as many bodies as we have found
        MessageParts = new List<MessagePart>(bodyParts.Count);

        // Now parse each byte array as a message body and add it the the MessageParts property
        foreach (byte[] bodyPart in bodyParts)
        {
            MessagePart messagePart = GetMessagePart(bodyPart);
            MessageParts.Add(messagePart);
        }
    }

    /// <summary>
    /// Given a byte array describing a full message.<br/>
    /// Parses the byte array into a <see cref="MessagePart"/>.
    /// </summary>
    /// <param name="rawMessageContent">The byte array containing both headers and body of a message</param>
    /// <returns>A <see cref="MessagePart"/> which was described by the <paramref name="rawMessageContent"/> byte array</returns>
    private static MessagePart GetMessagePart(byte[] rawMessageContent)
    {
        // Find the headers and the body parts of the byte array
        MessageHeader headers;
        byte[] body;
        HeaderExtractor.ExtractHeadersAndBody(rawMessageContent, out headers, out body);

        // Create a new MessagePart from the headers and the body
        return new MessagePart(body, headers);
    }

    /// <summary>
    /// Gets a list of byte arrays where each entry in the list is a full message of a message part
    /// </summary>
    /// <param name="rawBody">The raw byte array describing the body of a message which is a MultiPart message</param>
    /// <param name="multipPartBoundary">The delimiter that splits the different MultiPart bodies from each other</param>
    /// <returns>A list of byte arrays, each a full message of a <see cref="MessagePart"/></returns>
    private static List<byte[]> GetMultiPartParts(byte[] rawBody, string multipPartBoundary)
    {
        // This is the list we want to return
        List<byte[]> messageBodies = new List<byte[]>();

        // Create a stream from which we can find MultiPart boundaries
        using (MemoryStream stream = new MemoryStream(rawBody))
        {
            bool lastMultipartBoundaryEncountered;

            // Find the start of the first message in this multipart
            // Since the method returns the first character on a the line containing the MultiPart boundary, we
            // need to add the MultiPart boundary with prepended "--" and appended CRLF pair to the position returned.
            int startLocation = FindPositionOfNextMultiPartBoundary(stream, multipPartBoundary, out lastMultipartBoundaryEncountered) + ("--" + multipPartBoundary + "\r\n").Length;
            while (true)
            {
                // When we have just parsed the last multipart entry, stop parsing on
                if (lastMultipartBoundaryEncountered)
                    break;

                // Find the end location of the current multipart
                // Since the method returns the first character on a the line containing the MultiPart boundary, we
                // need to go a CRLF pair back, so that we do not get that into the body of the message part
                int stopLocation = FindPositionOfNextMultiPartBoundary(stream, multipPartBoundary, out lastMultipartBoundaryEncountered) - "\r\n".Length;

                // If we could not find the next multipart boundary, but we had not yet discovered the last boundary, then
                // we will consider the rest of the bytes as contained in a last message part.
                if (stopLocation <= -1)
                {
                    // Include everything except the last CRLF.
                    stopLocation = (int)stream.Length - "\r\n".Length;

                    // We consider this as the last part
                    lastMultipartBoundaryEncountered = true;

                    // Special case: when the last multipart delimiter is not ending with "--", but is indeed the last
                    // one, then the next multipart would contain nothing, and we should not include such one.
                    if (startLocation >= stopLocation)
                        break;
                }

                // We have now found the start and end of a message part
                // Now we create a byte array with the correct length and put the message part's bytes into
                // it and add it to our list we want to return
                int length = stopLocation - startLocation;
                byte[] messageBody = new byte[length];
                Array.Copy(rawBody, startLocation, messageBody, 0, length);
                messageBodies.Add(messageBody);

                // We want to advance to the next message parts start.
                // We can find this by jumping forward the MultiPart boundary from the last
                // message parts end position
                startLocation = stopLocation + ("\r\n" + "--" + multipPartBoundary + "\r\n").Length;
            }
        }

        // We are done
        return messageBodies;
    }

    /// <summary>
    /// Method that is able to find a specific MultiPart boundary in a Stream.<br/>
    /// The Stream passed should not be used for anything else then for looking for MultiPart boundaries
    /// <param name="stream">The stream to find the next MultiPart boundary in. Do not use it for anything else then with this method.</param>
    /// <param name="multiPartBoundary">The MultiPart boundary to look for. This should be found in the <see cref="ContentType"/> header</param>
    /// <param name="lastMultipartBoundaryFound">Is set to <see langword="true"/> if the next MultiPart boundary was indicated to be the last one, by having -- appended to it. Otherwise set to <see langword="false"/></param>
    /// </summary>
    /// <returns>The position of the first character of the line that contained MultiPartBoundary or -1 if no (more) MultiPart boundaries was found</returns>
    private static int FindPositionOfNextMultiPartBoundary(Stream stream, string multiPartBoundary, out bool lastMultipartBoundaryFound)
    {
        lastMultipartBoundaryFound = false;
        while (true)
        {
            // Get the current position. This is the first position on the line - no characters of the line will
            // have been read yet
            int currentPos = (int)stream.Position;

            // Read the line
            string line = StreamUtility.ReadLineAsAscii(stream);

            // If we kept reading until there was no more lines, we did not meet
            // the MultiPart boundary. -1 is then returned to describe this.
            if (line == null)
                return -1;

            // The MultiPart boundary is the MultiPartBoundary with "--" in front of it
            // which is to be at the very start of a line
            if (line.StartsWith("--" + multiPartBoundary, StringComparison.Ordinal))
            {
                // Check if the found boundary was also the last one
                lastMultipartBoundaryFound = line.StartsWith("--" + multiPartBoundary + "--", StringComparison.OrdinalIgnoreCase);
                return currentPos;
            }
        }
    }

    /// <summary>
    /// Decodes a byte array into another byte array based upon the Content Transfer encoding
    /// </summary>
    /// <param name="messageBody">The byte array to decode into another byte array</param>
    /// <param name="contentTransferEncoding">The <see cref="ContentTransferEncoding"/> of the byte array</param>
    /// <returns>A byte array which comes from the <paramref name="contentTransferEncoding"/> being used on the <paramref name="messageBody"/></returns>
    /// <exception cref="ArgumentNullException">If <paramref name="messageBody"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentOutOfRangeException">Thrown if the <paramref name="contentTransferEncoding"/> is unsupported</exception>
    private static byte[] DecodeBody(byte[] messageBody, ContentTransferEncoding contentTransferEncoding)
    {
        if (messageBody == null)
            throw new ArgumentNullException("messageBody");

        switch (contentTransferEncoding)
        {
            case ContentTransferEncoding.QuotedPrintable:
                // If encoded in QuotedPrintable, everything in the body is in US-ASCII
                return QuotedPrintable.DecodeContentTransferEncoding(Encoding.ASCII.GetString(messageBody));

            case ContentTransferEncoding.Base64:
                // If encoded in Base64, everything in the body is in US-ASCII
                return Base64.Decode(Encoding.ASCII.GetString(messageBody));

            case ContentTransferEncoding.SevenBit:
            case ContentTransferEncoding.Binary:
            case ContentTransferEncoding.EightBit:
                // We do not have to do anything
                return messageBody;

            default:
                throw new ArgumentOutOfRangeException("contentTransferEncoding");
        }
    }
    #endregion

    #region Public methods
    /// <summary>
    /// Gets this MessagePart's <see cref="Body"/> as text.<br/>
    /// This is simply the <see cref="BodyEncoding"/> being used on the raw bytes of the <see cref="Body"/> property.<br/>
    /// This method is only valid to call if it is not a MultiPart message and therefore contains a body.<br/>
    /// </summary>
    /// <returns>The <see cref="Body"/> property as a string</returns>
    public string GetBodyAsText()
    {
        return BodyEncoding.GetString(Body);
    }

    /// <summary>
    /// Save this <see cref="MessagePart"/>'s contents to a file.<br/>
    /// There are no methods to reload the file.
    /// </summary>
    /// <param name="file">The File location to save the <see cref="MessagePart"/> to. Existent files will be overwritten.</param>
    /// <exception cref="ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
    /// <exception>Other exceptions relevant to using a <see cref="FileStream"/> might be thrown as well</exception>
    public void Save(FileInfo file)
    {
        if (file == null)
            throw new ArgumentNullException("file");

        using (FileStream stream = new FileStream(file.FullName, FileMode.OpenOrCreate))
        {
            Save(stream);
        }
    }

    /// <summary>
    /// Save this <see cref="MessagePart"/>'s contents to a stream.<br/>
    /// </summary>
    /// <param name="messageStream">The stream to write to</param>
    /// <exception cref="ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
    /// <exception>Other exceptions relevant to <see cref="Stream.Write"/> might be thrown as well</exception>
    public void Save(Stream messageStream)
    {
        if (messageStream == null)
            throw new ArgumentNullException("messageStream");

        messageStream.Write(Body, 0, Body.Length);
    }
    #endregion
}

/// <summary>
/// <see cref="Enum"/> that describes the ContentTransferEncoding header field
/// </summary>
/// <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for more details</remarks>
public enum ContentTransferEncoding
{
    /// <summary>
    /// 7 bit Encoding
    /// </summary>
    SevenBit,

    /// <summary>
    /// 8 bit Encoding
    /// </summary>
    EightBit,

    /// <summary>
    /// Quoted Printable Encoding
    /// </summary>
    QuotedPrintable,

    /// <summary>
    /// Base64 Encoding
    /// </summary>
    Base64,

    /// <summary>
    /// Binary Encoding
    /// </summary>
    Binary
}

/// <summary>
/// Class that hold information about one "Received:" header line.
/// 
/// Visit these RFCs for more information:
/// <see href="http://tools.ietf.org/html/rfc5321#section-4.4">RFC 5321 section 4.4</see>
/// <see href="http://tools.ietf.org/html/rfc4021#section-3.6.7">RFC 4021 section 3.6.7</see>
/// <see href="http://tools.ietf.org/html/rfc2822#section-3.6.7">RFC 2822 section 3.6.7</see>
/// <see href="http://tools.ietf.org/html/rfc2821#section-4.4">RFC 2821 section 4.4</see>
/// </summary>
public class Received
{
    /// <summary>
    /// The date of this received line.
    /// Is <see cref="DateTime.MinValue"/> if not present in the received header line.
    /// </summary>
    public DateTime Date { get { return _date; } private set { _date = value; } }
    private DateTime _date;

    /// <summary>
    /// A dictionary that contains the names and values of the
    /// received header line.
    /// If the received header is invalid and contained one name
    /// multiple times, the first one is used and the rest is ignored.
    /// </summary>
    /// <example>
    /// If the header lines looks like:
    /// <code>
    /// from sending.com (localMachine [127.0.0.1]) by test.net (Postfix)
    /// </code>
    /// then the dictionary will contain two keys: "from" and "by" with the values
    /// "sending.com (localMachine [127.0.0.1])" and "test.net (Postfix)".
    /// </example>
    public Dictionary<string, string> Names { get { return _names; } private set { _names = value; } }
    private Dictionary<string, string> _names; 

    /// <summary>
    /// The raw input string that was parsed into this class.
    /// </summary>
    public string Raw { get { return _raw; } private set { _raw = value; } }
    private string _raw;

    /// <summary>
    /// Parses a Received header value.
    /// </summary>
    /// <param name="headerValue">The value for the header to be parsed</param>
    /// <exception cref="ArgumentNullException"><exception cref="ArgumentNullException">If <paramref name="headerValue"/> is <see langword="null"/></exception></exception>
    public Received(string headerValue)
    {
        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        // Remember the raw input if someone whishes to use it
        Raw = headerValue;

        // Default Date value
        Date = DateTime.MinValue;

        // The date part is the last part of the string, and is preceeded by a semicolon
        // Some emails forgets to specify the date, therefore we need to check if it is there
        if (headerValue.Contains(";"))
        {
            string datePart = headerValue.Substring(headerValue.LastIndexOf(";") + 1);
            Date = Rfc2822DateTime.StringToDate(datePart);
        }

        Names = ParseDictionary(headerValue);
    }

    /// <summary>
    /// Parses the Received header name-value-list into a dictionary.
    /// </summary>
    /// <param name="headerValue">The full header value for the Received header</param>
    /// <returns>A dictionary where the name-value-list has been parsed into</returns>
    private static Dictionary<string, string> ParseDictionary(string headerValue)
    {
        Dictionary<string, string> dictionary = new Dictionary<string, string>();

        // Remove the date part from the full headerValue if it is present
        string headerValueWithoutDate = headerValue;
        if (headerValue.Contains(";"))
        {
            headerValueWithoutDate = headerValue.Substring(0, headerValue.LastIndexOf(";"));
        }

        // Reduce any whitespace character to one space only
        headerValueWithoutDate = Regex.Replace(headerValueWithoutDate, @"\s+", " ");

        // The regex below should capture the following:
        // The name consists of non-whitespace characters followed by a whitespace and then the value follows.
        // There are multiple cases for the value part:
        //   1: Value is just some characters not including any whitespace
        //   2: Value is some characters, a whitespace followed by an unlimited number of
        //      parenthesized values which can contain whitespaces, each delimited by whitespace
        //
        // Cheat sheet for regex:
        // \s means every whitespace character
        // [^\s] means every character except whitespace characters
        // +? is a non-greedy equivalent of +
        const string pattern = @"(?<name>[^\s]+)\s(?<value>[^\s]+(\s\(.+?\))*)";

        // Find each match in the string
        MatchCollection matches = Regex.Matches(headerValueWithoutDate, pattern);
        foreach (Match match in matches)
        {
            // Add the name and value part found in the matched result to the dictionary
            string name = match.Groups["name"].Value;
            string value = match.Groups["value"].Value;

            // Check if the name is really a comment.
            // In this case, the first entry in the header value
            // is a comment
            if (name.StartsWith("("))
            {
                continue;
            }

            // Only add the first name pair
            // All subsequent pairs are ignored, as they are invalid anyway
            if (!dictionary.ContainsKey(name))
                dictionary.Add(name, value);
        }

        return dictionary;
    }
}

/// <summary>
/// This class is used for RFC compliant email addresses.<br/>
/// <br/>
/// The class cannot be instantiated from outside the library.
/// </summary>
/// <remarks>
/// The <seealso cref="MailAddress"/> does not cover all the possible formats 
/// for <a href="http://tools.ietf.org/html/rfc5322#section-3.4">RFC 5322 section 3.4</a> compliant email addresses.
/// This class is used as an address wrapper to account for that deficiency.
/// </remarks>
public class RfcMailAddress
{
    #region Properties
    ///<summary>
    /// The email address of this <see cref="RfcMailAddress"/><br/>
    /// It is possibly string.Empty since RFC mail addresses does not require an email address specified.
    ///</summary>
    ///<example>
    /// Example header with email address:<br/>
    /// To: <c>Test test@mail.com</c><br/>
    /// Address will be <c>test@mail.com</c><br/>
    ///</example>
    ///<example>
    /// Example header without email address:<br/>
    /// To: <c>Test</c><br/>
    /// Address will be <see cref="string.Empty"/>.
    ///</example>
    public string Address { get { return _address; } private set { _address = value; } }
    private string _address;

    ///<summary>
    /// The display name of this <see cref="RfcMailAddress"/><br/>
    /// It is possibly <see cref="string.Empty"/> since RFC mail addresses does not require a display name to be specified.
    ///</summary>
    ///<example>
    /// Example header with display name:<br/>
    /// To: <c>Test test@mail.com</c><br/>
    /// DisplayName will be <c>Test</c>
    ///</example>
    ///<example>
    /// Example header without display name:<br/>
    /// To: <c>test@test.com</c><br/>
    /// DisplayName will be <see cref="string.Empty"/>
    ///</example>
    public string DisplayName { get { return _displayName; } private set { _displayName = value; } }
    private string _displayName;

    /// <summary>
    /// This is the Raw string used to describe the <see cref="RfcMailAddress"/>.
    /// </summary>
    public string Raw { get { return _raw; } private set { _raw = value; } }
    private string _raw;

    /// <summary>
    /// The <see cref="MailAddress"/> associated with the <see cref="RfcMailAddress"/>. 
    /// </summary>
    /// <remarks>
    /// The value of this property can be <see lanword="null"/> in instances where the <see cref="MailAddress"/> cannot represent the address properly.<br/>
    /// Use <see cref="HasValidMailAddress"/> property to see if this property is valid.
    /// </remarks>
    public MailAddress MailAddress { get { return _mailAddress; } private set { _mailAddress = value; } }
    private MailAddress _mailAddress;

    /// <summary>
    /// Specifies if the object contains a valid <see cref="MailAddress"/> reference.
    /// </summary>
    public bool HasValidMailAddress
    {
        get { return MailAddress != null; }
    }
    #endregion

    #region Constructors
    /// <summary>
    /// Constructs an <see cref="RfcMailAddress"/> object from a <see cref="MailAddress"/> object.<br/>
    /// This constructor is used when we were able to construct a <see cref="MailAddress"/> from a string.
    /// </summary>
    /// <param name="mailAddress">The address that <paramref name="raw"/> was parsed into</param>
    /// <param name="raw">The raw unparsed input which was parsed into the <paramref name="mailAddress"/></param>
    /// <exception cref="ArgumentNullException">If <paramref name="mailAddress"/> or <paramref name="raw"/> is <see langword="null"/></exception>
    private RfcMailAddress(MailAddress mailAddress, string raw)
    {
        if (mailAddress == null)
            throw new ArgumentNullException("mailAddress");

        if (raw == null)
            throw new ArgumentNullException("raw");

        MailAddress = mailAddress;
        Address = mailAddress.Address;
        DisplayName = mailAddress.DisplayName;
        Raw = raw;
    }

    /// <summary>
    /// When we were unable to parse a string into a <see cref="MailAddress"/>, this constructor can be
    /// used. The Raw string is then used as the <see cref="DisplayName"/>.
    /// </summary>
    /// <param name="raw">The raw unparsed input which could not be parsed</param>
    /// <exception cref="ArgumentNullException">If <paramref name="raw"/> is <see langword="null"/></exception>
    private RfcMailAddress(string raw)
    {
        if (raw == null)
            throw new ArgumentNullException("raw");

        MailAddress = null;
        Address = string.Empty;
        DisplayName = raw;
        Raw = raw;
    }
    #endregion

    /// <summary>
    /// A string representation of the <see cref="RfcMailAddress"/> object
    /// </summary>
    /// <returns>Returns the string representation for the object</returns>
    public override string ToString()
    {
        if (HasValidMailAddress)
            return MailAddress.ToString();

        return Raw;
    }

    #region Parsing
    /// <summary>
    /// Parses an email address from a MIME header<br/>
    /// <br/>
    /// Examples of input:
    /// <c>Eksperten mailrobot &lt;noreply@mail.eksperten.dk&gt;</c><br/>
    /// <c>"Eksperten mailrobot" &lt;noreply@mail.eksperten.dk&gt;</c><br/>
    /// <c>&lt;noreply@mail.eksperten.dk&gt;</c><br/>
    /// <c>noreply@mail.eksperten.dk</c><br/>
    /// <br/>
    /// It might also contain encoded text, which will then be decoded.
    /// </summary>
    /// <param name="input">The value to parse out and email and/or a username</param>
    /// <returns>A <see cref="RfcMailAddress"/></returns>
    /// <exception cref="ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
    /// <remarks>
    /// <see href="http://tools.ietf.org/html/rfc5322#section-3.4">RFC 5322 section 3.4</see> for more details on email syntax.<br/>
    /// <see cref="EncodedWord.Decode">For more information about encoded text</see>.
    /// </remarks>
    internal static RfcMailAddress ParseMailAddress(string input)
    {
        if (input == null)
            throw new ArgumentNullException("input");

        // Decode the value, if it was encoded
        input = EncodedWord.Decode(input.Trim());

        // Find the location of the email address
        int indexStartEmail = input.LastIndexOf('<');
        int indexEndEmail = input.LastIndexOf('>');

        try
        {
            if (indexStartEmail >= 0 && indexEndEmail >= 0)
            {
                string username;
                // Check if there is a username in front of the email address
                if (indexStartEmail > 0)
                {
                    // Parse out the user
                    username = input.Substring(0, indexStartEmail).Trim();
                }
                else
                {
                    // There was no user
                    username = string.Empty;
                }

                // Parse out the email address without the "<"  and ">"
                indexStartEmail = indexStartEmail + 1;
                int emailLength = indexEndEmail - indexStartEmail;
                string emailAddress = input.Substring(indexStartEmail, emailLength).Trim();

                // There has been cases where there was no emailaddress between the < and >
                if (!string.IsNullOrEmpty(emailAddress))
                {
                    // If the username is quoted, MailAddress' constructor will remove them for us
                    return new RfcMailAddress(new MailAddress(emailAddress, username), input);
                }
            }

            // This might be on the form noreply@mail.eksperten.dk
            // Check if there is an email, if notm there is no need to try
            if (input.Contains("@"))
                return new RfcMailAddress(new MailAddress(input), input);
        }
        catch (FormatException)
        {
            // Sometimes invalid emails are sent, like sqlmap-user@sourceforge.net. (last period is illigal)
            //DefaultLogger.Log.LogError("RfcMailAddress: Improper mail address: \"" + input + "\"");
        }

        // It could be that the format used was simply a name
        // which is indeed valid according to the RFC
        // Example:
        // Eksperten mailrobot
        return new RfcMailAddress(input);
    }

    /// <summary>
    /// Parses input of the form<br/>
    /// <c>Eksperten mailrobot &lt;noreply@mail.eksperten.dk&gt;, ...</c><br/>
    /// to a list of RFCMailAddresses
    /// </summary>
    /// <param name="input">The input that is a comma-separated list of EmailAddresses to parse</param>
    /// <returns>A List of <seealso cref="RfcMailAddress"/> objects extracted from the <paramref name="input"/> parameter.</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="input"/> is <see langword="null"/></exception>
    internal static List<RfcMailAddress> ParseMailAddresses(string input)
    {
        if (input == null)
            throw new ArgumentNullException("input");

        List<RfcMailAddress> returner = new List<RfcMailAddress>();

        // MailAddresses are split by commas
        IEnumerable<string> mailAddresses = Utility.SplitStringWithCharNotInsideQuotes(input, ',');

        // Parse each of these
        foreach (string mailAddress in mailAddresses)
        {
            returner.Add(ParseMailAddress(mailAddress));
        }

        return returner;
    }
    #endregion
}

/// <summary>
/// Class that holds all headers for a message<br/>
/// Headers which are unknown the the parser will be held in the <see cref="UnknownHeaders"/> collection.<br/>
/// <br/>
/// This class cannot be instantiated from outside the library.
/// </summary>
/// <remarks>
/// See <a href="http://tools.ietf.org/html/rfc4021">RFC 4021</a> for a large list of headers.<br/>
/// </remarks>
public sealed class MessageHeader
{
    #region Properties
    /// <summary>
    /// All headers which were not recognized and explicitly dealt with.<br/>
    /// This should mostly be custom headers, which are marked as X-[name].<br/>
    /// <br/>
    /// This list will be empty if all headers were recognized and parsed.
    /// </summary>
    /// <remarks>
    /// If you as a user, feels that a header in this collection should
    /// be parsed, feel free to notify the developers.
    /// </remarks>
    public NameValueCollection UnknownHeaders { get { return _unknownHeaders; } private set { _unknownHeaders = value; } }
    private NameValueCollection _unknownHeaders;

    /// <summary>
    /// A human readable description of the body<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-Description header was present in the message.
    /// </summary>
    public string ContentDescription { get { return _contentDescription; } private set { _contentDescription = value; } }
    private string _contentDescription;

    /// <summary>
    /// ID of the content part (like an attached image). Used with MultiPart messages.<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-ID header field was present in the message.
    /// </summary>
    /// <see cref="MessageId">For an ID of the message</see>
    public string ContentId { get { return _contentId; } private set { _contentId = value; } }
    private string _contentId;

    /// <summary>
    /// Message keywords<br/>
    /// <br/>
    /// The list will be empty if no Keywords header was present in the message
    /// </summary>
    public List<string> Keywords { get { return _keywords; } private set { _keywords = value; } }
    private List<string> _keywords;

    /// <summary>
    /// A List of emails to people who wishes to be notified when some event happens.<br/>
    /// These events could be email:
    /// <list type="bullet">
    ///   <item>deletion</item>
    ///   <item>printing</item>
    ///   <item>received</item>
    ///   <item>...</item>
    /// </list>
    /// The list will be empty if no Disposition-Notification-To header was present in the message
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc3798">RFC 3798</a> for details</remarks>
    public List<RfcMailAddress> DispositionNotificationTo { get { return _dispositionNotificationTo; } private set { _dispositionNotificationTo = value; } }
    private List<RfcMailAddress> _dispositionNotificationTo;

    /// <summary>
    /// This is the Received headers. This tells the path that the email went.<br/>
    /// <br/>
    /// The list will be empty if no Received header was present in the message
    /// </summary>
    public List<Received> Received { get { return _recieved; } private set { _recieved = value; } }
    private List<Received> _recieved;

    /// <summary>
    /// Importance of this email.<br/>
    /// <br/>
    /// The importance level is set to normal, if no Importance header field was mentioned or it contained
    /// unknown information. This is the expected behavior according to the RFC.
    /// </summary>
    public MailPriority Importance { get { return _importance; } private set { _importance = value; } }
    private MailPriority _importance; 

    /// <summary>
    /// This header describes the Content encoding during transfer.<br/>
    /// <br/>
    /// If no Content-Transfer-Encoding header was present in the message, it is set
    /// to the default of <see cref="Header.ContentTransferEncoding.SevenBit">SevenBit</see> in accordance to the RFC.
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc2045#section-6">RFC 2045 section 6</a> for details</remarks>
    public ContentTransferEncoding ContentTransferEncoding { get { return _contentTransferEncoding; } private set { _contentTransferEncoding = value; } }
    private ContentTransferEncoding _contentTransferEncoding;

    /// <summary>
    /// Carbon Copy. This specifies who got a copy of the message.<br/>
    /// <br/>
    /// The list will be empty if no Cc header was present in the message
    /// </summary>
    public List<RfcMailAddress> Cc { get { return _cc; } private set { _cc = value; } }
    private List<RfcMailAddress> _cc;

    /// <summary>
    /// Blind Carbon Copy. This specifies who got a copy of the message, but others
    /// cannot see who these persons are.<br/>
    /// <br/>
    /// The list will be empty if no Received Bcc was present in the message
    /// </summary>
    public List<RfcMailAddress> Bcc { get { return _bcc; } private set { _bcc = value; } }
    private List<RfcMailAddress> _bcc;

    /// <summary>
    /// Specifies who this mail was for<br/>
    /// <br/>
    /// The list will be empty if no To header was present in the message
    /// </summary>
    public List<RfcMailAddress> To { get { return _to; } private set { _to = value; } }
    private List<RfcMailAddress> _to;

    /// <summary>
    /// Specifies who sent the email<br/>
    /// <br/>
    /// <see langword="null"/> if no From header field was present in the message
    /// </summary>
    public RfcMailAddress From { get { return _from; } private set { _from = value; } }
    private RfcMailAddress _from;

    /// <summary>
    /// Specifies who a reply to the message should be sent to<br/>
    /// <br/>
    /// <see langword="null"/> if no Reply-To header field was present in the message
    /// </summary>
    public RfcMailAddress ReplyTo { get { return _replyTo; } private set { _replyTo = value; } }
    private RfcMailAddress _replyTo;

    /// <summary>
    /// The message identifier(s) of the original message(s) to which the
    /// current message is a reply.<br/>
    /// <br/>
    /// The list will be empty if no In-Reply-To header was present in the message
    /// </summary>
    public List<string> InReplyTo { get { return _inReplyTo; } private set { _inReplyTo = value; } }
    private List<string> _inReplyTo;

    /// <summary>
    /// The message identifier(s) of other message(s) to which the current
    /// message is related to.<br/>
    /// <br/>
    /// The list will be empty if no References header was present in the message
    /// </summary>
    public List<string> References { get { return _references; } private set { _references = value; } }
    private List<string> _references;

    /// <summary>
    /// This is the sender of the email address.<br/>
    /// <br/>
    /// <see langword="null"/> if no Sender header field was present in the message
    /// </summary>
    /// <remarks>
    /// The RFC states that this field can be used if a secretary
    /// is sending an email for someone she is working for.
    /// The email here will then be the secretary's email, and
    /// the Reply-To field would hold the address of the person she works for.<br/>
    /// RFC states that if the Sender is the same as the From field,
    /// sender should not be included in the message.
    /// </remarks>
    public RfcMailAddress Sender { get { return _sender; } private set { _sender = value; } }
    private RfcMailAddress _sender;

    /// <summary>
    /// The Content-Type header field.<br/>
    /// <br/>
    /// If not set, the ContentType is created by the default "text/plain; charset=us-ascii" which is
    /// defined in <a href="http://tools.ietf.org/html/rfc2045#section-5.2">RFC 2045 section 5.2</a>.<br/>
    /// If set, the default is overridden.
    /// </summary>
    public ContentType ContentType { get { return _contentType; } private set { _contentType = value; } }
    private ContentType _contentType;

    /// <summary>
    /// Used to describe if a <see cref="MessagePart"/> is to be displayed or to be though of as an attachment.<br/>
    /// Also contains information about filename if such was sent.<br/>
    /// <br/>
    /// <see langword="null"/> if no Content-Disposition header field was present in the message
    /// </summary>
    public ContentDisposition ContentDisposition { get { return _contentDispisition; } private set { _contentDispisition = value; } }
    private ContentDisposition _contentDispisition;

    /// <summary>
    /// The Date when the email was sent.<br/>
    /// This is the raw value. <see cref="DateSent"/> for a parsed up <see cref="DateTime"/> value of this field.<br/>
    /// <br/>
    /// <see langword="DateTime.MinValue"/> if no Date header field was present in the message or if the date could not be parsed.
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc5322#section-3.6.1">RFC 5322 section 3.6.1</a> for more details</remarks>
    public string Date { get { return _date; } private set { _date = value; } }
    private string _date;

    /// <summary>
    /// The Date when the email was sent.<br/>
    /// This is the parsed equivalent of <see cref="Date"/>.<br/>
    /// Notice that the <see cref="TimeZone"/> of the <see cref="DateTime"/> object is in UTC and has NOT been converted
    /// to local <see cref="TimeZone"/>.
    /// </summary>
    /// <remarks>See <a href="http://tools.ietf.org/html/rfc5322#section-3.6.1">RFC 5322 section 3.6.1</a> for more details</remarks>
    public DateTime DateSent { get { return _dateSent; } private set { _dateSent = value; } }
    private DateTime _dateSent;

    /// <summary>
    /// An ID of the message that is SUPPOSED to be in every message according to the RFC.<br/>
    /// The ID is unique.<br/>
    /// <br/>
    /// <see langword="null"/> if no Message-ID header field was present in the message
    /// </summary>
    public string MessageId { get { return _messageId; } private set { _messageId = value; } }
    private string _messageId;

    /// <summary>
    /// The Mime Version.<br/>
    /// This field will almost always show 1.0<br/>
    /// <br/>
    /// <see langword="null"/> if no Mime-Version header field was present in the message
    /// </summary>
    public string MimeVersion { get { return _mimeVersion; } private set { _mimeVersion = value; } }
    private string _mimeVersion;

    /// <summary>
    /// A single <see cref="RfcMailAddress"/> with no username inside.<br/>
    /// This is a trace header field, that should be in all messages.<br/>
    /// Replies should be sent to this address.<br/>
    /// <br/>
    /// <see langword="null"/> if no Return-Path header field was present in the message
    /// </summary>
    public RfcMailAddress ReturnPath { get { return _returnPath; } private set { _returnPath = value; } }
    public RfcMailAddress _returnPath;

    /// <summary>
    /// The subject line of the message in decoded, one line state.<br/>
    /// This should be in all messages.<br/>
    /// <br/>
    /// <see langword="null"/> if no Subject header field was present in the message
    /// </summary>
    public string Subject { get { return _subject; } private set { _subject = value; } }
    private string _subject;
    #endregion

    /// <summary>
    /// Parses a <see cref="NameValueCollection"/> to a MessageHeader
    /// </summary>
    /// <param name="headers">The collection that should be traversed and parsed</param>
    /// <returns>A valid MessageHeader object</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headers"/> is <see langword="null"/></exception>
    internal MessageHeader(NameValueCollection headers)
    {
        if (headers == null)
            throw new ArgumentNullException("headers");

        // Create empty lists as defaults. We do not like null values
        // List with an initial capacity set to zero will be replaced
        // when a corrosponding header is found
        To = new List<RfcMailAddress>(0);
        Cc = new List<RfcMailAddress>(0);
        Bcc = new List<RfcMailAddress>(0);
        Received = new List<Received>();
        Keywords = new List<string>();
        InReplyTo = new List<string>(0);
        References = new List<string>(0);
        DispositionNotificationTo = new List<RfcMailAddress>();
        UnknownHeaders = new NameValueCollection();

        // Default importancetype is Normal (assumed if not set)
        Importance = MailPriority.Normal;

        // 7BIT is the default ContentTransferEncoding (assumed if not set)
        ContentTransferEncoding = ContentTransferEncoding.SevenBit;

        // text/plain; charset=us-ascii is the default ContentType
        ContentType = new ContentType("text/plain; charset=us-ascii");

        // Now parse the actual headers
        ParseHeaders(headers);
    }

    /// <summary>
    /// Parses a <see cref="NameValueCollection"/> to a <see cref="MessageHeader"/>
    /// </summary>
    /// <param name="headers">The collection that should be traversed and parsed</param>
    /// <returns>A valid <see cref="MessageHeader"/> object</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="headers"/> is <see langword="null"/></exception>
    private void ParseHeaders(NameValueCollection headers)
    {
        if (headers == null)
            throw new ArgumentNullException("headers");

        // Now begin to parse the header values
        foreach (string headerName in headers.Keys)
        {
            string[] headerValues = headers.GetValues(headerName);
            if (headerValues != null)
            {
                foreach (string headerValue in headerValues)
                {
                    ParseHeader(headerName, headerValue);
                }
            }
        }
    }

    #region Header fields parsing
    /// <summary>
    /// Parses a single header and sets member variables according to it.
    /// </summary>
    /// <param name="headerName">The name of the header</param>
    /// <param name="headerValue">The value of the header in unfolded state (only one line)</param>
    /// <exception cref="ArgumentNullException">If <paramref name="headerName"/> or <paramref name="headerValue"/> is <see langword="null"/></exception>
    private void ParseHeader(string headerName, string headerValue)
    {
        if (headerName == null)
            throw new ArgumentNullException("headerName");

        if (headerValue == null)
            throw new ArgumentNullException("headerValue");

        switch (headerName.ToUpperInvariant())
        {
            // See http://tools.ietf.org/html/rfc5322#section-3.6.3
            case "TO":
                To = RfcMailAddress.ParseMailAddresses(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.3
            case "CC":
                Cc = RfcMailAddress.ParseMailAddresses(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.3
            case "BCC":
                Bcc = RfcMailAddress.ParseMailAddresses(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.2
            case "FROM":
                // There is only one MailAddress in the from field
                From = RfcMailAddress.ParseMailAddress(headerValue);
                break;

            // http://tools.ietf.org/html/rfc5322#section-3.6.2
            // The implementation here might be wrong
            case "REPLY-TO":
                // This field may actually be a list of addresses, but no
                // such case has been encountered
                ReplyTo = RfcMailAddress.ParseMailAddress(headerValue);
                break;

            // http://tools.ietf.org/html/rfc5322#section-3.6.2
            case "SENDER":
                Sender = RfcMailAddress.ParseMailAddress(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.5
            // RFC 5322:
            // The "Keywords:" field contains a comma-separated list of one or more
            // words or quoted-strings.
            // The field are intended to have only human-readable content
            // with information about the message
            case "KEYWORDS":
                string[] keywordsTemp = headerValue.Split(',');
                foreach (string keyword in keywordsTemp)
                {
                    // Remove the quotes if there is any
                    Keywords.Add(Utility.RemoveQuotesIfAny(keyword.Trim()));
                }
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.7
            case "RECEIVED":
                // Simply add the value to the list
                Received.Add(new Received(headerValue.Trim()));
                break;

            case "IMPORTANCE":
                Importance = HeaderFieldParser.ParseImportance(headerValue.Trim());
                break;

            // See http://tools.ietf.org/html/rfc3798#section-2.1
            case "DISPOSITION-NOTIFICATION-TO":
                DispositionNotificationTo = RfcMailAddress.ParseMailAddresses(headerValue);
                break;

            case "MIME-VERSION":
                MimeVersion = headerValue.Trim();
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.5
            case "SUBJECT":
                Subject = EncodedWord.Decode(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.7
            case "RETURN-PATH":
                // Return-paths does not include a username, but we 
                // may still use the address parser 
                ReturnPath = RfcMailAddress.ParseMailAddress(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.4
            // Example Message-ID
            // <33cdd74d6b89ab2250ecd75b40a41405@nfs.eksperten.dk>
            case "MESSAGE-ID":
                MessageId = HeaderFieldParser.ParseId(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.4
            case "IN-REPLY-TO":
                InReplyTo = HeaderFieldParser.ParseMultipleIDs(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.4
            case "REFERENCES":
                References = HeaderFieldParser.ParseMultipleIDs(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc5322#section-3.6.1))
            case "DATE":
                Date = headerValue.Trim();
                DateSent = Rfc2822DateTime.StringToDate(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc2045#section-6
            // See ContentTransferEncoding class for more details
            case "CONTENT-TRANSFER-ENCODING":
                ContentTransferEncoding = HeaderFieldParser.ParseContentTransferEncoding(headerValue.Trim());
                break;

            // See http://tools.ietf.org/html/rfc2045#section-8
            case "CONTENT-DESCRIPTION":
                // Human description of for example a file. Can be encoded
                ContentDescription = EncodedWord.Decode(headerValue.Trim());
                break;

            // See http://tools.ietf.org/html/rfc2045#section-5.1
            // Example: Content-type: text/plain; charset="us-ascii"
            case "CONTENT-TYPE":
                ContentType = HeaderFieldParser.ParseContentType(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc2183
            case "CONTENT-DISPOSITION":
                ContentDisposition = HeaderFieldParser.ParseContentDisposition(headerValue);
                break;

            // See http://tools.ietf.org/html/rfc2045#section-7
            // Example: <foo4*foo1@bar.net>
            case "CONTENT-ID":
                ContentId = HeaderFieldParser.ParseId(headerValue);
                break;

            default:
                // This is an unknown header

                // Custom headers are allowed. That means headers
                // that are not mentionen in the RFC.
                // Such headers start with the letter "X"
                // We do not have any special parsing of such

                // Add it to unknown headers
                UnknownHeaders.Add(headerName, headerValue);
                break;
        }
    }
    #endregion
}

/// <summary>
/// This is the root of the email tree structure.<br/>
/// <see cref="Mime.MessagePart"/> for a description about the structure.<br/>
/// <br/>
/// A Message (this class) contains the headers of an email message such as:
/// <code>
///  - To
///  - From
///  - Subject
///  - Content-Type
///  - Message-ID
/// </code>
/// which are located in the <see cref="Headers"/> property.<br/>
/// <br/>
/// Use the <see cref="Message.MessagePart"/> property to find the actual content of the email message.
/// </summary>
/// <example>
/// Examples are available on the <a href="http://hpop.sourceforge.net/">project homepage</a>.
/// </example>
public class Message
{
    #region Public properties
    /// <summary>
    /// Headers of the Message.
    /// </summary>
    public MessageHeader Headers { get { return _headers; } private set { _headers = value; } }
    private MessageHeader _headers;

    /// <summary>
    /// This is the body of the email Message.<br/>
    /// <br/>
    /// If the body was parsed for this Message, this property will never be <see langword="null"/>.
    /// </summary>
    public MessagePart MessagePart { get { return _messagePart; } private set { _messagePart = value; } }
    private MessagePart _messagePart;

    /// <summary>
    /// The raw content from which this message has been constructed.<br/>
    /// These bytes can be persisted and later used to recreate the Message.
    /// </summary>
    public byte[] RawMessage { get { return _rawMessage; } private set { _rawMessage = value; } }
    private byte[] _rawMessage;
    #endregion

    #region Constructors
    /// <summary>
    /// Convenience constructor for <see cref="Mime.Message(byte[], bool)"/>.<br/>
    /// <br/>
    /// Creates a message from a byte array. The full message including its body is parsed.
    /// </summary>
    /// <param name="rawMessageContent">The byte array which is the message contents to parse</param>
    public Message(byte[] rawMessageContent)
        : this(rawMessageContent, true)
    {
    }

    /// <summary>
    /// Constructs a message from a byte array.<br/>
    /// <br/>
    /// The headers are always parsed, but if <paramref name="parseBody"/> is <see langword="false"/>, the body is not parsed.
    /// </summary>
    /// <param name="rawMessageContent">The byte array which is the message contents to parse</param>
    /// <param name="parseBody">
    /// <see langword="true"/> if the body should be parsed,
    /// <see langword="false"/> if only headers should be parsed out of the <paramref name="rawMessageContent"/> byte array
    /// </param>
    public Message(byte[] rawMessageContent, bool parseBody)
    {
        RawMessage = rawMessageContent;

        // Find the headers and the body parts of the byte array
        MessageHeader headersTemp;
        byte[] body;
        HeaderExtractor.ExtractHeadersAndBody(rawMessageContent, out headersTemp, out body);

        // Set the Headers property
        Headers = headersTemp;

        // Should we also parse the body?
        if (parseBody)
        {
            // Parse the body into a MessagePart
            MessagePart = new MessagePart(body, Headers);
        }
    }
    #endregion

    /// <summary>
    /// This method will convert this <see cref="Message"/> into a <see cref="MailMessage"/> equivalent.<br/>
    /// The returned <see cref="MailMessage"/> can be used with <see cref="System.Net.Mail.SmtpClient"/> to forward the email.<br/>
    /// <br/>
    /// You should be aware of the following about this method:
    /// <list type="bullet">
    /// <item>
    ///    All sender and receiver mail addresses are set.
    ///    If you send this email using a <see cref="System.Net.Mail.SmtpClient"/> then all
    ///    receivers in To, From, Cc and Bcc will receive the email once again.
    /// </item>
    /// <item>
    ///    If you view the source code of this Message and looks at the source code of the forwarded
    ///    <see cref="MailMessage"/> returned by this method, you will notice that the source codes are not the same.
    ///    The content that is presented by a mail client reading the forwarded <see cref="MailMessage"/> should be the
    ///    same as the original, though.
    /// </item>
    /// <item>
    ///    Content-Disposition headers will not be copied to the <see cref="MailMessage"/>.
    ///    It is simply not possible to set these on Attachments.
    /// </item>
    /// <item>
    ///    HTML content will be treated as the preferred view for the <see cref="MailMessage.Body"/>. Plain text content will be used for the
    ///    <see cref="MailMessage.Body"/> when HTML is not available.
    /// </item>
    /// </list>
    /// </summary>
    /// <returns>A <see cref="MailMessage"/> object that contains the same information that this Message does</returns>
    public MailMessage ToMailMessage()
    {
        // Construct an empty MailMessage to which we will gradually build up to look like the current Message object (this)
        MailMessage message = new MailMessage();

        message.Subject = Headers.Subject;

        // We here set the encoding to be UTF-8
        // We cannot determine what the encoding of the subject was at this point.
        // But since we know that strings in .NET is stored in UTF, we can
        // use UTF-8 to decode the subject into bytes
        message.SubjectEncoding = Encoding.UTF8;

        // The HTML version should take precedent over the plain text if it is available
        MessagePart preferredVersion = FindFirstHtmlVersion();
        if (preferredVersion != null)
        {
            // Make sure that the IsBodyHtml property is being set correctly for our content
            message.IsBodyHtml = true;
        }
        else
        {
            // otherwise use the first plain text version as the body, if it exists
            preferredVersion = FindFirstPlainTextVersion();
        }

        if (preferredVersion != null)
        {
            message.Body = preferredVersion.GetBodyAsText();
            message.BodyEncoding = preferredVersion.BodyEncoding;
        }

        // Add body and alternative views (html and such) to the message
        IEnumerable<MessagePart> textVersions = FindAllTextVersions();
        foreach (MessagePart textVersion in textVersions)
        {
            // The textVersions also contain the preferred version, therefore
            // we should skip that one
            if (textVersion == preferredVersion)
                continue;

            MemoryStream stream = new MemoryStream(textVersion.Body);
            AlternateView alternative = new AlternateView(stream);
            alternative.ContentId = textVersion.ContentId;
            alternative.ContentType = textVersion.ContentType;
            message.AlternateViews.Add(alternative);
        }

        // Add attachments to the message
        IEnumerable<MessagePart> attachments = FindAllAttachments();
        foreach (MessagePart attachmentMessagePart in attachments)
        {
            MemoryStream stream = new MemoryStream(attachmentMessagePart.Body);
            Attachment attachment = new Attachment(stream, attachmentMessagePart.ContentType);
            attachment.ContentId = attachmentMessagePart.ContentId;
            message.Attachments.Add(attachment);
        }

        if (Headers.From != null && Headers.From.HasValidMailAddress)
            message.From = Headers.From.MailAddress;

        if (Headers.ReplyTo != null && Headers.ReplyTo.HasValidMailAddress)
            message.ReplyTo = Headers.ReplyTo.MailAddress;

        if (Headers.Sender != null && Headers.Sender.HasValidMailAddress)
            message.Sender = Headers.Sender.MailAddress;

        foreach (RfcMailAddress to in Headers.To)
        {
            if (to.HasValidMailAddress)
                message.To.Add(to.MailAddress);
        }

        foreach (RfcMailAddress cc in Headers.Cc)
        {
            if (cc.HasValidMailAddress)
                message.CC.Add(cc.MailAddress);
        }

        foreach (RfcMailAddress bcc in Headers.Bcc)
        {
            if (bcc.HasValidMailAddress)
                message.Bcc.Add(bcc.MailAddress);
        }

        return message;
    }

    #region MessagePart Searching Methods

    /// <summary>
    /// Finds the first text/plain <see cref="MessagePart"/> in this message.<br/>
    /// This is a convenience method - it simply propagates the call to <see cref="FindFirstMessagePartWithMediaType"/>.<br/>
    /// <br/>
    /// If no text/plain version is found, <see langword="null"/> is returned.
    /// </summary>
    /// <returns>
    /// <see cref="MessagePart"/> which has a MediaType of text/plain or <see langword="null"/>
    /// if such <see cref="MessagePart"/> could not be found.
    /// </returns>
    public MessagePart FindFirstPlainTextVersion()
    {
        return FindFirstMessagePartWithMediaType("text/plain");
    }

    /// <summary>
    /// Finds the first text/html <see cref="MessagePart"/> in this message.<br/>
    /// This is a convenience method - it simply propagates the call to <see cref="FindFirstMessagePartWithMediaType"/>.<br/>
    /// <br/>
    /// If no text/html version is found, <see langword="null"/> is returned.
    /// </summary>
    /// <returns>
    /// <see cref="MessagePart"/> which has a MediaType of text/html or <see langword="null"/>
    /// if such <see cref="MessagePart"/> could not be found.
    /// </returns>
    public MessagePart FindFirstHtmlVersion()
    {
        return FindFirstMessagePartWithMediaType("text/html");
    }

    /// <summary>
    /// Finds all the <see cref="MessagePart"/>'s which contains a text version.<br/>
    /// <br/>
    /// <see cref="Mime.MessagePart.IsText"/> for MessageParts which are considered to be text versions.<br/>
    /// <br/>
    /// Examples of MessageParts media types are:
    /// <list type="bullet">
    ///    <item>text/plain</item>
    ///    <item>text/html</item>
    ///    <item>text/xml</item>
    /// </list>
    /// </summary>
    /// <returns>A List of MessageParts where each part is a text version</returns>
    public List<MessagePart> FindAllTextVersions()
    {
        return new TextVersionFinder().VisitMessage(this);
    }

    /// <summary>
    /// Finds all the <see cref="MessagePart"/>'s which are attachments to this message.<br/>
    /// <br/>
    /// <see cref="Mime.MessagePart.IsAttachment"/> for MessageParts which are considered to be attachments.
    /// </summary>
    /// <returns>A List of MessageParts where each is considered an attachment</returns>
    public List<MessagePart> FindAllAttachments()
    {
        return new AttachmentFinder().VisitMessage(this);
    }

    /// <summary>
    /// Finds the first <see cref="MessagePart"/> in the <see cref="Message"/> hierarchy with the given MediaType.<br/>
    /// <br/>
    /// The search in the hierarchy is a depth-first traversal.
    /// </summary>
    /// <param name="mediaType">The MediaType to search for. Case is ignored.</param>
    /// <returns>
    /// A <see cref="MessagePart"/> with the given MediaType or <see langword="null"/> if no such <see cref="MessagePart"/> was found
    /// </returns>
    public MessagePart FindFirstMessagePartWithMediaType(string mediaType)
    {
        return new FindFirstMessagePartWithMediaType().VisitMessage(this, mediaType);
    }

    /// <summary>
    /// Finds all the <see cref="MessagePart"/>s in the <see cref="Message"/> hierarchy with the given MediaType.
    /// </summary>
    /// <param name="mediaType">The MediaType to search for. Case is ignored.</param>
    /// <returns>
    /// A List of <see cref="MessagePart"/>s with the given MediaType.<br/>
    /// The List might be empty if no such <see cref="MessagePart"/>s were found.<br/>
    /// The order of the elements in the list is the order which they are found using
    /// a depth first traversal of the <see cref="Message"/> hierarchy.
    /// </returns>
    public List<MessagePart> FindAllMessagePartsWithMediaType(string mediaType)
    {
        return new FindAllMessagePartsWithMediaType().VisitMessage(this, mediaType);
    }

    #endregion

    #region Message Persistence

    /// <summary>
    /// Save this <see cref="Message"/> to a file.<br/>
    /// <br/>
    /// Can be loaded at a later time using the <see cref="Load(FileInfo)"/> method.
    /// </summary>
    /// <param name="file">The File location to save the <see cref="Message"/> to. Existent files will be overwritten.</param>
    /// <exception cref="ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
    /// <exception>Other exceptions relevant to using a <see cref="FileStream"/> might be thrown as well</exception>
    public void Save(FileInfo file)
    {
        if (file == null)
            throw new ArgumentNullException("file");

        using (FileStream stream = new FileStream(file.FullName, FileMode.OpenOrCreate))
        {
            Save(stream);
        }
    }

    /// <summary>
    /// Save this <see cref="Message"/> to a stream.<br/>
    /// </summary>
    /// <param name="messageStream">The stream to write to</param>
    /// <exception cref="ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
    /// <exception>Other exceptions relevant to <see cref="Stream.Write"/> might be thrown as well</exception>
    public void Save(Stream messageStream)
    {
        if (messageStream == null)
            throw new ArgumentNullException("messageStream");

        messageStream.Write(RawMessage, 0, RawMessage.Length);
    }

    /// <summary>
    /// Loads a <see cref="Message"/> from a file containing a raw email.
    /// </summary>
    /// <param name="file">The File location to load the <see cref="Message"/> from. The file must exist.</param>
    /// <exception cref="ArgumentNullException">If <paramref name="file"/> is <see langword="null"/></exception>
    /// <exception cref="FileNotFoundException">If <paramref name="file"/> does not exist</exception>
    /// <exception>Other exceptions relevant to a <see cref="FileStream"/> might be thrown as well</exception>
    /// <returns>A <see cref="Message"/> with the content loaded from the <paramref name="file"/></returns>
    public static Message Load(FileInfo file)
    {
        if (file == null)
            throw new ArgumentNullException("file");

        if (!file.Exists)
            throw new FileNotFoundException("Cannot load message from non-existent file", file.FullName);

        using (FileStream stream = new FileStream(file.FullName, FileMode.Open))
        {
            return Load(stream);
        }
    }


    /// <summary>
    /// Loads a <see cref="Message"/> from a <see cref="Stream"/> containing a raw email.
    /// </summary>
    /// <param name="messageStream">The <see cref="Stream"/> from which to load the raw <see cref="Message"/></param>
    /// <exception cref="ArgumentNullException">If <paramref name="messageStream"/> is <see langword="null"/></exception>
    /// <exception>Other exceptions relevant to <see cref="Stream.Read"/> might be thrown as well</exception>
    /// <returns>A <see cref="Message"/> with the content loaded from the <paramref name="messageStream"/></returns>
    public static Message Load(Stream messageStream)
    {
        if (messageStream == null)
            throw new ArgumentNullException("messageStream");

        using (MemoryStream outStream = new MemoryStream())
        {
#if DOTNET4
				// TODO: Enable using native v4 framework methods when support is formally added.
				messageStream.CopyTo(outStream);
#else
            int bytesRead;
            byte[] buffer = new byte[4096];

            while ((bytesRead = messageStream.Read(buffer, 0, 4096)) > 0)
            {
                outStream.Write(buffer, 0, bytesRead);
            }
#endif
            byte[] content = outStream.ToArray();

            return new Message(content);
        }
    }
    #endregion
}

/// <summary>
/// Implements the CRAM-MD5 algorithm as specified in <a href="http://tools.ietf.org/html/rfc2195">RFC 2195</a>.
/// </summary>
internal static class CramMd5
{
    /// <summary>
    /// Defined by <a href="http://tools.ietf.org/html/rfc2104#section-2">RFC 2104</a>
    /// Is a 64 byte array with all entries set to 0x36.
    /// </summary>
    private static readonly byte[] ipad;

    /// <summary>
    /// Defined by <a href="http://tools.ietf.org/html/rfc2104#section-2">RFC 2104</a>
    /// Is a 64 byte array with all entries set to 0x5C.
    /// </summary>
    private static readonly byte[] opad;

    /// <summary>
    /// Initializes the static fields
    /// </summary>
    static CramMd5()
    {
        ipad = new byte[64];
        opad = new byte[64];
        for (int i = 0; i < ipad.Length; i++)
        {
            ipad[i] = 0x36;
            opad[i] = 0x5C;
        }
    }

    /// <summary>
    /// Computes the digest needed to login to a server using CRAM-MD5.<br/>
    /// <br/>
    /// This computes:<br/>
    /// MD5((password XOR opad), MD5((password XOR ipad), challenge))
    /// </summary>
    /// <param name="username">The username of the user who wants to log in</param>
    /// <param name="password">The password for the <paramref name="username"/></param>
    /// <param name="challenge">
    /// The challenge received from the server when telling it CRAM-MD5 authenticated is wanted.
    /// Is a base64 encoded string.
    /// </param>
    /// <returns>The response to the challenge, which the server can validate and log in the user if correct</returns>
    /// <exception cref="ArgumentNullException">
    /// If <paramref name="username"/>, 
    /// <paramref name="password"/> or 
    /// <paramref name="challenge"/> is <see langword="null"/>
    /// </exception>
    internal static string ComputeDigest(string username, string password, string challenge)
    {
        if (username == null)
            throw new ArgumentNullException("username");

        if (password == null)
            throw new ArgumentNullException("password");

        if (challenge == null)
            throw new ArgumentNullException("challenge");

        // Get the password bytes
        byte[] passwordBytes = GetSharedSecretInBytes(password);

        // The challenge is encoded in base64
        byte[] challengeBytes = Convert.FromBase64String(challenge);

        // Now XOR the password with the opad and ipad magic bytes
        byte[] passwordOpad = Xor(passwordBytes, opad);
        byte[] passwordIpad = Xor(passwordBytes, ipad);

        // Now do the computation: MD5((password XOR opad), MD5((password XOR ipad), challenge))
        byte[] digestValue = Hash(Concatenate(passwordOpad, Hash(Concatenate(passwordIpad, challengeBytes))));

        // Convert the bytes to a hex string
        // BitConverter writes the output as AF-B3-...
        // We need lower-case output without "-"
        string hex = BitConverter.ToString(digestValue).Replace("-", "").ToLowerInvariant();

        // Include the username in the resulting base64 encoded response
        return Convert.ToBase64String(Encoding.ASCII.GetBytes(username + " " + hex));
    }

    /// <summary>
    /// Hashes a byte array using the MD5 algorithm.
    /// </summary>
    /// <param name="toHash">The byte array to hash</param>
    /// <returns>The result of hashing the <paramref name="toHash"/> bytes with the MD5 algorithm</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toHash"/> is <see langword="null"/></exception>
    private static byte[] Hash(byte[] toHash)
    {
        if (toHash == null)
            throw new ArgumentNullException("toHash");

        using (MD5 md5 = new MD5CryptoServiceProvider())
        {
            return md5.ComputeHash(toHash);
        }
    }

    /// <summary>
    /// Concatenates two byte arrays into one
    /// </summary>
    /// <param name="one">The first byte array</param>
    /// <param name="two">The second byte array</param>
    /// <returns>A concatenated byte array</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="one"/> or <paramref name="two"/> is <see langword="null"/></exception>
    private static byte[] Concatenate(byte[] one, byte[] two)
    {
        if (one == null)
            throw new ArgumentNullException("one");

        if (two == null)
            throw new ArgumentNullException("two");

        // Create space for both byte arrays in one
        byte[] concatenated = new byte[one.Length + two.Length];

        // Copy the first one over
        Buffer.BlockCopy(one, 0, concatenated, 0, one.Length);

        // Copy the second one over
        Buffer.BlockCopy(two, 0, concatenated, one.Length, two.Length);

        // Return result
        return concatenated;
    }

    /// <summary>
    /// XORs a byte array with another.<br/>
    /// Each byte in <paramref name="toXor"/> is XORed with the corresponding byte
    /// in <paramref name="toXorWith"/> until the end of <paramref name="toXor"/> is encountered.
    /// </summary>
    /// <param name="toXor">The byte array to XOR</param>
    /// <param name="toXorWith">The byte array to XOR with</param>
    /// <returns>A new byte array with the XORed results</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="toXor"/> or <paramref name="toXorWith"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentException">If the lengths of the arrays are not equal</exception>
    private static byte[] Xor(byte[] toXor, byte[] toXorWith)
    {
        if (toXor == null)
            throw new ArgumentNullException("toXor");

        if (toXorWith == null)
            throw new ArgumentNullException("toXorWith");

        if (toXor.Length != toXorWith.Length)
            throw new ArgumentException("The lengths of the arrays must be equal");

        // Create a new array to store results in
        byte[] xored = new byte[toXor.Length];

        // XOR each individual byte.
        for (int i = 0; i < toXor.Length; i++)
        {
            xored[i] = toXor[i];
            xored[i] ^= toXorWith[i];
        }

        // Return result
        return xored;
    }
    /// <summary>
    /// This method is responsible to generate the byte array needed
    /// from the shared secret - the password.<br/>
    /// 
    /// RFC 2195 says:<br/>
    /// The shared secret is null-padded to a length of 64 bytes. If the
    /// shared secret is longer than 64 bytes, the MD5 digest of the
    /// shared secret is used as a 16 byte input to the keyed MD5
    /// calculation.
    /// </summary>
    /// <param name="password">This is the shared secret</param>
    /// <returns>The 64 bytes that is to be used from the shared secret</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="password"/> is <see langword="null"/></exception>
    private static byte[] GetSharedSecretInBytes(string password)
    {
        if (password == null)
            throw new ArgumentNullException("password");

        // Get the password in bytes
        byte[] passwordBytes = Encoding.ASCII.GetBytes(password);

        // If the length is larger than 64, we need to
        if (passwordBytes.Length > 64)
        {
            passwordBytes = new MD5CryptoServiceProvider().ComputeHash(passwordBytes);
        }

        if (passwordBytes.Length != 64)
        {
            byte[] returner = new byte[64];
            for (int i = 0; i < passwordBytes.Length; i++)
            {
                returner[i] = passwordBytes[i];
            }
            return returner;
        }

        return passwordBytes;
    }
}

/// <summary>
/// Class for computing the digest needed when issuing the APOP command to a POP3 server.
/// </summary>
internal static class Apop
{
    /// <summary>
    /// Create the digest for the APOP command so that the server can validate
    /// we know the password for some user.
    /// </summary>
    /// <param name="password">The password for the user</param>
    /// <param name="serverTimestamp">The timestamp advertised in the server greeting to the POP3 client</param>
    /// <returns>The password and timestamp hashed with the MD5 algorithm outputted as a HEX string</returns>
    public static string ComputeDigest(string password, string serverTimestamp)
    {
        if (password == null)
            throw new ArgumentNullException("password");

        if (serverTimestamp == null)
            throw new ArgumentNullException("serverTimestamp");

        // The APOP command authorizes itself by using the password together
        // with the server timestamp. This way the password is not transmitted
        // in clear text, and the server can still verify we have the password.
        byte[] digestToHash = Encoding.ASCII.GetBytes(serverTimestamp + password);

        using (MD5 md5 = new MD5CryptoServiceProvider())
        {
            // MD5 hash the digest
            byte[] result = md5.ComputeHash(digestToHash);

            // Convert the bytes to a hex string
            // BitConverter writes the output as AF-B3-...
            // We need lower-case output without "-"
            return BitConverter.ToString(result).Replace("-", "").ToLowerInvariant();
        }
    }
}

internal static class StreamUtility
{
    /// <summary>
    /// Read a line from the stream.
    /// A line is interpreted as all the bytes read until a CRLF or LF is encountered.<br/>
    /// CRLF pair or LF is not included in the string.
    /// </summary>
    /// <param name="stream">The stream from which the line is to be read</param>
    /// <returns>A line read from the stream returned as a byte array or <see langword="null"/> if no bytes were readable from the stream</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
    public static byte[] ReadLineAsBytes(Stream stream)
    {
        if (stream == null)
            throw new ArgumentNullException("stream");

        using (MemoryStream memoryStream = new MemoryStream())
        {
            while (true)
            {
                int justRead = stream.ReadByte();
                if (justRead == -1 && memoryStream.Length > 0)
                    break;

                // Check if we started at the end of the stream we read from
                // and we have not read anything from it yet
                if (justRead == -1 && memoryStream.Length == 0)
                    return null;

                char readChar = (char)justRead;

                // Do not write \r or \n
                if (readChar != '\r' && readChar != '\n')
                    memoryStream.WriteByte((byte)justRead);

                // Last point in CRLF pair
                if (readChar == '\n')
                    break;
            }

            return memoryStream.ToArray();
        }
    }

    /// <summary>
    /// Read a line from the stream. <see cref="ReadLineAsBytes"/> for more documentation.
    /// </summary>
    /// <param name="stream">The stream to read from</param>
    /// <returns>A line read from the stream or <see langword="null"/> if nothing could be read from the stream</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
    public static string ReadLineAsAscii(Stream stream)
    {
        byte[] readFromStream = ReadLineAsBytes(stream);
        return readFromStream != null ? Encoding.ASCII.GetString(readFromStream) : null;
    }
}

/// <summary>
/// Some of these states are defined by <a href="http://tools.ietf.org/html/rfc1939">RFC 1939</a>.<br/>
/// Which commands that are allowed in which state can be seen in the same RFC.<br/>
/// <br/>
/// Used to keep track of which state the <see cref="Pop3Client"/> is in.
/// </summary>
internal enum ConnectionState
{
    /// <summary>
    /// This is when the Pop3Client is not even connected to the server
    /// </summary>
    Disconnected,

    /// <summary>
    /// This is when the server is awaiting user credentials
    /// </summary>
    Authorization,

    /// <summary>
    /// This is when the server has been given the user credentials, and we are allowed
    /// to use commands specific to this users mail drop
    /// </summary>
    Transaction
}

/// <summary>
/// Describes the authentication method to use when authenticating towards a POP3 server.
/// </summary>
public enum AuthenticationMethod
{
    /// <summary>
    /// Authenticate using the UsernameAndPassword method.<br/>
    /// This will pass the username and password to the server in cleartext.<br/>
    /// <see cref="Apop"/> is more secure but might not be supported on a server.<br/>
    /// This method is not recommended. Use <see cref="Auto"/> instead.
    /// <br/>
    /// If SSL is used, there is no loss of security by using this authentication method.
    /// </summary>
    UsernameAndPassword,

    /// <summary>
    /// Authenticate using the Authenticated Post Office Protocol method, which is more secure then
    /// <see cref="UsernameAndPassword"/> since it is a request-response protocol where server checks if the
    ///  client knows a shared secret, which is the password, without the password itself being transmitted.<br/>
    /// This authentication method uses MD5 under its hood.<br/>
    /// <br/>
    /// This authentication method is not supported by many servers.<br/>
    /// Choose this option if you want maximum security.
    /// </summary>
    Apop,

    /// <summary>
    /// This is the recomended method to authenticate with.<br/>
    /// If <see cref="Apop"/> is supported by the server, <see cref="Apop"/> is used for authentication.<br/>
    /// If <see cref="Apop"/> is not supported, Auto will fall back to <see cref="UsernameAndPassword"/> authentication.
    /// </summary>
    Auto,

    /// <summary>
    /// Logs in the the POP3 server using CRAM-MD5 authentication scheme.<br/>
    /// This in essence uses the MD5 hashing algorithm on the user password and a server challenge.
    /// </summary>
    CramMd5
}

/// <summary>
/// POP3 compliant POP Client<br/>
/// <br/>	
/// If you want to override where logging is sent, look at <see cref="DefaultLogger"/>
/// </summary>
/// <example>
/// Examples are available on the <a href="http://hpop.sourceforge.net/">project homepage</a>.
/// </example>
public class Pop3Client : IDisposable
{
    #region Private member properties
    /// <summary>
    /// The stream used to communicate with the server
    /// </summary>
    private Stream Stream { get { return _stream; } set { _stream = value; } }
    private Stream _stream;

    /// <summary>
    /// This is the last response the server sent back when a command was issued to it
    /// </summary>
    private string LastServerResponse { get { return _lastServerResponse; } set { _lastServerResponse = value; } }
    private string _lastServerResponse;

    /// <summary>
    /// The APOP time stamp sent by the server in it's welcome message if APOP is supported.
    /// </summary>
    private string ApopTimeStamp { get { return _apopTimeStamp; } set { _apopTimeStamp = value; } }
    private string _apopTimeStamp;

    /// <summary>
    /// Describes what state the <see cref="Pop3Client"/> is in
    /// </summary>
    private ConnectionState State { get { return _state; } set { _state = value; } }
    private ConnectionState _state;
    #endregion

    #region Public member properties
    /// <summary>
    /// Tells whether the <see cref="Pop3Client"/> is connected to a POP server or not
    /// </summary>
    public bool Connected { get { return _connected; } private set { _connected = value; } }
    private bool _connected;

    /// <summary>
    /// Allows you to check if the server supports
    /// the <see cref="AuthenticationMethod.Apop"/> authentication method.<br/>
    /// <br/>
    /// This value is filled when the connect method has returned,
    /// as the server tells in its welcome message if APOP is supported.
    /// </summary>
    public bool ApopSupported { get { return _apopSupported; } private set { _apopSupported = value; } }
    private bool _apopSupported;
    #endregion

    #region Constructors
    /// <summary>
    /// Constructs a new Pop3Client for you to use.
    /// </summary>
    public Pop3Client()
    {
        SetInitialValues();
    }
    #endregion

    #region IDisposable implementation
    
    public void Dispose()
    {
        if (!_isDisposed)
        {
            try
            {
                Dispose(true);
            }
            finally
            {
                _isDisposed = true;
                GC.SuppressFinalize(this);
            }
        }
    }
    private bool _isDisposed=false;

    /// <summary>
    /// Disposes the <see cref="Pop3Client"/>.<br/>
    /// This is the implementation of the <see cref="IDisposable"/> interface.<br/>
    /// Sends the QUIT command to the server before closing the streams.
    /// </summary>
    /// <param name="disposing"><see langword="true"/> if managed and unmanaged code should be disposed, <see langword="false"/> if only managed code should be disposed</param>
    protected  void Dispose(bool disposing)
    {
        if (disposing && !_isDisposed)
        {
            if (Connected)
            {
                Disconnect();
            }
        }
    }
    
    protected void AssertDisposed()
    {
        if (_isDisposed)
        {
            string typeName = GetType().FullName;
            throw new ObjectDisposedException(typeName, String.Format(System.Globalization.CultureInfo.InvariantCulture, "Cannot access a disposed {0}.", typeName));
        }
    }

    #endregion

    #region Connection managing methods
    /// <summary>
    /// Connect to the server using user supplied stream
    /// </summary>
    /// <param name="stream">The stream used to communicate with the server</param>
    /// <exception cref="ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/></exception>
    public void Connect(Stream stream)
    {
        AssertDisposed();

        if (State != ConnectionState.Disconnected)
            throw new Exception("You cannot ask to connect to a POP3 server, when we are already connected to one. Disconnect first.");

        if (stream == null)
            throw new ArgumentNullException("stream");

        Stream = stream;

        // Fetch the server one-line welcome greeting
        string response = StreamUtility.ReadLineAsAscii(Stream);

        // Check if the response was an OK response
        try
        {
            // Assume we now need the user to supply credentials
            // If we do not connect correctly, Disconnect will set the
            // state to Disconnected
            // If this is not set, Disconnect will throw an exception
            State = ConnectionState.Authorization;

            IsOkResponse(response);
            ExtractApopTimestamp(response);
            Connected = true;
        }
        catch (Exception e)
        {
            // If not close down the connection and abort
            DisconnectStreams();

            //DefaultLogger.Log.LogError("Connect(): " + "Error with connection, maybe POP3 server not exist");
            //DefaultLogger.Log.LogDebug("Last response from server was: " + LastServerResponse);
            throw new Exception("Server is not available", e);
        }
    }

    /// <summary>
    /// Connects to a remote POP3 server using default timeouts of 60.000 milliseconds
    /// </summary>
    /// <param name="hostname">The <paramref name="hostname"/> of the POP3 server</param>
    /// <param name="port">The port of the POP3 server</param>
    /// <param name="useSsl"><see langword="true"/> if SSL should be used. <see langword="false"/> if plain TCP should be used.</param>
    /// <exception cref="PopServerNotAvailableException">If the server did not send an OK message when a connection was established</exception>
    /// <exception cref="PopServerNotFoundException">If it was not possible to connect to the server</exception>
    /// <exception cref="ArgumentNullException">If <paramref name="hostname"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentOutOfRangeException">If port is not in the range [<see cref="IPEndPoint.MinPort"/>, <see cref="IPEndPoint.MaxPort"/></exception>
    public void Connect(string hostname, int port, bool useSsl)
    {
        const int defaultTimeOut = 60000;
        Connect(hostname, port, useSsl, defaultTimeOut, defaultTimeOut, null);
    }

    /// <summary>
    /// Connects to a remote POP3 server
    /// </summary>
    /// <param name="hostname">The <paramref name="hostname"/> of the POP3 server</param>
    /// <param name="port">The port of the POP3 server</param>
    /// <param name="useSsl"><see langword="true"/> if SSL should be used. <see langword="false"/> if plain TCP should be used.</param>
    /// <param name="receiveTimeout">Timeout in milliseconds before a socket should time out from reading. Set to 0 or -1 to specify infinite timeout.</param>
    /// <param name="sendTimeout">Timeout in milliseconds before a socket should time out from sending. Set to 0 or -1 to specify infinite timeout.</param>
    /// <param name="certificateValidator">If you want to validate the certificate in a SSL connection, pass a reference to your validator. Supply <see langword="null"/> if default should be used.</param>
    /// <exception cref="PopServerNotAvailableException">If the server did not send an OK message when a connection was established</exception>
    /// <exception cref="PopServerNotFoundException">If it was not possible to connect to the server</exception>
    /// <exception cref="ArgumentNullException">If <paramref name="hostname"/> is <see langword="null"/></exception>
    /// <exception cref="ArgumentOutOfRangeException">If port is not in the range [<see cref="IPEndPoint.MinPort"/>, <see cref="IPEndPoint.MaxPort"/> or if any of the timeouts is less than -1.</exception>
    public void Connect(string hostname, int port, bool useSsl, int receiveTimeout, int sendTimeout, RemoteCertificateValidationCallback certificateValidator)
    {
        AssertDisposed();

        if (hostname == null)
            throw new ArgumentNullException("hostname");

        if (hostname.Length == 0)
            throw new ArgumentException("hostname cannot be empty", "hostname");

        if (port > IPEndPoint.MaxPort || port < IPEndPoint.MinPort)
            throw new ArgumentOutOfRangeException("port");

        if (receiveTimeout < -1)
            throw new ArgumentOutOfRangeException("receiveTimeout");

        if (sendTimeout < -1)
            throw new ArgumentOutOfRangeException("sendTimeout");

        if (State != ConnectionState.Disconnected)
            throw new Exception("You cannot ask to connect to a POP3 server, when we are already connected to one. Disconnect first.");

        TcpClient clientSocket = new TcpClient();
        clientSocket.ReceiveTimeout = receiveTimeout;
        clientSocket.SendTimeout = sendTimeout;

        try
        {
            clientSocket.Connect(hostname, port);
        }
        catch (SocketException e)
        {
            // Close the socket - we are not connected, so no need to close stream underneath
            clientSocket.Close();

            //DefaultLogger.Log.LogError("Connect(): " + e.Message);
            throw new Exception("Server not found", e);
        }

        Stream stream;
        if (useSsl)
        {
            // If we want to use SSL, open a new SSLStream on top of the open TCP stream.
            // We also want to close the TCP stream when the SSL stream is closed
            // If a validator was passed to us, use it.
            SslStream sslStream;
            if (certificateValidator == null)
            {
                sslStream = new SslStream(clientSocket.GetStream(), false);
            }
            else
            {
                sslStream = new SslStream(clientSocket.GetStream(), false, certificateValidator);
            }
            sslStream.ReadTimeout = receiveTimeout;
            sslStream.WriteTimeout = sendTimeout;

            // Authenticate the server
            sslStream.AuthenticateAsClient(hostname);

            stream = sslStream;
        }
        else
        {
            // If we do not want to use SSL, use plain TCP
            stream = clientSocket.GetStream();
        }

        // Now do the connect with the same stream being used to read and write to
        Connect(stream);
    }

    /// <summary>
    /// Disconnects from POP3 server.
    /// Sends the QUIT command before closing the connection, which deletes all the messages that was marked as such.
    /// </summary>
    public void Disconnect()
    {
        AssertDisposed();

        if (State == ConnectionState.Disconnected)
            throw new Exception("You cannot disconnect a connection which is already disconnected");

        try
        {
            SendCommand("QUIT");
        }
        finally
        {
            DisconnectStreams();
        }
    }
    #endregion

    #region Authentication methods
    /// <summary>
    /// Authenticates a user towards the POP server using <see cref="AuthenticationMethod.Auto"/>.<br/>
    /// If this authentication fails but you are sure that the username and password is correct, it might
    /// be that that the POP3 server is wrongly telling the client it supports <see cref="AuthenticationMethod.Apop"/>.
    /// You should try using <see cref="Authenticate(string, string, AuthenticationMethod)"/> while passing <see cref="AuthenticationMethod.UsernameAndPassword"/> to the method.
    /// </summary>
    /// <param name="username">The username</param>
    /// <param name="password">The user password</param>
    /// <exception cref="InvalidLoginException">If the user credentials was not accepted</exception>
    /// <exception cref="PopServerLockedException">If the server said the the mailbox was locked</exception>
    /// <exception cref="ArgumentNullException">If <paramref name="username"/> or <paramref name="password"/> is <see langword="null"/></exception>
    /// <exception cref="LoginDelayException">If the server rejects the login because of too recent logins</exception>
    public void Authenticate(string username, string password)
    {
        AssertDisposed();
        Authenticate(username, password, AuthenticationMethod.Auto);
    }

    /// <summary>
    /// Authenticates a user towards the POP server using some <see cref="AuthenticationMethod"/>.
    /// </summary>
    /// <param name="username">The username</param>
    /// <param name="password">The user password</param>
    /// <param name="authenticationMethod">The way that the client should authenticate towards the server</param>
    /// <exception cref="NotSupportedException">If <see cref="AuthenticationMethod.Apop"/> is used, but not supported by the server</exception>
    /// <exception cref="InvalidLoginException">If the user credentials was not accepted</exception>
    /// <exception cref="PopServerLockedException">If the server said the the mailbox was locked</exception>
    /// <exception cref="ArgumentNullException">If <paramref name="username"/> or <paramref name="password"/> is <see langword="null"/></exception>
    /// <exception cref="LoginDelayException">If the server rejects the login because of too recent logins</exception>
    public void Authenticate(string username, string password, AuthenticationMethod authenticationMethod)
    {
        AssertDisposed();

        if (username == null)
            throw new ArgumentNullException("username");

        if (password == null)
            throw new ArgumentNullException("password");

        if (State != ConnectionState.Authorization)
            throw new Exception("You have to be connected and not authorized when trying to authorize yourself");

        try
        {
            switch (authenticationMethod)
            {
                case AuthenticationMethod.UsernameAndPassword:
                    AuthenticateUsingUserAndPassword(username, password);
                    break;

                case AuthenticationMethod.Apop:
                    AuthenticateUsingApop(username, password);
                    break;

                case AuthenticationMethod.Auto:
                    if (ApopSupported)
                        AuthenticateUsingApop(username, password);
                    else
                        AuthenticateUsingUserAndPassword(username, password);
                    break;

                case AuthenticationMethod.CramMd5:
                    AuthenticateUsingCramMd5(username, password);
                    break;
            }
        }
        catch (Exception e)
        {
            //DefaultLogger.Log.LogError("Problem logging in using method " + authenticationMethod + ". Server response was: " + LastServerResponse);

            // Throw a more specific exception if special cases of failure is detected
            // using the response the server generated when the last command was sent
            CheckFailedLoginServerResponse(LastServerResponse, e);

            // If no special failure is detected, tell that the login credentials were wrong
            throw e;
        }

        // We are now authenticated and therefore we enter the transaction state
        State = ConnectionState.Transaction;
    }

    /// <summary>
    /// Authenticates a user towards the POP server using the USER and PASSWORD commands
    /// </summary>
    /// <param name="username">The username</param>
    /// <param name="password">The user password</param>
    /// <exception cref="PopServerException">If the server responded with -ERR</exception>
    private void AuthenticateUsingUserAndPassword(string username, string password)
    {
        SendCommand("USER " + username);
        SendCommand("PASS " + password);

        // Authentication was successful if no exceptions thrown before getting here
    }

    /// <summary>
    /// Authenticates a user towards the POP server using APOP
    /// </summary>
    /// <param name="username">The username</param>
    /// <param name="password">The user password</param>
    /// <exception cref="NotSupportedException">Thrown when the server does not support APOP</exception>
    /// <exception cref="PopServerException">If the server responded with -ERR</exception>
    private void AuthenticateUsingApop(string username, string password)
    {
        if (!ApopSupported)
            throw new NotSupportedException("APOP is not supported on this server");

        SendCommand("APOP " + username + " " + Apop.ComputeDigest(password, ApopTimeStamp));

        // Authentication was successful if no exceptions thrown before getting here
    }

    /// <summary>
    /// Authenticates using the CRAM-MD5 authentication method
    /// </summary>
    /// <param name="username">The username</param>
    /// <param name="password">The user password</param>
    /// <exception cref="NotSupportedException">Thrown when the server does not support AUTH CRAM-MD5</exception>
    /// <exception cref="InvalidLoginException">If the user credentials was not accepted</exception>
    /// <exception cref="PopServerLockedException">If the server said the the mailbox was locked</exception>
    /// <exception cref="LoginDelayException">If the server rejects the login because of too recent logins</exception>
    private void AuthenticateUsingCramMd5(string username, string password)
    {
        // Example of communication:
        // C: AUTH CRAM-MD5
        // S: + PDE4OTYuNjk3MTcwOTUyQHBvc3RvZmZpY2UucmVzdG9uLm1jaS5uZXQ+
        // C: dGltIGI5MTNhNjAyYzdlZGE3YTQ5NWI0ZTZlNzMzNGQzODkw
        // S: +OK CRAM authentication successful

        // Other example, where AUTH CRAM-MD5 is not supported
        // C: AUTH CRAM-MD5
        // S: -ERR Authentication method CRAM-MD5 not supported

        try
        {
            SendCommand("AUTH CRAM-MD5");
        }
        catch (Exception e)
        {
            // A PopServerException will be thrown if the server responds with a -ERR not supported
            throw new NotSupportedException("CRAM-MD5 authentication not supported", e);
        }

        // Fetch out the challenge from the server response
        string challenge = LastServerResponse.Substring(2);

        // Compute the challenge response
        string response = CramMd5.ComputeDigest(username, password, challenge);

        // Send the response to the server
        SendCommand(response);

        // Authentication was successful if no exceptions thrown before getting here
    }
    #endregion

    #region Public POP3 commands
    /// <summary>
    /// Get the number of messages on the server using a STAT command
    /// </summary>
    /// <returns>The message count on the server</returns>
    /// <exception cref="PopServerException">If the server did not accept the STAT command</exception>
    public int GetMessageCount()
    {
        AssertDisposed();

        if (State != ConnectionState.Transaction)
            throw new Exception("You cannot get the message count without authenticating yourself towards the server first");

        return SendCommandIntResponse("STAT", 1);
    }

    /// <summary>
    /// Marks the message with the given message number as deleted.<br/>
    /// <br/>
    /// The message will not be deleted until a QUIT command is sent to the server.<br/>
    /// This is done when you call <see cref="Disconnect()"/> or when the Pop3Client is <see cref="Dispose">Disposed</see>.
    /// </summary>
    /// <param name="messageNumber">
    /// The number of the message to be deleted. This message may not already have been deleted.<br/>
    /// The <paramref name="messageNumber"/> must be inside the range [1, messageCount]
    /// </param>
    /// <exception cref="PopServerException">If the server did not accept the delete command</exception>
    public void DeleteMessage(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("You cannot delete any messages without authenticating yourself towards the server first");

        SendCommand("DELE " + messageNumber);
    }

    /// <summary>
    /// Marks all messages as deleted.<br/>
    /// <br/>
    /// The messages will not be deleted until a QUIT command is sent to the server.<br/>
    /// This is done when you call <see cref="Disconnect()"/> or when the Pop3Client is <see cref="Dispose">Disposed</see>.<br/>
    /// The method assumes that no prior message has been marked as deleted, and is not valid to call if this is wrong.
    /// </summary>
    /// <exception cref="PopServerException">If the server did not accept one of the delete commands. All prior marked messages will still be marked.</exception>
    public void DeleteAllMessages()
    {
        AssertDisposed();

        int messageCount = GetMessageCount();

        for (int messageItem = messageCount; messageItem > 0; messageItem--)
        {
            DeleteMessage(messageItem);
        }
    }

    /// <summary>
    /// Keep server active by sending a NOOP command.<br/>
    /// This might keep the server from closing the connection due to inactivity.<br/>
    /// <br/>
    /// RFC:<br/>
    /// The POP3 server does nothing, it merely replies with a positive response.
    /// </summary>
    /// <exception cref="PopServerException">If the server did not accept the NOOP command</exception>
    public void NoOperation()
    {
        AssertDisposed();

        if (State != ConnectionState.Transaction)
            throw new Exception("You cannot use the NOOP command unless you are authenticated to the server");

        SendCommand("NOOP");
    }

    /// <summary>
    /// Send a reset command to the server.<br/>
    /// <br/>
    /// RFC:<br/>
    /// If any messages have been marked as deleted by the POP3
    /// server, they are unmarked. The POP3 server then replies
    /// with a positive response.
    /// </summary>
    /// <exception cref="PopServerException">If the server did not accept the RSET command</exception>
    public void Reset()
    {
        AssertDisposed();

        if (State != ConnectionState.Transaction)
            throw new Exception("You cannot use the RSET command unless you are authenticated to the server");

        SendCommand("RSET");
    }

    /// <summary>
    /// Get a unique ID for a single message.<br/>
    /// </summary>
    /// <param name="messageNumber">
    /// Message number, which may not be marked as deleted.<br/>
    /// The <paramref name="messageNumber"/> must be inside the range [1, messageCount]
    /// </param>
    /// <returns>The unique ID for the message</returns>
    /// <exception cref="PopServerException">If the server did not accept the UIDL command. This could happen if the <paramref name="messageNumber"/> does not exist</exception>
    public string GetMessageUid(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot get message ID, when the user has not been authenticated yet");

        // Example from RFC:
        //C: UIDL 2
        //S: +OK 2 QhdPYR:00WBw1Ph7x7

        SendCommand("UIDL " + messageNumber);

        // Parse out the unique ID
        return LastServerResponse.Split(' ')[2];
    }

    /// <summary>
    /// Gets a list of unique IDs for all messages.<br/>
    /// Messages marked as deleted are not listed.
    /// </summary>
    /// <returns>
    /// A list containing the unique IDs in sorted order from message number 1 and upwards.
    /// </returns>
    /// <exception cref="PopServerException">If the server did not accept the UIDL command</exception>
    public List<string> GetMessageUids()
    {
        AssertDisposed();

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot get message IDs, when the user has not been authenticated yet");

        // RFC Example:
        // C: UIDL
        // S: +OK
        // S: 1 whqtswO00WBw418f9t5JxYwZ
        // S: 2 QhdPYR:00WBw1Ph7x7
        // S: .      // this is the end

        SendCommand("UIDL");

        List<string> uids = new List<string>();

        string response;
        // Keep reading until multi-line ends with a "."
        while (!IsLastLineInMultiLineResponse(response = StreamUtility.ReadLineAsAscii(Stream)))
        {
            // Add the unique ID to the list
            uids.Add(response.Split(' ')[1]);
        }

        return uids;
    }

    /// <summary>
    /// Gets the size in bytes of a single message
    /// </summary>
    /// <param name="messageNumber">
    /// The number of a message which may not be a message marked as deleted.<br/>
    /// The <paramref name="messageNumber"/> must be inside the range [1, messageCount]
    /// </param>
    /// <returns>Size of the message</returns>
    /// <exception cref="PopServerException">If the server did not accept the LIST command</exception>
    public int GetMessageSize(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot get message size, when the user has not been authenticated yet");

        // RFC Example:
        // C: LIST 2
        // S: +OK 2 200
        return SendCommandIntResponse("LIST " + messageNumber, 2);
    }

    /// <summary>
    /// Get the sizes in bytes of all the messages.<br/>
    /// Messages marked as deleted are not listed.
    /// </summary>
    /// <returns>Size of each message excluding deleted ones</returns>
    /// <exception cref="PopServerException">If the server did not accept the LIST command</exception>
    public List<int> GetMessageSizes()
    {
        AssertDisposed();

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot get message sizes, when the user has not been authenticated yet");

        // RFC Example:
        // C: LIST
        // S: +OK 2 messages (320 octets)
        // S: 1 120
        // S: 2 200
        // S: .       // End of multi-line

        SendCommand("LIST");

        List<int> sizes = new List<int>();

        string response;
        // Read until end of multi-line
        while (!".".Equals(response = StreamUtility.ReadLineAsAscii(Stream)))
        {
            sizes.Add(int.Parse(response.Split(' ')[1], CultureInfo.InvariantCulture));
        }

        return sizes;
    }

    /// <summary>
    /// Fetches a message from the server and parses it
    /// </summary>
    /// <param name="messageNumber">
    /// Message number on server, which may not be marked as deleted.<br/>
    /// Must be inside the range [1, messageCount]
    /// </param>
    /// <returns>The message, containing the email message</returns>
    /// <exception cref="PopServerException">If the server did not accept the command sent to fetch the message</exception>
    public Message GetMessage(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot fetch a message, when the user has not been authenticated yet");

        byte[] messageContent = GetMessageAsBytes(messageNumber);

        return new Message(messageContent);
    }

    /// <summary>
    /// Fetches a message in raw form from the server
    /// </summary>
    /// <param name="messageNumber">
    /// Message number on server, which may not be marked as deleted.<br/>
    /// Must be inside the range [1, messageCount]
    /// </param>
    /// <returns>The raw bytes of the message</returns>
    /// <exception cref="PopServerException">If the server did not accept the command sent to fetch the message</exception>
    public byte[] GetMessageAsBytes(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot fetch a message, when the user has not been authenticated yet");

        // Get the full message
        return GetMessageAsBytes(messageNumber, false);
    }

    /// <summary>
    /// Get all the headers for a message.<br/>
    /// The server will not need to send the body of the message.
    /// </summary>
    /// <param name="messageNumber">
    /// Message number, which may not be marked as deleted.<br/>
    /// Must be inside the range [1, messageCount]
    /// </param>
    /// <returns>MessageHeaders object</returns>
    /// <exception cref="PopServerException">If the server did not accept the command sent to fetch the message</exception>
    public MessageHeader GetMessageHeaders(int messageNumber)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot fetch a message, when the user has not been authenticated yet");

        // Only fetch the header part of the message
        byte[] messageContent = GetMessageAsBytes(messageNumber, true);

        // Do not parse the body - as it is not in the byte array
        return new Message(messageContent, false).Headers;
    }

    /// <summary>
    /// Asks the server to return it's capability listing.<br/>
    /// This is an optional command, which a server is not enforced to accept.
    /// </summary>
    /// <returns>
    /// The returned Dictionary keys are the capability names.<br/>
    /// The Lists pointed to are the capability parameters fitting that certain capability name.
    /// See <a href="http://tools.ietf.org/html/rfc2449#section-6">RFC section 6</a> for explanation for some of the capabilities.
    /// </returns>
    /// <remarks>
    /// Capabilities are case-insensitive.<br/>
    /// The dictionary uses case-insensitive searching, but the Lists inside
    /// does not. Therefore you will have to use something like the code below
    /// to search for a capability parameter.<br/>
    /// foo is the capability name and bar is the capability parameter.
    /// <code>
    /// List&lt;string&gt; arguments = capabilities["foo"];
    ///	bool contains = null != arguments.Find(delegate(string str)
    ///				{
    ///					return String.Compare(str, "bar", true) == 0;
    ///				});
    /// </code>
    /// If we were running on .NET framework >= 3.5, a HashSet could have been used.
    /// </remarks>
    /// <exception cref="PopServerException">If the server did not accept the capability command</exception>
    public Dictionary<string, List<string>> Capabilities()
    {
        AssertDisposed();

        if (State != ConnectionState.Authorization && State != ConnectionState.Transaction)
            throw new Exception("Capability command only available while connected or authenticated");

        // RFC Example
        // Examples:
        // C: CAPA
        // S: +OK Capability list follows
        // S: TOP
        // S: USER
        // S: SASL CRAM-MD5 KERBEROS_V4
        // S: RESP-CODES
        // S: LOGIN-DELAY 900
        // S: PIPELINING
        // S: EXPIRE 60
        // S: UIDL
        // S: IMPLEMENTATION Shlemazle-Plotz-v302
        // S: .
        SendCommand("CAPA");

        // Capablities are case-insensitive
        Dictionary<string, List<string>> capabilities = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);

        string lineRead;
        // Keep reading until we are at the end of the multi line response
        while (!IsLastLineInMultiLineResponse(lineRead = StreamUtility.ReadLineAsAscii(Stream)))
        {
            // Example of read line
            // SASL CRAM-MD5 KERBEROS_V4
            // SASL is the name of the capability while
            // CRAM-MD5 and KERBEROS_V4 are arguments to SASL
            string[] splitted = lineRead.Split(' ');

            // There should always be a capability name
            string capabilityName = splitted[0];

            // Find all the arguments
            List<string> capabilityArguments = new List<string>();
            for (int i = 1; i < splitted.Length; i++)
            {
                capabilityArguments.Add(splitted[i]);
            }

            // Add the capability found to the dictionary
            capabilities.Add(capabilityName, capabilityArguments);
        }

        return capabilities;
    }
    #endregion

    #region Private helper methods
    /// <summary>
    /// Examines string to see if it contains a time stamp to use with the APOP command.<br/>
    /// If it does, sets the <see cref="ApopTimeStamp"/> property to this value.
    /// </summary>
    /// <param name="response">The string to examine</param>
    private void ExtractApopTimestamp(string response)
    {
        // RFC Example:
        // +OK POP3 server ready <1896.697170952@dbc.mtview.ca.us>
        Match match = Regex.Match(response, "<.+>");
        if (match.Success)
        {
            ApopTimeStamp = match.Value;
            ApopSupported = true;
        }
    }

    /// <summary>
    /// Tests a string to see if it is a "+" string.<br/>
    /// An "+" string should be returned by a compliant POP3
    /// server if the request could be served.<br/>
    /// <br/>
    /// The method does only check if it starts with "+".
    /// </summary>
    /// <param name="response">The string to examine</param>
    /// <exception cref="PopServerException">Thrown if server did not respond with "+" message</exception>
    private static void IsOkResponse(string response)
    {
        if (response == null)
            throw new Exception("The stream used to retrieve responses from was closed");

        if (response.StartsWith("+", StringComparison.OrdinalIgnoreCase))
            return;

        throw new Exception("The server did not respond with a + response. The response was: \"" + response + "\"");
    }

    /// <summary>
    /// Sends a command to the POP server.<br/>
    /// If this fails, an exception is thrown.
    /// </summary>
    /// <param name="command">The command to send to server</param>
    /// <exception cref="PopServerException">If the server did not send an OK message to the command</exception>
    private void SendCommand(string command)
    {
        // Convert the command with CRLF afterwards as per RFC to a byte array which we can write
        byte[] commandBytes = Encoding.ASCII.GetBytes(command + "\r\n");

        // Write the command to the server
        Stream.Write(commandBytes, 0, commandBytes.Length);
        Stream.Flush(); // Flush the content as we now wait for a response

        // Read the response from the server. The response should be in ASCII
        LastServerResponse = StreamUtility.ReadLineAsAscii(Stream);

        IsOkResponse(LastServerResponse);
    }

    /// <summary>
    /// Sends a command to the POP server, expects an integer reply in the response
    /// </summary>
    /// <param name="command">command to send to server</param>
    /// <param name="location">
    /// The location of the int to return.<br/>
    /// Example:<br/>
    /// <c>S: +OK 2 200</c><br/>
    /// Set <paramref name="location"/>=1 to get 2<br/>
    /// Set <paramref name="location"/>=2 to get 200<br/>
    /// </param>
    /// <returns>Integer value in the reply</returns>
    /// <exception cref="PopServerException">If the server did not accept the command</exception>
    private int SendCommandIntResponse(string command, int location)
    {
        SendCommand(command);

        return int.Parse(LastServerResponse.Split(' ')[location], CultureInfo.InvariantCulture);
    }

    /// <summary>
    /// Asks the server for a message and returns the message response as a byte array.
    /// </summary>
    /// <param name="messageNumber">
    /// Message number on server, which may not be marked as deleted.<br/>
    /// Must be inside the range [1, messageCount]
    /// </param>
    /// <param name="askOnlyForHeaders">If <see langword="true"/> only the header part of the message is requested from the server. If <see langword="false"/> the full message is requested</param>
    /// <returns>A byte array that the message requested consists of</returns>
    /// <exception cref="PopServerException">If the server did not accept the command sent to fetch the message</exception>
    private byte[] GetMessageAsBytes(int messageNumber, bool askOnlyForHeaders)
    {
        AssertDisposed();

        ValidateMessageNumber(messageNumber);

        if (State != ConnectionState.Transaction)
            throw new Exception("Cannot fetch a message, when the user has not been authenticated yet");

        if (askOnlyForHeaders)
        {
            // 0 is the number of lines of the message body to fetch, therefore it is set to zero to fetch only headers
            SendCommand("TOP " + messageNumber + " 0");
        }
        else
        {
            // Ask for the full message
            SendCommand("RETR " + messageNumber);
        }

        // RFC 1939 Example
        // C: RETR 1
        // S: +OK 120 octets
        // S: <the POP3 server sends the entire message here>
        // S: .

        // Create a byte array builder which we use to write the bytes too
        // When done, we can get the byte array out
        using (MemoryStream byteArrayBuilder = new MemoryStream())
        {
            bool first = true;
            byte[] lineRead;

            // Keep reading until we are at the end of the multi line response
            while (!IsLastLineInMultiLineResponse(lineRead = StreamUtility.ReadLineAsBytes(Stream)))
            {
                // We should not write CRLF on the very last line, therefore we do this
                if (!first)
                {
                    // Write CRLF which was not included in the lineRead bytes of last line
                    byte[] crlfPair = Encoding.ASCII.GetBytes("\r\n");
                    byteArrayBuilder.Write(crlfPair, 0, crlfPair.Length);
                }
                else
                {
                    // We are now not the first anymore
                    first = false;
                }

                // This is a multi-line. See http://tools.ietf.org/html/rfc1939#section-3
                // It says that a line starting with "." and not having CRLF after it
                // is a multi line, and the "." should be stripped
                if (lineRead.Length > 0 && lineRead[0] == '.')
                {
                    // Do not write the first period
                    byteArrayBuilder.Write(lineRead, 1, lineRead.Length - 1);
                }
                else
                {
                    // Write everything
                    byteArrayBuilder.Write(lineRead, 0, lineRead.Length);
                }
            }

            // If we are fetching a header - add an extra line to denote the headers ended
            if (askOnlyForHeaders)
            {
                byte[] crlfPair = Encoding.ASCII.GetBytes("\r\n");
                byteArrayBuilder.Write(crlfPair, 0, crlfPair.Length);
            }

            // Get out the bytes we have written to byteArrayBuilder
            byte[] receivedBytes = byteArrayBuilder.ToArray();

            return receivedBytes;
        }
    }

    /// <summary>
    /// Check if the bytes received is the last line in a multi line response
    /// from the pop3 server. It is the last line if the line contains only a "."
    /// </summary>
    /// <param name="bytesReceived">The last line received from the server, which could be the last response line</param>
    /// <returns><see langword="true"/> if last line in a multi line response, <see langword="false"/> otherwise</returns>
    /// <exception cref="ArgumentNullException">If <paramref name="bytesReceived"/> is <see langword="null"/></exception>
    private static bool IsLastLineInMultiLineResponse(byte[] bytesReceived)
    {
        if (bytesReceived == null)
            throw new ArgumentNullException("bytesReceived");

        return bytesReceived.Length == 1 && bytesReceived[0] == '.';
    }

    /// <see cref="IsLastLineInMultiLineResponse(byte[])"> for documentation</see>
    private static bool IsLastLineInMultiLineResponse(string lineReceived)
    {
        if (lineReceived == null)
            throw new ArgumentNullException("lineReceived");

        // If the string is indeed the last line, then it is okay to do ASCII encoding
        // on it. For performance reasons we check if the length is equal to 1
        // so that we do not need to decode a long message string just to see if
        // it is the last line
        return lineReceived.Length == 1 && IsLastLineInMultiLineResponse(Encoding.ASCII.GetBytes(lineReceived));
    }

    /// <summary>
    /// Method for checking that a <paramref name="messageNumber"/> argument given to some method
    /// is indeed valid. If not, <see cref="InvalidUseException"/> will be thrown.
    /// </summary>
    /// <param name="messageNumber">The message number to validate</param>
    private static void ValidateMessageNumber(int messageNumber)
    {
        if (messageNumber <= 0)
            throw new Exception("The messageNumber argument cannot have a value of zero or less. Valid messageNumber is in the range [1, messageCount]");
    }

    /// <summary>
    /// Closes down the streams and sets the Pop3Client into the initial configuration
    /// </summary>
    private void DisconnectStreams()
    {
        try
        {
            Stream.Close();
        }
        finally
        {
            // Reset values to initial state
            SetInitialValues();
        }
    }

    /// <summary>
    /// Sets the initial values on the public properties of this Pop3Client.
    /// </summary>
    private void SetInitialValues()
    {
        // We have not seen the APOPTimestamp yet
        ApopTimeStamp = null;

        // We are not connected
        Connected = false;
        State = ConnectionState.Disconnected;

        // APOP is not supported before we check on login
        ApopSupported = false;
    }

    /// <summary>
    /// Checks for extra response codes when an authentication has failed and throws
    /// the correct exception.
    /// If no such response codes is found, nothing happens.
    /// </summary>
    /// <param name="serverErrorResponse">The server response string</param>
    /// <param name="e">The exception thrown because the server responded with -ERR</param>
    /// <exception cref="PopServerLockedException">If the account is locked or in use</exception>
    /// <exception cref="LoginDelayException">If the server rejects the login because of too recent logins</exception>
    private static void CheckFailedLoginServerResponse(string serverErrorResponse, Exception e)
    {
        string upper = serverErrorResponse.ToUpperInvariant();

        // Bracketed strings are extra response codes addded
        // in RFC http://tools.ietf.org/html/rfc2449
        // together with the CAPA command.

        // Specifies the account is in use
        if (upper.Contains("[IN-USE]") || upper.Contains("LOCK"))
        {
            //DefaultLogger.Log.LogError("Authentication: maildrop is locked or in-use");
            throw e;
        }

        // Specifies that there must go some time between logins
        if (upper.Contains("[LOGIN-DELAY]"))
        {
            throw e;
        }
    }
    #endregion
}
]]></code></stage><stage stageid="e74c516a-5c0f-4539-88d1-4af07d49b311" name="Clean Up" type="SubSheetInfo"><subsheetid>ad30cfbe-8a8c-44e4-8a26-6ca67f058f7d</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="453e6ca1-71dc-4ce2-8a1c-d6512bd6b502" name="Start" type="Start"><subsheetid>ad30cfbe-8a8c-44e4-8a26-6ca67f058f7d</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>98566d14-9c68-423f-a446-0c63a9d56369</onsuccess></stage><stage stageid="98566d14-9c68-423f-a446-0c63a9d56369" name="End" type="End"><subsheetid>ad30cfbe-8a8c-44e4-8a26-6ca67f058f7d</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="dfd23e65-5e00-48c2-9222-b028de2d5425" name="new" type="Note"><subsheetid>ad30cfbe-8a8c-44e4-8a26-6ca67f058f7d</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9ffa7f6a-6f1a-4b3a-800b-c5b3d02f1053" name="new" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="3d27a452-2516-48ee-a57b-363989e0a677" name="Delete Message" type="SubSheetInfo"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><narrative>Deletes a message from the POP3 server.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7120f051-794a-428f-b0ca-ada23ab0da34" name="Start" type="Start"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="MessageID" narrative="The ID of the message to delete." stage="MessageID" /></inputs><onsuccess>fdb5293f-358f-4a67-b88b-4caa37a0f16f</onsuccess></stage><stage stageid="10c06eb3-10d6-4759-9f38-22fdb99f5635" name="MessageID" type="Data"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><display x="90" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f7d6db43-bdda-4cf0-bee9-37c1bfaadd6c" name="Configure" type="SubSheetInfo"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><narrative>Configures POP3 and SMTP settings for the Business Object</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="26f68cd5-5a95-4e00-863e-0e3393c2e05c" name="End" type="End"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0c9b2a5e-a669-43e8-94ce-0a93ac299716" name="Start" type="Start"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Username" narrative="The POP3 and SMTP Username" stage="Username" /><input type="password" name="Password" narrative="The POP3 and SMTP Password" stage="Password" /><input type="text" name="POP3 Server" narrative="The POP3 Server address e.g. pop.domain.com" stage="POP3 Server" /><input type="text" name="SMTP Server" narrative="The SMTP Server address e.g. smtp.domain.com" stage="SMTP Server" /><input type="number" name="POP3 Port" narrative="The POP3 Port, e.g. 110 or 995" stage="POP3 Port" /><input type="number" name="SMTP Port" narrative="The SMTP Port, e.g 25 or 465" stage="SMTP Port" /><input type="flag" name="POP3 UseSSL" narrative="Whether to use SSL for POP3" stage="POP3 UseSSL" /><input type="flag" name="SMTP UseSSL" narrative="Whether to use SSL for SMTP" stage="SMTP UseSSL" /></inputs><onsuccess>5fc137ae-22ff-4a9a-8e93-7c3923a7775f</onsuccess></stage><stage stageid="6200a401-764c-40bb-9c01-710765a7198a" name="Username" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="165" y="-150" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><alwaysinit /></stage><stage stageid="949b007a-73ec-49c8-bf67-97989d93b9d2" name="Password" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="240" y="-150" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>password</datatype><initialvalueenc></initialvalueenc><alwaysinit /></stage><stage stageid="c92379ab-616d-4e9f-bbdf-76d8f4a464de" name="Disconnect POP3" type="SubSheetInfo"><subsheetid>c8b9e601-7444-4385-b2aa-6709658ad472</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="68269076-5ba4-49b3-bb2b-e89927d49df3" name="Start" type="Start"><subsheetid>c8b9e601-7444-4385-b2aa-6709658ad472</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>d4140c57-5f78-45ff-8e59-d720e57c6bb2</onsuccess></stage><stage stageid="f304774e-9251-4092-b2a7-32424accffdb" name="End" type="End"><subsheetid>c8b9e601-7444-4385-b2aa-6709658ad472</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d4140c57-5f78-45ff-8e59-d720e57c6bb2" name="Disconnect" type="Code"><subsheetid>c8b9e601-7444-4385-b2aa-6709658ad472</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>367756ad-7a12-4c98-95ef-e1c9324c9ffa</onsuccess><code><![CDATA[_rclient.Disconnect();]]></code></stage><stage stageid="d85d6404-ed67-4802-b251-3c6e4f553bc3" name="Delete Message" type="Code"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="MessageNumber" expr="[Message Number]" /></inputs><onsuccess>1027af62-c9e7-443b-a361-2b2fa991aed1</onsuccess><code><![CDATA[_rclient.DeleteMessage((int)MessageNumber);]]></code></stage><stage stageid="64b00b6b-bad6-4e81-bdc2-72fcaaf69961" name="End" type="End"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="5fc137ae-22ff-4a9a-8e93-7c3923a7775f" name="Set Configured" type="Calculation"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>26f68cd5-5a95-4e00-863e-0e3393c2e05c</onsuccess><calculation expression="True" stage="Configured" /></stage><stage stageid="e691cdbf-68a7-46c5-9469-911182bc8475" name="Connect POP3" type="SubSheetInfo"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="15b67dac-088d-4cf3-a6a7-2feca9d5c99d" name="Start" type="Start"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="-180" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Action" stage="Action" /></inputs><onsuccess>3ca489aa-ab27-465b-b189-8875b7dd615d</onsuccess></stage><stage stageid="710abe98-0572-4ea2-adab-5ac1226ed5ac" name="End" type="End"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="73bf49d5-81cc-4f1a-b89d-ed0c90a05a86" name="Configured" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><loginhibit /><display x="90" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><alwaysinit /></stage><stage stageid="bcb58d07-9f70-40cf-9df3-eeff2d3a75b6" name="Configured" type="Decision"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Configured]" /><ontrue>6a90465e-93b4-4c91-95c2-cfc40b74d63c</ontrue><onfalse>2f2d374d-c22d-470e-99e5-d1ca2fce2c95</onfalse></stage><stage stageid="6a90465e-93b4-4c91-95c2-cfc40b74d63c" name="Connect and Authenticate" type="Code"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Username" expr="[Username]" /><input type="text" name="Password" expr="[Password]" /><input type="text" name="Server" expr="[POP3 Server]" /><input type="number" name="Port" expr="[POP3 Port]" /><input type="flag" name="Use SSL" expr="[POP3 UseSSL]" /></inputs><onsuccess>5827b973-4390-423c-b457-4a225cd63717</onsuccess><code><![CDATA[_rclient = new Pop3Client();
_rclient.Connect(Server,(int)Port,Use_SSL);
_rclient.Authenticate(Username,Password);]]></code></stage><stage stageid="2f2d374d-c22d-470e-99e5-d1ca2fce2c95" name="Exception1" type="Exception"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><display x="90" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Cannot connect to Server you must use Configure first&quot; " /></stage><stage stageid="7d982653-252b-40ea-aa32-027aa81ece7c" name="Action" type="Data"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><display x="90" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5827b973-4390-423c-b457-4a225cd63717" name="Set Connected" type="Calculation"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>710abe98-0572-4ea2-adab-5ac1226ed5ac</onsuccess><calculation expression="True" stage="POP3 Connected" /></stage><stage stageid="aee3539f-93d1-4661-8e48-e207e7fda381" name="POP3 Connected" type="Data"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><display x="90" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue></stage><stage stageid="3ca489aa-ab27-465b-b189-8875b7dd615d" name="Connected" type="Decision"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="15" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[POP3 Connected]" /><ontrue>d99cd226-dd16-4417-af86-11e756edfb93</ontrue><onfalse>bcb58d07-9f70-40cf-9df3-eeff2d3a75b6</onfalse></stage><stage stageid="d99cd226-dd16-4417-af86-11e756edfb93" name="End" type="End"><subsheetid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</subsheetid><loginhibit /><display x="-75" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1fa82664-ea42-4255-84ab-50b61958fe56" name="POP3 Server" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="165" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><alwaysinit /></stage><stage stageid="23794a48-9b7c-4d9c-b4ea-93c47ab545fe" name="SMTP Server" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="240" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><alwaysinit /></stage><stage stageid="bb607f8e-6326-4b20-9d1c-be2061af1a0a" name="SMTP Port" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="240" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><alwaysinit /></stage><stage stageid="8d588294-9205-4d6f-abb1-bdc102beac7e" name="POP3 Port" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="165" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><alwaysinit /></stage><stage stageid="4b819ad9-214e-4499-b11b-73d0fd122070" name="SMTP UseSSL" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="240" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><alwaysinit /></stage><stage stageid="47441526-8d37-4599-921c-9e4103ac87aa" name="POP3 UseSSL" type="Data"><subsheetid>544abb24-e623-4adb-a24d-3a5dba6164ba</subsheetid><display x="165" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><alwaysinit /></stage><stage stageid="367756ad-7a12-4c98-95ef-e1c9324c9ffa" name="Set Connected" type="Calculation"><subsheetid>c8b9e601-7444-4385-b2aa-6709658ad472</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>f304774e-9251-4092-b2a7-32424accffdb</onsuccess><calculation expression="False" stage="POP3 Connected" /></stage><stage stageid="1027af62-c9e7-443b-a361-2b2fa991aed1" name="Disconnect POP3" type="SubSheet"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>64b00b6b-bad6-4e81-bdc2-72fcaaf69961</onsuccess><processid>c8b9e601-7444-4385-b2aa-6709658ad472</processid></stage><stage stageid="943a7e4b-9dbd-427b-a3a1-4f2810050f82" name="Send Message" type="SubSheetInfo"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><narrative>Sends a message using the SMTP protocol.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="eb463c09-de32-4dde-94c3-cf0507ee79e3" name="Start" type="Start"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><loginhibit /><display x="-45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="From" narrative="The email address of the sender." stage="From" /><input type="text" name="To" narrative="The email address of the recipient. To address multiple recipients use the format &quot;john.smith@example.com, henry.jones@example.com&quot; OR &quot;John Smith &lt;john.smith@example.com&gt;, Henry Jones &lt;henry.jones@example.com&gt;&quot;." stage="To" /><input type="text" name="Subject" narrative="The subject of the email." stage="Subject" /><input type="text" name="Body" narrative="The body of the email." stage="Body" /><input type="collection" name="Attachments" narrative="A Collection containing a list of files to add to the email as attachments." stage="Attachments" /><input type="flag" name="BodyIsHTML" narrative="Indicates if the body should be sent as HTML" stage="BodyIsHTML" /></inputs><onsuccess>8e55392e-ae1e-443f-9d5b-37fbeb948c47</onsuccess></stage><stage stageid="7e86926f-9f8a-4e11-aff3-b0ea75a9e350" name="End" type="End"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><loginhibit /><display x="-45" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="18563c9d-55d4-4aea-9713-58595b565208" name="From" type="Data"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-225" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7e3eba6a-938c-4747-91fb-f065fd8e1ecd" name="To" type="Data"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-165" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6cbf338c-56d6-45b9-bfa6-40dcc60f55f4" name="Subject" type="Data"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-225" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="364ba15a-711a-471f-a468-2fe38c091107" name="Body" type="Data"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-165" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a212d081-53fb-4398-bda0-462ce18c07c2" name="Send Message" type="Code"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><loginhibit /><display x="-45" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Server" expr="[SMTP Server]" /><input type="number" name="Port" expr="[SMTP Port]" /><input type="text" name="Username" expr="[Username]" /><input type="password" name="Password" expr="[Password]" /><input type="flag" name="UseSSL" expr="[SMTP UseSSL]" /><input type="text" name="From" expr="[From]" /><input type="text" name="To" expr="[To]" /><input type="text" name="Subject" expr="[Subject]" /><input type="text" name="Body" expr="[Body]" /><input type="collection" name="Attachments" expr="[Attachments]" /><input type="flag" name="BodyIsHTML" expr="[BodyIsHTML]" /></inputs><onsuccess>7e86926f-9f8a-4e11-aff3-b0ea75a9e350</onsuccess><code><![CDATA[SmtpClient client = new SmtpClient();
try
{
	client.Host = Server;
	client.Port = (int)Port;
	if (Username != "")
		client.Credentials = new NetworkCredential(Username,Password);
	client.EnableSsl = UseSSL;

	using(MailMessage mail = new MailMessage())
	{
		mail.From = new MailAddress(From);
		mail.To.Add(To);
		mail.Subject = Subject;
		mail.IsBodyHtml = BodyIsHTML;
		mail.Body = Body;

		foreach(DataRow dr in Attachments.Rows)
		{
			string file = dr["Path"].ToString();
			Attachment data = new Attachment(file, MediaTypeNames.Application.Octet);
			ContentDisposition dis = data.ContentDisposition;
			dis.CreationDate = File.GetCreationTime(file);
			dis.ModificationDate = File.GetLastWriteTime(file);
			dis.ReadDate = File.GetLastAccessTime(file);
			mail.Attachments.Add(data);
		}

		client.Send(mail);
	}
}
catch(Exception ex)
{
	string msg = ex.Message;
	if(ex.InnerException != null) {
		msg += " - " + ex.InnerException.Message;
	}
	throw new Exception(msg);
}
finally
{
	IDisposable disposableClient = client as IDisposable;
	if (disposableClient!=null)
		disposableClient.Dispose();
}]]></code></stage><stage stageid="fdb5293f-358f-4a67-b88b-4caa37a0f16f" name="Connect POP3" type="SubSheet"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Action" expr="&quot;Get All Messages&quot;" /></inputs><onsuccess>7bb623a1-88ca-4162-8eba-a0d384df4aec</onsuccess><processid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</processid></stage><stage stageid="5c4dcdf6-a371-4878-9c4c-3fd08aa568f4" name="List Messages" type="SubSheetInfo"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f8e7202a-f413-4d68-b38e-4b6d789318f1" name="Start" type="Start"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>c47a1fa4-9fa6-4b4c-b35c-5d03d65fad46</onsuccess></stage><stage stageid="76845230-717a-4efe-954c-b10309c6cc6c" name="End" type="End"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="165" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Emails" stage="Emails" /></outputs></stage><stage stageid="797b45e9-3197-454c-9068-7baefc351f75" name="MessageCount" type="Data"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><display x="90" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="b94061e0-c242-4e91-8bc6-ed1cc12cd5e9" name="Messages Left?" type="Decision"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[MessageCount] &gt;0" /><ontrue>0f6d2f90-451c-4d3b-89cf-517bddb760d8</ontrue><onfalse>76845230-717a-4efe-954c-b10309c6cc6c</onfalse></stage><stage stageid="cecc8228-7a4a-4e96-b398-8757b6db702d" name="Decrement" type="Calculation"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="255" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>aafa7d4a-dfb0-4446-9323-8afa0b721cf0</onsuccess><calculation expression="[MessageCount]-1" stage="MessageCount" /></stage><stage stageid="002f58e7-8123-4b0a-bcca-2319263c33d1" name="Get Message Headers1" type="Code"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="180" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="MessageNumber" expr="[MessageCount]" /></inputs><outputs><output type="text" name="Subject" stage="Emails.Subject" /><output type="text" name="From Name" stage="Emails.From Name" /><output type="text" name="From Email" stage="Emails.From Address" /><output type="datetime" name="Date Sent" stage="Emails.Date Sent" /><output type="text" name="MessageID" stage="Emails.MessageID" /></outputs><onsuccess>cecc8228-7a4a-4e96-b398-8757b6db702d</onsuccess><code><![CDATA[MessageHeader result =_rclient.GetMessageHeaders((int)MessageNumber);
Subject = result.Subject;
From_Name = result.From.DisplayName;
From_Email = result.From.Address;
Date_Sent = result.DateSent;
MessageID = result.MessageId;]]></code></stage><stage stageid="aafa7d4a-dfb0-4446-9323-8afa0b721cf0" name="anchor1" type="Anchor"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="-75" y="255" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>6a475ba3-f7b4-4ead-8691-921b64e9e896</onsuccess></stage><stage stageid="6a475ba3-f7b4-4ead-8691-921b64e9e896" name="anchor2" type="Anchor"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="-75" y="60" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>b94061e0-c242-4e91-8bc6-ed1cc12cd5e9</onsuccess></stage><stage stageid="0f6d2f90-451c-4d3b-89cf-517bddb760d8" name="Add Row" type="Action"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Emails&quot;" /></inputs><onsuccess>002f58e7-8123-4b0a-bcca-2319263c33d1</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="38f14f0c-f87e-4c96-8836-8f5b8faced14" name="Emails" type="Collection"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="165" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Subject" type="text" description="The subject of the email." /><field name="From Name" type="text" description="The name of the sender." /><field name="From Address" type="text" description="The email address of the sender." /><field name="Date Sent" type="datetime" description="The date and time at which the email was sent." /><field name="MessageID" type="text" description="The ID of the email message." /></collectioninfo></stage><stage stageid="0bf982d4-8f0e-4d69-aa12-0ac3996f3d84" name="Get Message Count2" type="Code"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="MessageCount" stage="MessageCount" /></outputs><onsuccess>b94061e0-c242-4e91-8bc6-ed1cc12cd5e9</onsuccess><code><![CDATA[MessageCount=_rclient.GetMessageCount();]]></code></stage><stage stageid="c47a1fa4-9fa6-4b4c-b35c-5d03d65fad46" name="Connect POP3" type="SubSheet"><subsheetid>e0fb4432-bf1a-4bdf-856a-a52d9acb4d9f</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Action" expr="&quot;Get All Messages&quot;" /></inputs><onsuccess>0bf982d4-8f0e-4d69-aa12-0ac3996f3d84</onsuccess><processid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</processid></stage><stage stageid="9879be0d-2188-4595-91b6-ac07d1e348dc" name="Get Message" type="SubSheetInfo"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><narrative>Gets a message using the POP3 protocol. By default, for multipart messages the plain text part is returned in preference to HTML (with the Content-Type output parameter indicating what was actually returned), however the HTMLPreferred flag can be used to reverse this logic. If the message contains no plain text or HTML parts then an empty string is returned.</narrative><display x="-195" y="-60" w="150" h="180" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="6a181147-fc29-471a-8902-d9fffbb71d86" name="Start" type="Start"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="MessageID" narrative="The ID of the message to retrieve." stage="MessageID" /><input type="flag" name="HTMLPreferred" narrative="Return HTML content in preference to plain text (multipart messages only)" stage="HTMLPreferred" /></inputs><onsuccess>b218b56f-ef0d-4199-91ee-f1ccb4eec209</onsuccess></stage><stage stageid="f44ba718-e5c7-48fd-8233-0e9bfbf2048d" name="MessageID" type="Data"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="39a05d5d-741a-4c0a-a59c-f5952b55bb44" name="End" type="End"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><loginhibit /><display x="15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Body" narrative="The email body" stage="Body" /><output type="text" name="Content-Type" narrative="The content type of the returned body (e.g. text/plain)" stage="Content-Type" /></outputs></stage><stage stageid="b218b56f-ef0d-4199-91ee-f1ccb4eec209" name="Connect POP3" type="SubSheet"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Action" expr="&quot;Get All Messages&quot;" /></inputs><onsuccess>fb2ca3a4-1e9e-4b39-b820-40e7c035d7d8</onsuccess><processid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</processid></stage><stage stageid="e0ceae00-8c9e-4201-8a4b-2e3b1a6b5293" name="Get Message" type="Code"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="MessageNumber" expr="[Message Number]" /><input type="flag" name="HTMLPreferred" expr="[HTMLPreferred]" /></inputs><outputs><output type="text" name="Body" stage="Body" /><output type="text" name="Content-Type" stage="Content-Type" /></outputs><onsuccess>39a05d5d-741a-4c0a-a59c-f5952b55bb44</onsuccess><code><![CDATA[Message m =_rclient.GetMessage((int)MessageNumber);
MessagePart p;
if (HTMLPreferred) {
	p = m.FindFirstHtmlVersion();
	if (p == null) p = m.FindFirstPlainTextVersion();
} else {
	p = m.FindFirstPlainTextVersion();
	if (p == null) p = m.FindFirstHtmlVersion();
}
if (p != null) {
	Body = p.GetBodyAsText();
	Content_Type = p.ContentType.ToString();
} else {
	Body = "";
	Content_Type = "";
}]]></code></stage><stage stageid="aa902ce3-629f-4d73-87a8-5e04f070405f" name="Body" type="Data"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><display x="90" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d64e2310-ca59-4f22-8594-a0cd08d3d78f" name="Number From ID" type="SubSheetInfo"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="63a1c937-63b0-4a26-aba7-716654c5da18" name="Start" type="Start"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="MessageID" stage="MessageID" /></inputs><onsuccess>f6de7ad3-6964-449c-bdc0-135401e01d62</onsuccess></stage><stage stageid="9e58393f-f316-40c2-bf5b-7aaa994e24ec" name="MessageID" type="Data"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="40f3248b-d376-4904-aef8-505a14c96731" name="End" type="End"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="165" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="Message Number" stage="MessageCount" /></outputs></stage><stage stageid="f6de7ad3-6964-449c-bdc0-135401e01d62" name="Get Message Count" type="Code"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="MessageCount" stage="MessageCount" /></outputs><onsuccess>0623c4e8-9fd1-40c7-8d57-d9b00ad7f140</onsuccess><code><![CDATA[MessageCount = _rclient.GetMessageCount();]]></code></stage><stage stageid="f1f6e86c-668e-46ae-8fad-4da426311236" name="MessageCount" type="Data"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><display x="90" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0623c4e8-9fd1-40c7-8d57-d9b00ad7f140" name="Messages Left?" type="Decision"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[MessageCount] &gt;0" /><ontrue>c9e08180-d230-4857-a8c5-361f80b97a8c</ontrue><onfalse>40f3248b-d376-4904-aef8-505a14c96731</onfalse></stage><stage stageid="dbf5258e-83cb-432e-b51e-596ef2ccbb01" name="Decrement" type="Calculation"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="195" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>a21a95f1-5257-48c7-bf2b-db274edbc70f</onsuccess><calculation expression="[MessageCount]-1" stage="MessageCount" /></stage><stage stageid="c9e08180-d230-4857-a8c5-361f80b97a8c" name="Get Message Headers" type="Code"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="MessageNumber" expr="[MessageCount]" /></inputs><outputs><output type="text" name="MessageID" stage="FoundMessageID" /></outputs><onsuccess>20b52376-80d0-49b8-8b7f-12e300c62410</onsuccess><code><![CDATA[MessageHeader result =_rclient.GetMessageHeaders((int)MessageNumber);
MessageID = result.MessageId;]]></code></stage><stage stageid="a21a95f1-5257-48c7-bf2b-db274edbc70f" name="anchor1" type="Anchor"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="-75" y="195" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>37af2a50-a79d-4d9c-913e-cb970afaa33f</onsuccess></stage><stage stageid="37af2a50-a79d-4d9c-913e-cb970afaa33f" name="anchor2" type="Anchor"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="-75" y="15" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>0623c4e8-9fd1-40c7-8d57-d9b00ad7f140</onsuccess></stage><stage stageid="ddcb6ae8-4ccf-4a15-a377-97a5535a287b" name="FoundMessageID" type="Data"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><display x="90" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="20b52376-80d0-49b8-8b7f-12e300c62410" name="Message Match" type="Decision"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="15" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[MessageID]=[FoundMessageID]" /><ontrue>73b0921c-7ac9-4ede-ac69-891397d2cd3b</ontrue><onfalse>dbf5258e-83cb-432e-b51e-596ef2ccbb01</onfalse></stage><stage stageid="73b0921c-7ac9-4ede-ac69-891397d2cd3b" name="End" type="End"><subsheetid>4688b112-6575-4f8a-980c-713566729518</subsheetid><loginhibit /><display x="165" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="Message Number" stage="MessageCount" /></outputs></stage><stage stageid="7bb623a1-88ca-4162-8eba-a0d384df4aec" name="Number From ID" type="SubSheet"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="MessageID" expr="[MessageID]" /></inputs><outputs><output type="number" name="Message Number" stage="Message Number" /></outputs><onsuccess>d85d6404-ed67-4802-b251-3c6e4f553bc3</onsuccess><processid>4688b112-6575-4f8a-980c-713566729518</processid></stage><stage stageid="356a7e1e-cf63-4cde-a441-7f6889494278" name="Message Number" type="Data"><subsheetid>8279ef2e-ecb1-434b-a10d-cc7c6d1a5e8e</subsheetid><display x="90" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="fb2ca3a4-1e9e-4b39-b820-40e7c035d7d8" name="Number From ID" type="SubSheet"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="MessageID" expr="[MessageID]" /></inputs><outputs><output type="number" name="Message Number" stage="Message Number" /></outputs><onsuccess>e0ceae00-8c9e-4201-8a4b-2e3b1a6b5293</onsuccess><processid>4688b112-6575-4f8a-980c-713566729518</processid></stage><stage stageid="8fabc428-4d6b-46b9-90d6-27513ef82084" name="Message Number" type="Data"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><display x="90" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f06ff7dc-dee1-4319-8fb8-e7324bbeda46" name="Delete Messages" type="SubSheetInfo"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><narrative>Deletes a collection identifying messages from the POP3 server.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d878691d-ebbf-449b-b3e9-1a4dbc780391" name="Start" type="Start"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="MessageIDs" narrative="A collection containing the IDs of the messages to delete." stage="MessageIDs" /></inputs><onsuccess>12f5806c-a210-4e38-8f15-5d8cbaa6fc9b</onsuccess></stage><stage stageid="b2f67ca9-9e76-4ae8-ab11-bbeb3991f9f1" name="Delete Message1" type="Code"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="MessageNumber" expr="[MessageNumbers.MessageNumber]" /></inputs><onsuccess>5acbc759-910b-43a4-aad3-277348fe735e</onsuccess><code><![CDATA[_rclient.DeleteMessage((int)MessageNumber);]]></code></stage><stage stageid="592900a1-6fa2-4aae-8df6-4aceeb59cd3c" name="End" type="End"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="345" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b5f506e0-8569-45f6-bc34-f11ca13a180f" name="Disconnect POP3" type="SubSheet"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="300" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>592900a1-6fa2-4aae-8df6-4aceeb59cd3c</onsuccess><processid>c8b9e601-7444-4385-b2aa-6709658ad472</processid></stage><stage stageid="12f5806c-a210-4e38-8f15-5d8cbaa6fc9b" name="Connect POP3" type="SubSheet"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Action" expr="&quot;Get All Messages&quot;" /></inputs><onsuccess>b542fa7b-76a0-4ac7-bef8-b7523eed14dc</onsuccess><processid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</processid></stage><stage stageid="d1c8749a-8674-4230-980f-d75287257eb7" name="Number From ID" type="SubSheet"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="MessageID" expr="[MessageIDs.MessageID]" /></inputs><outputs><output type="number" name="Message Number" stage="MessageNumbers.MessageNumber" /></outputs><onsuccess>37fa1082-1d8f-4a93-a6bf-ebfa986abde1</onsuccess><processid>4688b112-6575-4f8a-980c-713566729518</processid></stage><stage stageid="b542fa7b-76a0-4ac7-bef8-b7523eed14dc" name="For Each MessageID" type="LoopStart"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>05f7d6d8-79ad-4aa7-823f-6d114dfdff84</onsuccess><groupid>d1ff5376-69c7-47a4-a5a5-71e609d81702</groupid><looptype>ForEach</looptype><loopdata>MessageIDs</loopdata></stage><stage stageid="37fa1082-1d8f-4a93-a6bf-ebfa986abde1" name="Next" type="LoopEnd"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>227fbd4a-9ce9-42be-b920-b00ae83b5705</onsuccess><groupid>d1ff5376-69c7-47a4-a5a5-71e609d81702</groupid></stage><stage stageid="05f7d6d8-79ad-4aa7-823f-6d114dfdff84" name="Add Row" type="Action"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;MessageNumbers&quot;" /></inputs><onsuccess>d1c8749a-8674-4230-980f-d75287257eb7</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Add Row" /></stage><stage stageid="26d19bda-3d6e-41ad-817e-cbec74832a0f" name="MessageNumbers" type="Collection"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><display x="90" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="MessageNumber" type="number" /></collectioninfo></stage><stage stageid="227fbd4a-9ce9-42be-b920-b00ae83b5705" name="For Each Message Number" type="LoopStart"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>b2f67ca9-9e76-4ae8-ab11-bbeb3991f9f1</onsuccess><groupid>0faefc94-574d-4561-8432-32eb13a0c75d</groupid><looptype>ForEach</looptype><loopdata>MessageNumbers</loopdata></stage><stage stageid="5acbc759-910b-43a4-aad3-277348fe735e" name="Next" type="LoopEnd"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="15" y="255" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>b5f506e0-8569-45f6-bc34-f11ca13a180f</onsuccess><groupid>0faefc94-574d-4561-8432-32eb13a0c75d</groupid></stage><stage stageid="4c85d0ab-d738-40a4-b0b2-d59986be4091" name="Save Attachments" type="SubSheetInfo"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><narrative>Gets a message attachment and saves it to a given folder.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="795b56fc-9b21-4bfe-9766-bb07f4b1280a" name="End" type="End"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1bb24baa-c27d-4ab7-9081-fc6414148434" name="Start" type="Start"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="MessageID" narrative="The ID of the email message." stage="MessageID" /><input type="text" name="Folder" narrative="A Folder in which to save all the attachments." stage="Folder" /></inputs><onsuccess>61363752-629c-4ad8-b3fb-c6de4554c3f9</onsuccess></stage><stage stageid="c0b68cab-c88f-45cd-9b05-9fafa3790fd2" name="MessageID" type="Data"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="61363752-629c-4ad8-b3fb-c6de4554c3f9" name="Connect POP3" type="SubSheet"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Action" expr="&quot;Get All Messages&quot;" /></inputs><onsuccess>2f95ac8b-e89b-4ca2-9c6f-877551c2bd64</onsuccess><processid>954d358e-45d9-44b3-b56a-87e1c21f9d0f</processid></stage><stage stageid="2f95ac8b-e89b-4ca2-9c6f-877551c2bd64" name="Number From ID" type="SubSheet"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="MessageID" expr="[MessageID]" /></inputs><outputs><output type="number" name="Message Number" stage="Message Number" /></outputs><onsuccess>03fcd315-a8c0-4853-ad26-2b4808074ab9</onsuccess><processid>4688b112-6575-4f8a-980c-713566729518</processid></stage><stage stageid="5e21321e-a465-46f7-83f0-8d7e2912c93f" name="Message Number" type="Data"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><display x="90" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9c9a7a0d-e77a-4368-b7f9-269d1feadbe2" name="Folder" type="Data"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><display x="165" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="03fcd315-a8c0-4853-ad26-2b4808074ab9" name="Save Attachments" type="Code"><subsheetid>803f1a2c-38f9-4614-97aa-5ca66d454d2d</subsheetid><loginhibit /><display x="15" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="MessageNumber" expr="[Message Number]" /><input type="text" name="Folder" expr="[Folder]" /></inputs><onsuccess>795b56fc-9b21-4bfe-9766-bb07f4b1280a</onsuccess><code><![CDATA[Message m = _rclient.GetMessage((int)MessageNumber);
foreach(MessagePart a in m.FindAllAttachments())
{
	string path=System.IO.Path.Combine(Folder,a.FileName);
    a.Save(new FileInfo(path));
}]]></code></stage><stage stageid="fb9ba538-acf2-42b4-879b-a26cc69aa7e9" name="Attachments" type="Collection"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-195" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Path" type="text" description="The path to a file to include as an attachment in the email." /></collectioninfo></stage><stage stageid="c57bad69-0560-4732-b2cd-ecdac5946b2b" name="MessageIDs" type="Collection"><subsheetid>849d1a37-179b-40ae-9683-4ebb0d951576</subsheetid><loginhibit /><display x="105" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Subject" type="text" description="The subject of the email." /><field name="From Name" type="text" description="The name of the sender." /><field name="From Address" type="text" description="The email address of the sender." /><field name="Date Sent" type="datetime" description="The date and time at which the email was sent." /><field name="MessageID" type="text" description="The ID of the email message." /></collectioninfo></stage><stage stageid="8e55392e-ae1e-443f-9d5b-37fbeb948c47" name="Configured" type="Decision"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><loginhibit /><display x="-45" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Configured]" /><ontrue>a212d081-53fb-4398-bda0-462ce18c07c2</ontrue><onfalse>7b2c9cad-ad8c-4892-8a7e-a77fceda0298</onfalse></stage><stage stageid="7b2c9cad-ad8c-4892-8a7e-a77fceda0298" name="FAIL" type="Exception"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="30" y="-90" w="30" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="ConfigurationException" detail="&quot;Cannot connect to Server you must use Configure first&quot; " /></stage><stage stageid="8166f9b5-deea-4781-8584-e8777525856c" name="BodyIsHTML" type="Data"><subsheetid>cc1b4ba2-0510-4980-92bd-d6312072c5bf</subsheetid><display x="-210" y="105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="106bc5d9-ced2-4091-a8b6-05f0774acd71" name="HTMLPreferred" type="Data"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><display x="-60" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f085c445-853e-460a-b673-4b230f5cc2bb" name="Content-Type" type="Data"><subsheetid>67bff276-3cf2-4985-a957-e462b800ac3b</subsheetid><display x="165" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage></process></object>
        <object id="1fa37b16-509a-4ca9-9b5d-1dc3f4fd4b4f" name="Get User Details - Create HTML Body" xmlns="http://www.blueprism.co.uk/product/process"><process name="Get User Details - Create HTML Body" version="1.0" bpversion="6.6.0.15260" narrative="This object aims to create an html body for email" byrefcollection="true" type="object" runmode="Exclusive"><appdef><element name="Application Root"><id>591d6ff9-59cd-4a06-9022-58348b20b8fe</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="a76ccf6c-2164-4ddf-93d5-b4b0a2fb7452" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ab68d20a-cd0b-43ee-a86f-46b32ddc120c" type="Normal" published="True"><name>Get HTML Body</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="51f61c6c-be1b-4f4a-bda5-64d1dbea8c40" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><onsuccess>ad45010a-495a-4e28-8f4c-cfaf74bac24e</onsuccess></stage><stage stageid="ad45010a-495a-4e28-8f4c-cfaf74bac24e" name="End" type="End"><loginhibit /><display x="15" y="90" /></stage><stage stageid="8aa90a27-334e-4098-ab80-d628d504c434" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /><references><reference>System.dll</reference><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Data</import><import>System.Collections.Generic</import><import>System.Text</import></imports><language>csharp</language><globalcode><![CDATA[]]></globalcode><code><![CDATA[]]></code></stage><stage stageid="bcd027e0-07e1-4c25-9044-3cbe3343e6c1" name="Clean Up" type="SubSheetInfo"><subsheetid>a76ccf6c-2164-4ddf-93d5-b4b0a2fb7452</subsheetid><display x="-195" y="-105" w="150" h="90" /></stage><stage stageid="4567f894-1424-4530-ad8c-49d06f6c429c" name="Start" type="Start"><subsheetid>a76ccf6c-2164-4ddf-93d5-b4b0a2fb7452</subsheetid><loginhibit /><display x="15" y="-105" /><onsuccess>f8967bc3-443f-4f2c-b5c8-90d142684d11</onsuccess></stage><stage stageid="f8967bc3-443f-4f2c-b5c8-90d142684d11" name="End" type="End"><subsheetid>a76ccf6c-2164-4ddf-93d5-b4b0a2fb7452</subsheetid><loginhibit /><display x="15" y="90" /></stage><stage stageid="840317fc-909c-42d7-ba9e-162cf8df3ddf" name="Get HTML Body" type="SubSheetInfo"><subsheetid>ab68d20a-cd0b-43ee-a86f-46b32ddc120c</subsheetid><display x="-405" y="-150" w="150" h="90" /></stage><stage stageid="360d881d-fd25-4cf0-afe6-d2f9b2294da1" name="Start" type="Start"><subsheetid>ab68d20a-cd0b-43ee-a86f-46b32ddc120c</subsheetid><loginhibit /><display x="-195" y="-135" /><inputs><input type="collection" name="Input Collection" narrative="Input Collection" stage="inputData" /></inputs><onsuccess>8f946ccf-bc17-4c0c-afff-21de6260930c</onsuccess></stage><stage stageid="6824c564-5922-4bbf-be5a-88637610fcc3" name="End" type="End"><subsheetid>ab68d20a-cd0b-43ee-a86f-46b32ddc120c</subsheetid><loginhibit /><display x="-195" y="-45" /><outputs><output type="text" name="EmailBody" narrative="EmailBody" stage="EmailBody" /></outputs></stage><stage stageid="f39e3d64-9225-4fdd-9387-2127fb94be0f" name="Note1" type="Note"><subsheetid>a76ccf6c-2164-4ddf-93d5-b4b0a2fb7452</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="9e66a72b-5166-4f3b-869e-11a3091acc4d" name="Note2" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /></stage><stage stageid="8f946ccf-bc17-4c0c-afff-21de6260930c" name="Code" type="Code"><subsheetid>ab68d20a-cd0b-43ee-a86f-46b32ddc120c</subsheetid><loginhibit /><display x="-195" y="-90" /><inputs><input type="collection" name="inputData" expr="[inputData]" /></inputs><outputs><output type="text" name="EmailBody" stage="EmailBody" /></outputs><onsuccess>6824c564-5922-4bbf-be5a-88637610fcc3</onsuccess><code><![CDATA[StringBuilder stringBuilder = new StringBuilder();

stringBuilder.Append("Dear User, <br><br>");
stringBuilder.Append("We have your below details in our record. <br><br>");

stringBuilder.Append("<table style='border:1px solid black; border-collapse:collapse;align='center';'>");
stringBuilder.Append("<tr style='border:1px solid black;border-collapse:collapse;align='center';'>");

foreach(DataColumn dc in inputData.Columns)
	{
		stringBuilder.Append("<th style='border:1px solid black;font-weight: normal; font-family:georgia; border-collapse:collapse;align='center';'>");
		stringBuilder.Append(dc.ColumnName);
		stringBuilder.Append("</th>");
	}

	stringBuilder.Append("</tr>");

foreach(DataRow dr in inputData.Rows)
	{
		stringBuilder.Append("<tr style='border:1px solid black;font-family:georgia; border-collapse:collapse;align='center';'>");
		foreach(DataColumn dc in inputData.Columns)
			{
				stringBuilder.Append("<td style='border:1px solid black;font-family:georgia; border-collapse:collapse;align='center';'>");
				stringBuilder.Append(dr[dc.ColumnName].ToString());
				stringBuilder.Append("</td>");
			}
		stringBuilder.Append("</tr>");
	}
	stringBuilder.Append("</table><br>");
	stringBuilder.Append("Regards,<br>Backend Team");

EmailBody = stringBuilder.ToString();]]></code></stage><stage stageid="31aac2a6-3830-4528-bc26-f0be7127fb67" name="inputData" type="Collection"><subsheetid>ab68d20a-cd0b-43ee-a86f-46b32ddc120c</subsheetid><loginhibit /><narrative>Collection of Input Data</narrative><display x="-420" y="-60" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="f4e460a2-40f9-40d4-b52f-244bd939294f" name="EmailBody" type="Data"><subsheetid>ab68d20a-cd0b-43ee-a86f-46b32ddc120c</subsheetid><display x="-420" y="15" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d3a94c91-0947-4e6b-88c0-09a2e2522755" name="Input" type="Block"><subsheetid>ab68d20a-cd0b-43ee-a86f-46b32ddc120c</subsheetid><loginhibit /><narrative>Input</narrative><display x="-480" y="-90" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="a001df2c-f4bf-4d00-9a78-5cf1f36a8768" name="Output" type="Block"><subsheetid>ab68d20a-cd0b-43ee-a86f-46b32ddc120c</subsheetid><loginhibit /><narrative>Output</narrative><display x="-480" y="-15" w="150" h="60" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage></process></object>
        <object id="66085a0f-6bf6-45e2-b5ed-6345f014f05b" name="MS Excel VBO" xmlns="http://www.blueprism.co.uk/product/process"><process name="MS Excel VBO" version="6.6.0.15260" bpversion="6.6.0.15260" narrative="The VBO replacement for the Common Automation Excel business object" byrefcollection="true" type="object" runmode="Exclusive"><appdef><element name="Application Root"><id>ca515603-8af2-4608-8a70-31028a7d9a0b</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>-133</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="ab6c7fcd-9997-4c5c-9ff1-2dcb5879975a" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="67651307-0389-47bf-ae8d-fd94364e808f" type="Normal" published="True"><name>Remove Blank Rows</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="492548e8-2fa5-473e-9061-df8326d46e4c" type="Normal" published="False"><name>CheckInstanceHandle</name><view><camerax>-54</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="9f7a4a91-68c9-4871-bb65-417e96cc4ad1" type="Normal" published="False"><name>CheckInstanceAndWorkbook</name><view><camerax>-157</camerax><cameray>-70</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="41a07606-d51b-4fe3-a076-7a77a4ca2cde" type="Normal" published="False"><name>CheckFileExists</name><view><camerax>-22</camerax><cameray>-32</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="99e648cc-a136-471c-8424-19071c0fd9e7" type="Normal" published="True"><name>Create Instance</name><view><camerax>-60</camerax><cameray>-42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ec281dc5-ed57-4b8b-9bf5-212e314657aa" type="Normal" published="True"><name>Open Instance</name><view><camerax>209</camerax><cameray>-94</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="7ad81501-44a1-48ab-94fd-9b2c35ed20b8" type="Normal" published="True"><name>Attach</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="2b3544ad-af96-4f40-9b50-16dfbe0600f1" type="Normal" published="True"><name>Attach to workbook</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="6ec3006a-6553-4526-b522-32526c4aa3cc" type="Normal" published="True"><name>Close Instance</name><view><camerax>0</camerax><cameray>-42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="4fb11e41-83d8-461d-8c0d-04cdd2f670e2" type="Normal" published="True"><name>Release Instance</name><view><camerax>0</camerax><cameray>-84</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="dc33871a-9aec-4a29-b811-3ab205ddf41e" type="Normal" published="True"><name>Exit</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="feb8ce9f-299e-4152-85a1-354a5f9d995c" type="Normal" published="True"><name>Close All Instances</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="859e3c31-acbc-48dd-8535-ef2ce9385d70" type="Normal" published="True"><name>Set Current Instance</name><view><camerax>-36</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="69db5cf5-4908-49c7-9027-8f48e26e5b27" type="Normal" published="True"><name>Set Events Enabled</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="268628ce-c0f3-492a-be5c-87b432e16d1d" type="Normal" published="True"><name>Show</name><view><camerax>0</camerax><cameray>-131</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ef10421c-e1ff-4227-b367-c53059a6766d" type="Normal" published="True"><name>Hide</name><view><camerax>-62</camerax><cameray>-56</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="73b8ddb4-b679-4697-b3c4-79ce833a9456" type="Normal" published="True"><name>Create Workbook</name><view><camerax>-81</camerax><cameray>-204</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="2fb01e3f-e275-43bc-83eb-579001da335b" type="Normal" published="True"><name>Open Workbook</name><view><camerax>0</camerax><cameray>-15</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="6632ed99-8751-4c2a-ad00-3cc016300e08" type="Normal" published="True"><name>Activate Workbook</name><view><camerax>-137</camerax><cameray>-75</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="6e7cb0ad-5910-4065-aab2-2919726bae39" type="Normal" published="True"><name>Save Workbook</name><view><camerax>-44</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="76d598ed-b254-4c1e-8004-d4f2928b1450" type="Normal" published="True"><name>Save Current Workbook</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="21a53e34-8128-41cb-ad73-17250758ff23" type="Normal" published="True"><name>Save Workbook As</name><view><camerax>-64</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="81b9e5cd-a91d-4a33-bc23-1602c5fe878f" type="Normal" published="True"><name>Save Current Workbook As</name><view><camerax>-135</camerax><cameray>-3</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="6ccaae8b-c06f-45c8-8772-835218881458" type="Normal" published="True"><name>Close Workbook</name><view><camerax>-232</camerax><cameray>110</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="efe9d5bd-c8f0-42e1-aadc-6c7b0bfdd92c" type="Normal" published="True"><name>Close Current Workbook</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ddb3c741-0c59-4ac8-a260-258fb8eb1674" type="Normal" published="True"><name>Is Read Only</name><view><camerax>-91</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="733c2840-8162-465a-a8f2-7d023087c369" type="Normal" published="True"><name>Activate Worksheet</name><view><camerax>-132</camerax><cameray>-106</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="f78a5f80-c2d5-4e9b-ae08-a56fb8007b18" type="Normal" published="True"><name>Create Worksheet</name><view><camerax>-120</camerax><cameray>-84</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="37a2442f-8e22-4749-8b44-4ef2980f28a6" type="Normal" published="True"><name>Delete Worksheet</name><view><camerax>16</camerax><cameray>25</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="79b9bf7c-222d-4cc3-adc8-5bb337fa6d72" type="Normal" published="True"><name>Move Worksheet</name><view><camerax>85</camerax><cameray>98</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="da83b3dd-0312-4b53-9732-e3f8e29c561f" type="Normal" published="True"><name>Copy and Paste Worksheet Range</name><view><camerax>0</camerax><cameray>84</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30" type="Normal" published="True"><name>Get Worksheet As Collection</name><view><camerax>-242</camerax><cameray>-126</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e58a482d-f349-4f40-9b03-a903156ce1b5" type="Normal" published="True"><name>Get Worksheet As Collection (Fast)</name><view><camerax>0</camerax><cameray>-156</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="92799072-140a-4621-89cd-2da12475dcda" type="Normal" published="True"><name>Get Worksheet as Collection Offset</name><view><camerax>-119</camerax><cameray>-589</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e" type="Normal" published="True"><name>Get Worksheet Range As Collection</name><view><camerax>147</camerax><cameray>-33</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="f743df98-2e69-4559-89b6-32ef6637618d" type="Normal" published="True"><name>Split Worksheet</name><view><camerax>0</camerax><cameray>-21</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="becd6faa-f5c0-4d3a-a48a-cb54d3aa8909" type="Normal" published="True"><name>Get Worksheet Names</name><view><camerax>-10</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67" type="Normal" published="True"><name>Get Worksheet Name</name><view><camerax>-27</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="510b0ce5-bf46-43a1-86a4-72877f427e6f" type="Normal" published="True"><name>Get Worksheet Position</name><view><camerax>0</camerax><cameray>38</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="eacc4634-9985-4a1d-9773-8f79928708ee" type="Normal" published="True"><name>Worksheet Exists</name><view><camerax>105</camerax><cameray>81</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="dc139ac7-b971-481e-9528-b1521ae9fc92" type="Normal" published="True"><name>Get Number Of Rows</name><view><camerax>8</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ed502669-4207-4c88-895d-8c58ec321578" type="Normal" published="True"><name>Go To Cell</name><view><camerax>-6</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="b0b877cd-07ce-4df1-a63b-89fa4d315c4c" type="Normal" published="True"><name>Go To Next Cell</name><view><camerax>-180</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="31ed0ec6-5d0f-4f9e-90c8-1fb7e73e5d5c" type="Normal" published="True"><name>Get Active Cell</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0b5de6c6-ed9a-443d-95b8-142dd521120e" type="Normal" published="True"><name>Find Next Empty Cell</name><view><camerax>0</camerax><cameray>-42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="eaafa766-b0ce-4891-8e6e-de12d6283ae0" type="Normal" published="True"><name>Go To Next Empty Cell Left</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d2d4c80d-3058-4d60-8e96-7b9b12f9ae58" type="Normal" published="True"><name>Go To Next Empty Cell Right</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="5a78c1a5-e339-4f76-9203-d180bee31770" type="Normal" published="True"><name>Go To Next Empty Cell Up</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="82492075-b486-413c-9bd4-05eba466843e" type="Normal" published="True"><name>Go To Next Empty Cell Down</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="5698ca16-b00d-4d62-9d9b-e76e8295b556" type="Normal" published="True"><name>Set Cell Value</name><view><camerax>55</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0dbe03a0-e259-47ab-bee7-7dec41ae32e7" type="Normal" published="True"><name>Write Collection</name><view><camerax>0</camerax><cameray>-63</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0e031661-2f5e-4cb2-949b-97babe59ff81" type="Normal" published="True"><name>Get Cell Value</name><view><camerax>0</camerax><cameray>-4</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d96215cc-750e-4616-8852-1d4d44a9f21b" type="Normal" published="True"><name>Get Active Cell Value</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="17f8ab72-203a-42d4-a59b-a073ccd57bb0" type="Normal" published="True"><name>Get Formatted Cell Value</name><view><camerax>-54</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a031ba9a-3bd2-49b3-8d9b-6f982b34eb3c" type="Normal" published="True"><name>Format Cell</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="9b535bfc-4f80-4d7c-88b5-49b941688030" type="Normal" published="True"><name>Format Current Cell</name><view><camerax>0</camerax><cameray>-28</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="39374841-edab-4ea9-86d9-5f2fff3f1a5f" type="Normal" published="True"><name>Set Window Size</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="904eeb0d-e6a2-408b-99b5-621307252585" type="Normal" published="True"><name>Set Window Location</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d4998c94-d432-4713-81a5-e902535089c6" type="Normal" published="True"><name>Set Window State</name><view><camerax>-11</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="9147cb85-5c6f-4a47-adcf-ab472d5a0b5a" type="Normal" published="True"><name>Select</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a" type="Normal" published="True"><name>Delete</name><view><camerax>82</camerax><cameray>21</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="659749b0-1f00-4e33-956d-6be6172a8739" type="Normal" published="True"><name>Insert</name><view><camerax>0</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="71ebd060-a411-45fc-8f39-132eb3e5ff79" type="Normal" published="True"><name>Copy</name><view><camerax>98</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="5eee765d-c84b-493f-9132-f6a27f296d0e" type="Normal" published="True"><name>Cut</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="035d5ed0-2f39-46ca-80c1-b0127418dc9e" type="Normal" published="True"><name>Paste</name><view><camerax>-282</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="2c59601b-2b70-4c97-a218-0abf1bf7463a" type="Normal" published="True"><name>Write To Clipboard</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="c37e9923-b729-471b-80b1-7d44113ca618" type="Normal" published="True"><name>Protect Workbook</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="7316eded-6aed-4d1d-9eeb-64fbbb8e53a0" type="Normal" published="True"><name>Hide Worksheet</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e62b9c20-62f8-4d28-8f19-de7610e56e1e" type="Normal" published="True"><name>Hide Other Worksheets</name><view><camerax>-276</camerax><cameray>-917</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="1487aa65-ac8a-44e9-a6e9-8b16b4be5199" type="Normal" published="True"><name>Import CSV</name><view><camerax>52</camerax><cameray>88</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="4229da44-68c0-4b51-9d2c-08be4a9d6727" type="Normal" published="True"><name>Run Macro</name><view><camerax>0</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="8f886cd8-eef6-485f-b9f3-0086c90eecdb" name="Start" type="Start"><loginhibit /><display x="0" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>d0d87ebb-154d-4756-8b89-d2d5445479ae</onsuccess></stage><stage stageid="d0d87ebb-154d-4756-8b89-d2d5445479ae" name="End" type="End"><loginhibit /><display x="0" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="13efd9ee-454d-4e73-a19d-91a25c412087" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="180" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><references><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference><reference>System.Windows.Forms.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Collections.Generic</import><import>System.IO</import><import>Microsoft.VisualBasic</import><import>System.Windows.Forms</import><import>System.Data</import><import>System.Diagnostics</import><import>System.Text</import><import>System.Threading</import><import>System.Runtime.InteropServices</import></imports><language>visualbasic</language><globalcode><![CDATA[]]></globalcode><code><![CDATA[
' External functions used to make sure the excel instances are exited and processes killed
Declare Function EndTask Lib "user32.dll" (ByVal hWnd As IntPtr) As Integer
Declare Function FindWindow Lib "user32.dll" Alias "FindWindowA" _
	   (ByVal lpClassName As String, ByVal lpWindowName As String) As IntPtr
Declare Function FindWindowEx Lib "user32.dll" Alias "FindWindowExA" _
       (hWnd1 As IntPtr, hWnd2 As IntPtr, lpsz1 As String, lpsz2 As String) As IntPtr
Declare Function GetWindowThreadProcessId Lib "user32.dll" _
	   (ByVal hWnd As IntPtr, ByRef lpdwProcessId As Integer) As Integer
Declare Function SetLastError Lib "kernel32.dll" _
       (ByVal dwErrCode As Integer) As IntPtr
Declare Function AccessibleObjectFromWindow Lib "oleacc.dll" _
       (hWnd As IntPtr, dwId As Int32, ByRef riid As Guid, <MarshalAs(UnmanagedType.Interface)> ByRef ppvObject As Object) As Int32

' The 'active' instance of excel.
' This is updated on any access of an instance (either adding a new
' instance or getting one)
'
Private CurrentInstance As Object

' Map of instances keyed against the handles which represent them.
'
Private HandleMap As Dictionary(Of Integer, Object)

' Map of handles keyed against the instances they represent.
' Here to ensure we don't assign multiple handles to a single
' instance and bring about a memory leak
'
Private InstanceMap As Dictionary(Of Object, Integer)

' Constructor - this just initialises the collections which map
' the excel instances to handles and vice versa.
Public Sub New()

	Me.HandleMap = New Dictionary(Of Integer, Object)()
	Me.InstanceMap = New Dictionary(Of Object, Integer)()

End Sub

' Execute a sub within a specific timeout period
'
' @param timeout The number of seconds to wait before timing out
' @param name The name of the operation
' @param operation The operation to perform
Private Sub ExecWithTimeout(timeout As Integer, name As String, operation As Action)
    Dim ar = operation.BeginInvoke(Nothing, Nothing)
    If Not ar.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(timeout)) Then
        Throw New TimeoutException(name & " took more than " & timeout & " secs.")
    End If
    operation.EndInvoke(ar)
End Sub

' Execute a function within a specific timeout period
'
' @param timeout The number of seconds to wait before timing out
' @param name The name of the operation
' @param operation The operation to perform
'
' @return The result of the operation
Private Function ExecWithTimeout(Of T)(timeout As Integer, name As String, operation As Func(Of T)) As T
    Dim ar = operation.BeginInvoke(Nothing, Nothing)
    If Not ar.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(timeout)) Then
        Throw New TimeoutException(name & " took more than " & timeout & " secs.")
    End If
    return operation.EndInvoke(ar)
End Function

' Used to hold a reference to the last exception that occurred
' Be careful to set back to nothing when the type has been checked.
Private mLastException As Exception = Nothing

' Loops over all excel instances and gets the instance with a given
' workbook name. This uses active accessibility because:
'     Dim application = GetObject(,"Excel.Application)
'     application.Windows(workbookName).Activate()
' dosen't work if there is more than one instance of excel
'
' @param workBookName The name of the workbook
'
' @return The application instance
Public Function OpenNamedObjectAA(workbookName As String) As Object
    Const OBJID_NATIVEOM = &HFFFFFFF0
    Dim IID_DISPATCH As New Guid("00020400-0000-0000-C000-000000000046")
    Dim workBook As Object = Nothing
    Do
        Dim XLhwnd As IntPtr = FindWindowEx(IntPtr.Zero, XLhwnd, "XLMAIN", Nothing)
        If IntPtr.Equals(XLhwnd, IntPtr.Zero) Then Exit Do
        Dim XLDESKhwnd As IntPtr = FindWindowEx(XLhwnd, IntPtr.Zero, "XLDESK", Nothing)
        Dim WBhwnd As IntPtr = FindWindowEx(XLDESKhwnd, IntPtr.Zero, "EXCEL7", Nothing)
        AccessibleObjectFromWindow(WBhwnd, OBJID_NATIVEOM, IID_DISPATCH, workBook)
        If workBook IsNot Nothing Then
            Dim application As Object = workBook.Application
            If application IsNot Nothing Then
                Try
                    application.Windows(workbookName).Activate()
                    Return application
                Catch ex As Exception
                    Continue Do
                End Try
            End If
        End If
    Loop
    Throw new Exception("Excel with workbook name '" & workBookName & "' not found.")
End Function

' Gets the handle for a given instance
'
' If the instance is not yet held, then it is added to the 
' 	map and a handle is assigned to it. It is also set as the
' 	'current' instance, accessed with a handle of zero in the
' 	below methods.
'
' Either way, the handle which identifies the instance is returned
'
' @param Instance The instance for which a handle is required
'
' @return The handle of the instance
Protected Function GetHandle(Instance As Object) As Integer

	If Instance Is Nothing Then
		Throw New ArgumentNullException("Tried to add an empty instance")
	End If

	' Check if we already have this instance - if so, return it.
	If InstanceMap.ContainsKey(Instance) Then
		CurrentInstance = Instance
		Return InstanceMap(Instance)
	End If

	Dim key as Integer
	For key = 1 to Integer.MaxValue
		If Not HandleMap.ContainsKey(key)
			HandleMap.Add(key, Instance)
			InstanceMap.Add(Instance, key)
			Me.CurrentInstance = Instance
			Return key
		End If
	Next key

	Return 0

End Function


' Gets the instance corresponding to the given handle, setting
' 	the instance as the 'current' instance for future calls
'
' A value of 0 will provide the 'current' instance, which
' 	is set each time an instance is added or accessed.
'
' This will return Nothing if the given handle does not
' correspond to a registered instance, or if the current
' instance was closed and the reference has not been updated.
'
' @param Handle The handle representing the instance required,
' 		or zero to get the 'current' instance.
Protected Function GetInstance(Handle As Integer) As Object

	Dim Instance As Object = Nothing
	
	If Handle = 0 Then
		If CurrentInstance Is Nothing Then
			' Special case - getting the current instance when the
			' instance is not set, try and get a current open instance.
			' If none there, create a new one and assign a handle as if
			' CreateInstance() had been called
		'	Try
		'		Instance = GetObject(,"Excel.Application")
		'	Catch ex as Exception ' Not running
		'		Instance = Nothing
		'	End Try
		'	If Instance Is Nothing Then
				Create_Instance(Handle)
				' Instance = CreateObject("Excel.Application")
				' Force the instance into the maps.
				' GetHandle(Instance)
				' CurrentInstance should now be set.
				' If it's not, we have far bigger problems
		'	End If
		End If
		Return CurrentInstance
	End If

	Instance = HandleMap(Handle)
	If Not Instance Is Nothing Then
		CurrentInstance = Instance
	End If
	Return Instance

End Function

' Helper method in forcing a com object to be released.
Private Sub ReleaseObject(ByVal comOj As Object)
	Try
		System.Runtime.InteropServices.Marshal.ReleaseComObject(comOj)
		System.Runtime.InteropServices.Marshal.FinalReleaseComObject(comOj)
		comOj = Nothing
	Catch ex As Exception
		comOj = Nothing
	Finally
		' Why is GC.Collect being called twice?
		' See https://msdn.microsoft.com/en-us/library/ff647790.aspx?f=255&MSPPError=-2147217396#scalenetchapt05_topic9
		GC.Collect()
		GC.WaitForPendingFinalizers()
		GC.Collect()
	End Try
End Sub

' Close the instance with the given handle, not saving any work, making
' sure that it is removed from this VBO's collection of instances
'
' @param Handle The handle representing the instance to close
Protected Sub CloseInstance(Handle As Integer)
	CloseInstance(Handle, False)
End Sub

' Close the instance with the given handle, saving the work as specified.
'
' @param Handle The handle representing the instance
'
' @param SaveWorkbooks True to save the workbooks before quitting the instance,
' 		False to discard any changes
Protected Sub CloseInstance(Handle As Integer, SaveWorkbooks As Boolean)
	
	Dim Instance As Object = Nothing
	If Handle = 0 AndAlso CurrentInstance Is Nothing Then
		Throw New NullReferenceException("Tried to close nonexistent current instance")
	ElseIf Handle = 0 ' Current Instance - reset it
		Handle = GetHandle(CurrentInstance) ' We need the handle to remove from HandleMap
		Instance = CurrentInstance
		CurrentInstance = Nothing
	Else
		Instance = GetInstance(Handle)
	End If

	Me.HandleMap.Remove(Handle)
	Me.InstanceMap.Remove(Instance)

	Instance.DisplayAlerts = False ' Hide alerts
	
	' First close all the workbooks and the workbooks collection
	Dim wbs as Object = Instance.Workbooks
	If wbs IsNot Nothing Then
		For Each Workbook As Object In wbs
			Workbook.Close(SaveWorkbooks)
			ReleaseObject(Workbook)
		Next
		wbs.Close()
	End If
	ReleaseObject(wbs)

	' Try quitting - sometimes this is enough
	Instance.Quit()
	
	' Try and force a com object release - this might quit excel for us.
	ReleaseObject(Instance)

	' Now if the com object has released the RCW, we need to stop
	' We'll know because if we try and get the version and it fails
	' then the COM object has been cleaned up.
	' If so, end the proc now - we have to assume the instance is gone
	
	Dim Ver as Double = 0.0
	Try
		Ver = Val(Instance.Version)
	Catch ex as Exception
		' Not got the version - assuming cleared up
		Return
	Finally
		SetLastError(0) ' If any errors have occurred thus far, clear them
	End Try

	' Now it's the messy stuff to try and find the excel instance and nuke
	' it from orbit. It's the only way to be sure.

	' The window handle for the excel instance
	Dim hwnd As IntPtr = IntPtr.Zero
	' Later versions of excel expose the window handle
	If Val(Ver) >= 10 Then _
		hwnd = New IntPtr(CType(Instance.Parent.Hwnd, Integer))
		
	' If the window handle isn't set, must be an earlier version of excel
	' Use FindWindow to find the window with the GUID that we set in it on creation
	If IntPtr.Equals(hwnd, IntPtr.Zero) Then _
		hwnd = FindWindow(Nothing, Instance.Caption)
	
	' If the window handle is still zero, the instance must already be closed
	If Not IntPtr.Equals(hwnd, IntPtr.Zero) Then
	
        ' Get the process ID for the window we have
		Dim resp, procId as Integer
        resp = GetWindowThreadProcessId(hwnd, procId)
		
        If procId = 0 Then ' can’t get Process ID
            If EndTask(hwnd) = 0 Then ' EndTask returns a bool - 0 = False
				Throw New ApplicationException("Failed to close Excel Instance.")
			End If
        Else ' We have a process ID - use it to kill excel
			Dim proc As Process = Process.GetProcessById(procId)
			' Try clicking the 'X'
			proc.CloseMainWindow()
			proc.Refresh()

			If Not proc.HasExited Then
				proc.Kill()	' Last resort - kill it with fire
			End If	
		End If	
	End If

End Sub

' Creates a new workbook in the instance represented by the given handle
'
' @param Handle The handle of the instance on which the workbook should be held
'
' @return The workbook object that was created.
Protected Function NewWorkbook(Handle as Integer) As Object

	Dim wb as Object = GetInstance(handle).Workbooks.Add()

	' Create a new Worksheet?
	if wb.Worksheets.Count = 0 Then
		wb.Sheets.Add().Activate()
	Else ' Just use the first sheet
		wb.Sheets(1).Activate()
	End If
	
	Return wb
	
End Function

' Gets the workbook in the given instance with the given name.
'
' @param Handle The handle representing the instance which holds the workbook
'
' @param Name The name of the workbook on the instance
'
' @return The object representing the workbook defined
Protected Function GetWorkbook(Handle As Integer, Name as String) As Object

	Dim wb as Object = Nothing
	If String.IsNullOrEmpty(Name) Then
		wb = GetInstance(Handle).ActiveWorkbook
		If wb Is Nothing ' We need to create a deafult workbook
			wb = NewWorkbook(Handle)
		End If
		Return wb
	Else
		Return GetInstance(Handle).Workbooks(Name)
	End If

End Function

' Gets the worksheet specified by the given handle, workbook name and
' worksheet name. If no such sheet is available, this will create a
' new one and return that
'
' @param Handle The handle identifying the instance which should be
' 		acted on
'
' @param WorkbookName The name of the workbook within the instance
'
' @param WorksheetName The name of the worksheet required
'
' @return The sheet object representing the sheet with the given name
Protected Function GetWorksheet(Handle As Integer, _
		WorkbookName As String, _
		WorksheetName As String) As Object

	Return GetWorksheet(Handle,WorkbookName,WorksheetName,True)

End Function

' Gets the worksheet specified by the given handle, workbook name and
' worksheet name. If no such sheet is available, this will create a
' new one or return Nothing, depending on the given flag
'
' @param Handle The handle identifying the instance which should be
' 		acted on
'
' @param WorkbookName The name of the workbook within the instance
'
' @param WorksheetName The name of the worksheet required
'
' @param CreateIfNotExists True to create the worksheet if it doesn't
' 		exist; False to return Nothing if it doesn't exist.
'
' @return The sheet object representing the sheet required or Nothing
'		if no such sheet exists and CreateIfNotExists was False
Protected Function GetWorksheet(Handle As Integer, _
		WorkbookName As String, _
		WorksheetName As String, _
		CreateIfNotExists As Boolean) As Object

	Dim wb As Object = GetWorkbook(Handle, WorkbookName)
	
	If (String.IsNullOrEmpty(WorksheetName)) Then

		Dim ws as Object = wb.ActiveSheet
		If ws Is Nothing Then
			Return wb.Sheets.Add()
		Else
			Return ws
		End If

	Else
		Dim sheets as Object = wb.Sheets
		If sheets IsNot Nothing Then
			For Each sheet as Object in sheets
				If sheet.Name = WorksheetName Then _
					Return sheet
			Next
		End If
		' Didn't find the sheet...
		If CreateIfNotExists Then

			Dim sheet as Object = sheets.Add()
			sheet.Name = WorksheetName
			Return sheet

		End If
		' Nothing else we can do - return nowt
		Return Nothing

	End If

End Function

' Gets the next cell, relative to a given cell in a given direction
' Note that if the cell is at a boundary, then the same cell is returned.
'
' @param cell : The cell to use as a base cell
'
' @param strDir : one of "L", "R", "U", "D" representing a direction from
' 		the given cell to move in.
'
' @return : The cell object representing the 'next cell' 
Protected Function GetNextCell(cell as Object, strDir as String) As Object
	
	Try
		Select Case strDir
			Case "L"
				cell = cell.Offset(0,-1)
			Case "R"
				cell = cell.Offset(0,1)
			Case "U"
				cell = cell.Offset(-1,0)
			Case "D"
				cell = cell.Offset(1,0)
		End Select
	Catch ex As Exception
		' A COM Exception is thrown if the cell is at a boundary and the offset
		' would break that boundary
	End Try
	
	Return cell

End Function

Const SchemaColumnName As String = "Column Name"

Function GetWorkSheetUsedRangeAsDataTable(
	usedRange as object, 
	firstRowIsHeader As Boolean) As DataTable	
	
	If usedRange Is Nothing Then Throw new ArgumentNullException("usedRange")
	
	Dim range = usedRange.Value
	Dim result = new DataTable()
	
	Dim headingsList = GetFirstRowHeadings(range, firstRowIsHeader)
	For Each heading As String In headingsList
		result.Columns.Add(heading, GetType(string))
	Next
		
	Dim startRowIndex = If(firstRowIsHeader AndAlso range.GetLength(0) > 1, 2, 1)	
	Dim totalRows As Integer = range.GetLength(0)
	Dim totalCols As Integer = range.GetLength(1)
	
	For i As Integer = startRowIndex To totalRows
		Dim currentRow As DataRow = result.NewRow
		result.Rows.Add(currentRow)

		For j As Integer = 1 To totalCols
			Dim value = range(i, j)
			If value Is Nothing Then value = String.Empty
			currentRow.Item(j - 1) = value.ToString()
		Next j
	Next i

	Return result
End Function

Function GetFirstRowHeadings(arr as Object(,), firstRowIsHeader As Boolean) as List(Of String)
	Dim result = new List(Of String)()
	For i as Integer = 1 to arr.GetLength(1)
		Dim value = arr(1, i)
		Dim heading As String = If(value Is Nothing OrElse Not firstRowIsHeader, String.Empty, value.ToString)
		result.Add(heading)
	Next i
	return result
End Function

Function ParseDelimSeparatedVariables(
 data As String,
 delimStr As String,
 schema As DataTable,
 firstRowIsHeader As Boolean) As DataTable

	Const DefaultState As Integer = 0
	Const Instring As Integer = 1
	Const FirstQuote As Integer = 2

	Const Quote As Char = """"c
	If delimStr.Length = 0 Then delimStr = ","
	If delimStr.Length <> 1 Then Throw New Exception("Delimiter must be a single character")

	Dim delim As Char = delimStr(0)

	Dim state As Integer = DefaultState
	Dim firstRow As Boolean = True
	Dim columnValue As New StringBuilder()

	Dim emptySchema As Boolean = schema Is Nothing OrElse schema.Rows.Count = 0
	If emptySchema Then schema = Nothing
	Dim outputCollection As New DataTable()

	If Not emptySchema Then
		For Each schemaRow As DataRow In schema.Rows
			Dim colName As String = schemaRow(SchemaColumnName).ToString
			outputCollection.Columns.Add(colName, GetType(String))
		Next
	End If

	Dim row As DataRow = Nothing
	Dim colIndex As Integer = 0
	Using sw As New StringReader(data)
		While True
			Dim line As String = sw.ReadLine()
			If line Is Nothing Then Exit While

			' If we're not processing a CRLF in the middle of a string, we want to move
			' onto the next row; if we are, we keep the current row and column since we're
			' still writing to that 'cell'.
			If state <> Instring Then
				row = outputCollection.NewRow
				colIndex = 0
			End If
			For Each ch As Char In line
				Select Case ch
					Case delim ' ie. 'ch' is the specified delimiter - "," or "\t"
						Select Case state
							Case Instring
								columnValue.Append(delim)
							Case Else ' Covers 'default' and 'first quote'.
								If firstRow Then
									HandleFirstRow(
										firstRowIsHeader,
										columnValue.ToString(),
										colIndex,
										row,
										schema
									)
								Else
									row(colIndex) = columnValue.ToString
								End If

								columnValue.Length = 0
								state = DefaultState
								colIndex += 1
						End Select
					Case Quote
						Select Case state
							Case FirstQuote
								state = Instring
								columnValue.Append(Quote)
							Case Instring
								state = FirstQuote
							Case Else
								' If we find a quote in the middle of a non-quoted cell, it's
								' a literal quote; otherwise (ie. at the start of a cell), it
								' means the cell value is wrapped - go into 'Instring' state
								If columnValue.Length > 0 Then
									columnValue.Append(Quote)
								Else
									state = Instring
								End If
						End Select
					Case Else
						columnValue.Append(ch)
				End Select
			Next

			If firstRow Then
				HandleFirstRow(
					firstRowIsHeader,
					columnValue.ToString(),
					colIndex,
					row,
					schema
				)
				firstRow = False
				columnValue.Length = 0
				state = DefaultState
				If Not firstRowIsHeader Then outputCollection.Rows.Add(row)

			Else
				' If we're still in the middle of the string we want to include the CRLF in the
				' actual value that we're writing and leave the state at 'Instring'
				If state = Instring Then
					columnValue.Append(vbCrLf)
				Else
					row.Item(colIndex) = columnValue.ToString
					outputCollection.Rows.Add(row)
					columnValue.Length = 0
					state = DefaultState
				End If
			End If

		End While

	End Using

	Return outputCollection

End Function

Sub HandleFirstRow(firstRowIsHeader As Boolean, val As String, colIndex As Integer, row As DataRow, schema As DataTable)
	Dim tab = row.Table
	If schema Is Nothing Then
		If firstRowIsHeader Then
			Dim colName As String = val
			tab.Columns.Add(colName, GetType(String))
		Else
			Dim colName As String = "Column " & tab.Columns.Count
			tab.Columns.Add(colName, GetType(String))
			row(colIndex) = val
		End If
	Else
		If firstRowIsHeader Then
			Dim schemaColName As String = schema.Rows(colIndex)(SchemaColumnName).ToString
			Dim colName As String = val
			If colName <> schemaColName Then
				Throw New Exception("Column name mismatch. Column '" & colName & "' dosen't match schema name of '" & schemaColName & "'")
			End If
		End If
	End If
End Sub

' The common language runtime (CLR) automatically passes locale ID 1033 to all methods and properties
' in the Excel object model that accept locale-sensitive data. There is no way to change this behavior
' automatically for all calls into the object model. However, you can pass a different locale ID to a
' specific method by using InvokeMember to call the method and by passing the locale ID to the culture
' parameter of the method.
' https://msdn.microsoft.com/en-us/library/bb157877.aspx
Private Function Invoke(Instance As Object, Name As String, ParamArray args() As Object) As Object
    Dim culture = Thread.CurrentThread.CurrentCulture
    Return Instance.GetType().InvokeMember(Name, Reflection.BindingFlags.InvokeMethod, Nothing, Instance, args, culture)
End Function

Private Sub SetProperty(Instance As Object, Name As String, ParamArray args As Object())
    Dim culture = Thread.CurrentThread.CurrentCulture
    Instance.GetType().InvokeMember(Name, Reflection.BindingFlags.SetProperty, Nothing, Instance, args, culture)
End Sub

Private Function GetProperty(Instance As Object, Name As String) As Object
    Dim culture = Thread.CurrentThread.CurrentCulture
    Return Instance.GetType().InvokeMember(Name, Reflection.BindingFlags.GetProperty, Nothing, Instance, Nothing, culture)	
End Function

' Gets the clipboard text, ensuring that the retrieval is performed
' on an STA thread so that it retrieves it correctly.
Function GetClipboardText() As String
    Dim data As String = Nothing
    With New Threading.Thread(Sub() data = Clipboard.GetDataObject().GetData(DataFormats.Text, True))
        .SetApartmentState(Threading.ApartmentState.STA)
        .Start()
        .Join()
    End With
    Return data
End Function

' Sets the clipboard text, ensuring that it is done on an STA thread.
Sub SetClipboardText(value as String)
    With New Threading.Thread(Sub() Clipboard.SetText(value))
        .SetApartmentState(Threading.ApartmentState.STA)
        .Start()
        .Join()
    End With
End Sub

]]></code></stage><stage stageid="debd0d09-d7e8-4af4-b718-c69fd2d3db22" name="Clean Up" type="SubSheetInfo"><subsheetid>ab6c7fcd-9997-4c5c-9ff1-2dcb5879975a</subsheetid><narrative>Closes all the instances that have been created / attached to using this business object.</narrative><display x="-180" y="-105" w="180" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="74a37e04-8569-40b9-8cc7-55d419e6c658" name="Start" type="Start"><subsheetid>ab6c7fcd-9997-4c5c-9ff1-2dcb5879975a</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>fedc107e-577b-47d9-a445-c3a3e66ef516</onsuccess></stage><stage stageid="d2814bb7-61fc-4b4f-8fd9-2dd9f79c06ba" name="End" type="End"><subsheetid>ab6c7fcd-9997-4c5c-9ff1-2dcb5879975a</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9864b229-3596-444e-afb1-b46efff51132" name="Create Workbook" type="SubSheetInfo"><subsheetid>73b8ddb4-b679-4697-b3c4-79ce833a9456</subsheetid><narrative>Creates a workbook on the specified instance, returning the resultant name.

Params:
- handle : Number : The handle identifying the instance on which the workbook should be required. The default of zero indicates the current instance.

Returns:
- Workbook Name : Text : The workbook name that Excel has granted to the new workbook. By default, Excel will call it "Book&lt;n&gt;" where &lt;n&gt; is a positive integer.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.</narrative><display x="-255" y="-300" w="330" h="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="e4ba7053-63b7-4fa4-b64b-12309c5d3d51" name="Start" type="Start"><subsheetid>73b8ddb4-b679-4697-b3c4-79ce833a9456</subsheetid><loginhibit /><display x="-15" y="-390" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook should be created. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>852ff62f-6d2b-4031-b675-ec155fd88908</onsuccess></stage><stage stageid="1d707fac-863d-4281-b9d0-a65c74bf374c" name="End" type="End"><subsheetid>73b8ddb4-b679-4697-b3c4-79ce833a9456</subsheetid><loginhibit /><display x="-15" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Workbook Name" narrative="The name of the workbook that Excel has created - this can be changed using the &quot;Save Workbook As&quot; action" stage="workbookname" /></outputs></stage><stage stageid="88aa07c9-ea21-42c6-80da-110e83fc2748" name="new" type="Note"><subsheetid>ab6c7fcd-9997-4c5c-9ff1-2dcb5879975a</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d7cd0bd3-f4fc-4acb-921b-97d3cff31998" name="new" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-195" y="30" w="300" h="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="4ffe88be-5a6a-452e-a183-9d1b9e027326" name="Open Workbook" type="SubSheetInfo"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><narrative>Opens a workbook using the instance specified in the given handle, opening the book represented by the given filename.

Params :
- handle : Number : The handle to the instance in which the workbook should be opened. The default value of zero indicates the current instance.
- File name : Text : The path to the file which should be opened.

Outputs:
- Workbook Name : Text : The name of the workbook that Excel uses to identify it.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
- File Not Found : If the given file does not exist or is not a file.</narrative><display x="-255" y="-165" w="360" h="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="753ce277-ee09-4ee9-841b-827037917616" name="Start" type="Start"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><loginhibit /><preconditions><condition narrative="" /><condition narrative="" /></preconditions><display x="15" y="-255" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required workbook should be opened. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="File name" narrative="The path and name of the file which should be opened." stage="filename" /></inputs><onsuccess>9e0df7e0-ab34-4a97-9f69-db66c88ff5f4</onsuccess></stage><stage stageid="18a306bf-d323-4c4e-83b5-4b226773161c" name="End" type="End"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Workbook Name" narrative="The name used by Excel to identify the workbook - usually this is the file name (without the path)." stage="workbookname" /></outputs></stage><stage stageid="4d2c2635-39a5-41ce-8c67-49eb1db37d55" name="Save Workbook" type="SubSheetInfo"><subsheetid>6e7cb0ad-5910-4065-aab2-2919726bae39</subsheetid><narrative>Saves the workbook using the current name as a filename.

Params:
- handle : Number : The integer identifying the instance on which the workbook should be saved. The default of 0 indicates the current instance.
- Workbook Name : The name of the workbook to be saved. The default of empty indicates that the active workbook should be saved.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</narrative><display x="-285" y="-135" w="420" h="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7c92f23e-cde4-457b-8a6e-2856cf88955e" name="Start" type="Start"><subsheetid>6e7cb0ad-5910-4065-aab2-2919726bae39</subsheetid><loginhibit /><display x="15" y="-195" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook which should be saved resides. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook which should be saved" stage="workbookname" /></inputs><onsuccess>ab6f627b-d630-4bdd-b840-7aac26b5806f</onsuccess></stage><stage stageid="4c75715c-7a4a-491b-804f-261ee86fcd95" name="End" type="End"><subsheetid>6e7cb0ad-5910-4065-aab2-2919726bae39</subsheetid><loginhibit /><display x="15" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="cee07b01-63cb-4d6d-9cc4-d1868ae80a0a" name="Save Workbook As" type="SubSheetInfo"><subsheetid>21a53e34-8128-41cb-ad73-17250758ff23</subsheetid><narrative>Save the given workbook using the given file name.

Params :
- handle : Number : The integer identifying the instance on which the workbook resides. Default (0) indicates the current instance
- Workbook Name : Text : The name of the workbook which should be saved. Default ("") indicates the active workbook.
- File name : Text : The path and name of the file to which the workbook should be saved.

Output :
- New Workbook Name : Text : The new name with which the workbook is identified within the excel instance.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</narrative><display x="-285" y="-180" w="420" h="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b4f79caf-dea6-4a9a-95f0-0c05bea8b485" name="End" type="End"><subsheetid>21a53e34-8128-41cb-ad73-17250758ff23</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="New Workbook Name" narrative="The new workbook name which Excel will use to identify the workbook within the instance." stage="newworkbookname" /></outputs></stage><stage stageid="8ff7cce5-b764-42f9-88ed-51eb82a178c0" name="Activate Worksheet" type="SubSheetInfo"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><narrative>Activates / Creates the worksheet specified by the given parameters 

Params:
- handle : Number : The instance handle;
- Workbook Name : Text : is the name of the workbook on which the sheet resides / should be created;
- Sheet name : Text : The name of the worksheet
- Create If Missing? : Flag : Indicates if the worksheet should be created if one with that name doesn't exist on the workbook - if missing, it will *not* create it.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.
- Worksheet Not Found : If the given worksheet did not exist on the specified workbook.</narrative><display x="-285" y="-165" w="420" h="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ddfe7f54-b5c2-410a-8a5d-3c2b52de9550" name="End" type="End"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><loginhibit /><display x="15" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="cf681fff-ce18-4dcc-b190-da9870383e35" name="Delete Worksheet" type="SubSheetInfo"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><narrative>Deletes the specified worksheet from the workbook.

Params:
- handle : Number : The excel instance handle
- Workbook Name : Text : The name of the workbook
- Worksheet Name : Text : The name of the sheet to delete.
If the sheet doesn't exist, this will fail silently - ie. nothing will occur.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.
- Worksheet Not Found : If the named worksheet did not exist on the specified workbook, or if the active sheet was specified and there was no active sheet.</narrative><display x="-240" y="-135" w="360" h="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c23803d1-15b5-4976-9466-8fb2e49529d3" name="Go To Cell" type="SubSheetInfo"><subsheetid>ed502669-4207-4c88-895d-8c58ec321578</subsheetid><narrative>Activates the cell in the given workbook, identified by the given cell reference.

Params:
- handle : Number: The integer handle identifying the excel instance (0 represents 'active' instance)
- Cell Reference : Text : the cell reference to go to
NOTE - the active sheet in the instance is the one on which the cell is active</narrative><display x="-240" y="-135" w="360" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="717bb32a-6e60-4972-bdcb-10d6c7b769a0" name="Start" type="Start"><subsheetid>ed502669-4207-4c88-895d-8c58ec321578</subsheetid><loginhibit /><display x="15" y="-180" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be navigated to. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Cell Reference" narrative="The cell reference on the currently active sheet within the specified instance which should be navigated to." stage="cellref" /></inputs><onsuccess>dc6f6efd-7724-48b0-8544-8f86f7bb1b8d</onsuccess></stage><stage stageid="f9e7f87b-06e3-441b-a4ed-7cb2a60b38c8" name="End" type="End"><subsheetid>ed502669-4207-4c88-895d-8c58ec321578</subsheetid><loginhibit /><display x="15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f9a7cb58-89e7-4295-be05-54454641b318" name="Set Cell Value" type="SubSheetInfo"><subsheetid>5698ca16-b00d-4d62-9d9b-e76e8295b556</subsheetid><narrative>Sets the specified cell's value to the given value.
This has the side-effect of setting the active cell to that which is specified here.

Exceptions
Office 2013 onwards
There are known issues when attempting to read and write data using the Excel VBO with the application set to run in background mode. These issues can be overcome by using the Show action
</narrative><display x="-225" y="-135" w="330" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="15cc8816-ce32-4cb4-888f-7e42b5cbc653" name="Start" type="Start"><subsheetid>5698ca16-b00d-4d62-9d9b-e76e8295b556</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell value should be set. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Cell Reference" narrative="The reference on the speficied sheet identifying the cell which should be set." stage="cellref" /><input type="text" name="Value" narrative="The value to which the specified cell should be set." stage="value" /></inputs><onsuccess>f54da925-167d-4c17-b44c-1861acd36f9b</onsuccess></stage><stage stageid="3efecc12-e41e-4386-b852-2651ab750ecc" name="End" type="End"><subsheetid>5698ca16-b00d-4d62-9d9b-e76e8295b556</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="69459b62-2608-4fd7-a65e-40074b837222" name="Get Cell Value" type="SubSheetInfo"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><narrative>Gets the value of the specified cell - note that if the cell has some formatting set in it, this does *not* return the formatted value - See "Get Formatted Cell Value".
Note also that this has the side-effect of making the specified cell active.</narrative><display x="-195" y="-105" w="270" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="232e4bda-508e-44c7-8adb-315ce0fab8af" name="CreateWorkbook" type="Code"><subsheetid>73b8ddb4-b679-4697-b3c4-79ce833a9456</subsheetid><loginhibit /><display x="-15" y="-225" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><outputs><output type="text" name="name" stage="workbookname" /></outputs><onsuccess>1d707fac-863d-4281-b9d0-a65c74bf374c</onsuccess><code><![CDATA[
name = NewWorkbook(handle).Name]]></code></stage><stage stageid="6b5a2269-93b3-4e07-ae32-b53e1a63e772" name="filename" type="Data"><subsheetid>21a53e34-8128-41cb-ad73-17250758ff23</subsheetid><display x="-255" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1365c72e-7420-4330-a305-53b0408ec641" name="cellref" type="Data"><subsheetid>5698ca16-b00d-4d62-9d9b-e76e8295b556</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5f4cf65f-1932-4f8c-9902-00080ed74347" name="value" type="Data"><subsheetid>5698ca16-b00d-4d62-9d9b-e76e8295b556</subsheetid><display x="-195" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="50be384a-f88b-477b-9bff-ee76cd5684bc" name="Set Cell Value" type="Code"><subsheetid>5698ca16-b00d-4d62-9d9b-e76e8295b556</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="cellref" expr="[cellref]" /><input type="text" name="value" expr="[value]" /></inputs><onsuccess>3efecc12-e41e-4386-b852-2651ab750ecc</onsuccess><code><![CDATA[GetInstance(handle).ActiveCell.Value = value
Dim activeCell = GetInstance(handle).ActiveCell
SetProperty(activeCell, "Value", value)]]></code></stage><stage stageid="155a039e-a678-4192-866d-0a80004f7b1b" name="cellref" type="Data"><subsheetid>ed502669-4207-4c88-895d-8c58ec321578</subsheetid><display x="-195" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="edbe4d75-3363-4d77-b489-87fb02980fdc" name="Select Cell" type="Code"><subsheetid>ed502669-4207-4c88-895d-8c58ec321578</subsheetid><loginhibit /><display x="15" y="-60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="cellref" expr="[cellref]" /></inputs><onsuccess>f9e7f87b-06e3-441b-a4ed-7cb2a60b38c8</onsuccess><code><![CDATA[
GetWorkbook(handle, "").ActiveSheet.Range(cellref,cellref).Activate()]]></code></stage><stage stageid="476742dd-c37f-49de-9eb5-1a66e5bcda17" name="handle" type="Data"><subsheetid>ed502669-4207-4c88-895d-8c58ec321578</subsheetid><display x="-195" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="f54da925-167d-4c17-b44c-1861acd36f9b" name="Go To Cell" type="SubSheet"><subsheetid>5698ca16-b00d-4d62-9d9b-e76e8295b556</subsheetid><loginhibit /><display x="15" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="Cell Reference" expr="[cellref]" /></inputs><onsuccess>50be384a-f88b-477b-9bff-ee76cd5684bc</onsuccess><processid>ed502669-4207-4c88-895d-8c58ec321578</processid></stage><stage stageid="e7dc5be6-9447-4f5a-b528-e3b4e6e92319" name="handle" type="Data"><subsheetid>5698ca16-b00d-4d62-9d9b-e76e8295b556</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="0b718057-0ae5-4c65-bb5a-d9a14ac2496a" name="handle" type="Data"><subsheetid>21a53e34-8128-41cb-ad73-17250758ff23</subsheetid><display x="-255" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="3fe639e8-b4a0-4f50-886f-fb9c99ed04b2" name="Activate Workbook" type="SubSheetInfo"><subsheetid>6632ed99-8751-4c2a-ad00-3cc016300e08</subsheetid><narrative>Activates the excel workbook identified by the given handle and name.

Params:
- handle : Number : The identifier of the instance which is holding the workbook; 0 (default) indicates the active instance
- Name : Text : The name of the workbook which should be activated

Exceptions:
- Invalid Input Parameter : If the worksheet name parameter is given
- Bad Handle : If the handle does not correspond to an Excel instance</narrative><display x="-240" y="-165" w="360" h="180" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="8084bde3-efbe-44ec-a484-c9b07c3d0b78" name="Start" type="Start"><subsheetid>6632ed99-8751-4c2a-ad00-3cc016300e08</subsheetid><loginhibit /><display x="45" y="-240" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook should be activated. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The workbook name identifying the workbook which should be activated - empty text indicates the currently active workbook, making this a no-op." stage="workbookname" /></inputs><onsuccess>6344b53e-9777-411e-bab1-aee5633bbc7d</onsuccess></stage><stage stageid="f8b84adb-3239-4125-af8d-4b1d02c950a6" name="End" type="End"><subsheetid>6632ed99-8751-4c2a-ad00-3cc016300e08</subsheetid><loginhibit /><display x="45" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="05b66883-e53e-43f9-a4d8-baa1fb79f412" name="handle" type="Data"><subsheetid>6632ed99-8751-4c2a-ad00-3cc016300e08</subsheetid><display x="-240" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="dc6f6efd-7724-48b0-8544-8f86f7bb1b8d" name="Activate Workbook" type="SubSheet"><subsheetid>ed502669-4207-4c88-895d-8c58ec321578</subsheetid><loginhibit /><display x="15" y="-120" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook should be activated. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The workbook name identifying the workbook which should be activated - empty text indicates the currently active workbook, making this a no-op." expr="&quot;&quot;" /></inputs><onsuccess>edbe4d75-3363-4d77-b489-87fb02980fdc</onsuccess><processid>6632ed99-8751-4c2a-ad00-3cc016300e08</processid></stage><stage stageid="1c1bd122-21c0-4b17-92f4-e5459d7921c6" name="handle" type="Data"><subsheetid>73b8ddb4-b679-4697-b3c4-79ce833a9456</subsheetid><display x="-240" y="-165" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="5b35f9f6-e395-4e4b-8dc1-5b2e86b17fbe" name="Close Workbook" type="SubSheetInfo"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><narrative>Closes the specified workbook, saving changes if requested.

Params:
- handle : Number : The integer identifying the instance on which the workbook should be closed. 0 indicates the current instance.
- Workbook Name : Text : The name of the workbook which should be closed. "" indicates the active workbook on the specified instance.
- Save Changes : Flag : True to save the changes (the equivalent of calling 'Save Workbook' before closing the workbook); False to discard any changes when closing the workbook.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</narrative><display x="-540" y="-30" w="450" h="180" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="5f23862f-bb67-4712-ade2-d8d62befeb7b" name="End" type="End"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><loginhibit /><display x="-255" y="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f308d1c5-88b0-455a-bff7-8163c95d1eab" name="Open Workbook" type="Code"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><loginhibit /><display x="15" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="filename" expr="[filename]" /><input type="number" name="handle" expr="[handle]" /><input type="number" name="timeout" expr="[Timeout]" /></inputs><outputs><output type="text" name="name" stage="workbookname" /></outputs><onsuccess>6c2fa22d-1876-46b7-92eb-cf8343d0911f</onsuccess><code><![CDATA[name = ExecWithTimeout(Timeout, "Open Workbook",
Function()
    Dim instance = GetInstance(handle)
    Dim workbooks As object = GetProperty(instance, "Workbooks")
    Dim wb As Object = Invoke(workbooks, "Open", filename)
    Invoke(wb, "Activate")
    Return wb.Name
End Function)]]></code></stage><stage stageid="5d910335-0e44-4e14-8093-292d0737faee" name="handle" type="Data"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><display x="-210" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="7edfc788-b0ea-4933-ac22-6345453b8c6c" name="filename" type="Data"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><display x="-210" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="54e39cf8-9167-44e0-aea5-08d102a67f52" name="Create Instance" type="SubSheetInfo"><subsheetid>99e648cc-a136-471c-8424-19071c0fd9e7</subsheetid><narrative>Creates an instance of Excel, returning a handle with which it can be retrieved using the global object method : GetInstance(handle).</narrative><display x="-255" y="-120" w="330" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="2eee0d2a-9595-449a-bbdc-8fb0c5153180" name="Close Instance" type="SubSheetInfo"><subsheetid>6ec3006a-6553-4526-b522-32526c4aa3cc</subsheetid><narrative>Closes the instance represented by the given handle, saving the changes or not as specified.

Params:
- handle : Number : The handle identifying the instance that should be closed; The default of 0 will close the 'current active' instance - ie. the last one accessed. Note that following the 'current active' instance being closed, the current instance will not be set.
- Save Changes : Flag : True to save the instance's workbooks before closing; False to just close the instance.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
</narrative><display x="-255" y="-150" w="390" h="180" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b394cfde-b1ec-4f16-b977-d1e1ffd337be" name="Start" type="Start"><subsheetid>6ec3006a-6553-4526-b522-32526c4aa3cc</subsheetid><loginhibit /><display x="15" y="-225" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance to be closed. Zero indicates the currently active instance." stage="handle" /><input type="flag" name="Save Changes" narrative="True to save the changes to the open workbooks on the instance, False to discard any changes. Default is False." stage="savechanges" /></inputs><onsuccess>b06ec4ea-540a-4321-a1f9-a645f288eb9e</onsuccess></stage><stage stageid="5d9b206b-bf58-47fe-806b-c2d6807d911e" name="End" type="End"><subsheetid>6ec3006a-6553-4526-b522-32526c4aa3cc</subsheetid><loginhibit /><display x="15" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9798ad3a-b44f-4102-a9d1-0861103be2d8" name="Open Instance" type="SubSheetInfo"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><narrative>Opens a currently running instance of Excel with the given workbook name.

If no workbook name is given, it opens the active instance of Excel. If there is no instance of Excel currently running, it will create a new one.

Params:
- WorkbookName : Text : should correspond to the workbook which should be opened - an empty value will cause the first activated instance of Excel to be opened.

Returns:
- handle : Number : The numeric handle with which this instance can be identified</narrative><display x="-210" y="-195" w="270" h="180" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0d071afd-6ab3-43d1-ac0e-1951c7598b19" name="Start" type="Start"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="15" y="-270" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Workbook Name" narrative="The name of the workbook which should be opened. An empty value indicates that the first activated instance of Excel should be opened." stage="workbookname" /><input type="flag" name="Enable Events?" narrative="Flag to indicate whether events (ie. macros) should be enabled on the given instance. Default is True" stage="Enable Events" /></inputs><onsuccess>a08aa147-8eee-4f21-a683-142cb1680af6</onsuccess></stage><stage stageid="754832af-1144-48ff-8ab0-bb6c86d3f78e" name="End" type="End"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="15" y="165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="handle" narrative="The integer handle with which the instance can be identified in later actions." stage="handle" /></outputs></stage><stage stageid="6a0587c3-1640-4af9-9199-62382cc11cdb" name="Start" type="Start"><subsheetid>99e648cc-a136-471c-8424-19071c0fd9e7</subsheetid><loginhibit /><display x="-15" y="-165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Enable Events" narrative="Flag to indicate that events should be enabled / disabled on the attached instance - defaulted to True" stage="Enable Events" /></inputs><onsuccess>c642c278-2fc8-4504-826c-25e0281a26af</onsuccess></stage><stage stageid="d337a2cf-1121-4619-a1b1-f7f19bea974e" name="End" type="End"><subsheetid>99e648cc-a136-471c-8424-19071c0fd9e7</subsheetid><loginhibit /><display x="-15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="handle" narrative="An integer which can be used to identify the created instance in subsequent actions" stage="handle" /></outputs></stage><stage stageid="c642c278-2fc8-4504-826c-25e0281a26af" name="Create Instance" type="Code"><subsheetid>99e648cc-a136-471c-8424-19071c0fd9e7</subsheetid><loginhibit /><display x="-15" y="-105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="handle" stage="handle" /></outputs><onsuccess>a13edde2-3883-4007-9719-92f0e1009ddd</onsuccess><code><![CDATA[
Dim excel as Object = CreateObject("Excel.Application")

' Create a GUID with which we can kill the instance later
' if we have to play hardball to get rid of it.
excel.Caption = System.Guid.NewGuid().ToString().ToUpper()

handle = GetHandle(excel)]]></code></stage><stage stageid="56408aa5-2607-4026-bbb0-ee39b8c304be" name="handle" type="Data"><subsheetid>99e648cc-a136-471c-8424-19071c0fd9e7</subsheetid><display x="-255" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bb0ff5ea-0f21-4e70-a3b3-2eaf0baa3dc5" name="Set Current Instance" type="SubSheetInfo"><subsheetid>859e3c31-acbc-48dd-8535-ef2ce9385d70</subsheetid><narrative>Sets the "current active" instance to that specified.

Params:
- handle : Number : The handle of the instance that should be set as the current instance. The default of zero only has the effect of throwing an exception if no current instance is set, otherwise it's a no-op.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
</narrative><display x="-225" y="-135" w="330" h="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="773582ee-ed72-4483-9b24-9e4f66cf590e" name="Start" type="Start"><subsheetid>859e3c31-acbc-48dd-8535-ef2ce9385d70</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-195" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance which should be made the 'current' one. The default of zero indicates the current, er, 'current' one - ie. this action has no effect other than validating that there is a current instance." stage="handle" /></inputs><onsuccess>79986761-82ee-46d2-83d5-4e3375b886be</onsuccess></stage><stage stageid="b272722b-ab35-4a09-9082-3cc31a0999b5" name="End" type="End"><subsheetid>859e3c31-acbc-48dd-8535-ef2ce9385d70</subsheetid><loginhibit /><display x="15" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d7897c32-9be3-483a-bca8-3fee7d1af8b5" name="handle" type="Data"><subsheetid>859e3c31-acbc-48dd-8535-ef2ce9385d70</subsheetid><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="e3866da9-69bc-4edc-9173-0f9d0013190a" name="handle" type="Data"><subsheetid>6ec3006a-6553-4526-b522-32526c4aa3cc</subsheetid><display x="-210" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="7e31a12c-4578-4202-b034-a306f3ee679d" name="Close Instance" type="Code"><subsheetid>6ec3006a-6553-4526-b522-32526c4aa3cc</subsheetid><loginhibit /><display x="15" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="flag" name="savechanges" expr="[savechanges]" /><input type="number" name="timeout" expr="[Timeout]" /></inputs><onsuccess>5d9b206b-bf58-47fe-806b-c2d6807d911e</onsuccess><code><![CDATA[ExecWithTimeout(Timeout,"Close Instance",
Sub() CloseInstance(handle, savechanges))]]></code></stage><stage stageid="eaefcb8d-64bd-4782-a39c-6ea00bb157b2" name="CheckInstanceHandle" type="SubSheetInfo"><subsheetid>492548e8-2fa5-473e-9061-df8326d46e4c</subsheetid><narrative>Checks if the handle given can be used to access a valid instance.

This means that the handle is a non-zero value which represents a handle, or it is zero and a 'current instance' is set (current instance is set every time an instance is created or accessed using GetInstance() - it may be set to Nothing if an instance is closed).

- handle is the handle to check that it represents a valid instance

Exceptions:
- Bad Handle : If the given handle doesn't represent an instance</narrative><display x="-300" y="-120" w="390" h="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="19668af6-5fa9-48b7-9f6e-e2caf5795b69" name="Start" type="Start"><subsheetid>492548e8-2fa5-473e-9061-df8326d46e4c</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle representing the instance." stage="handle" /></inputs><onsuccess>34b692da-278c-4018-96ec-a9d03f696b43</onsuccess></stage><stage stageid="a4c8054c-d063-42e0-8063-c8972459baa3" name="End" type="End"><subsheetid>492548e8-2fa5-473e-9061-df8326d46e4c</subsheetid><loginhibit /><display x="-30" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b06ec4ea-540a-4321-a1f9-a645f288eb9e" name="CheckInstanceHandle" type="SubSheet"><subsheetid>6ec3006a-6553-4526-b522-32526c4aa3cc</subsheetid><loginhibit /><display x="15" y="-150" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>7e31a12c-4578-4202-b034-a306f3ee679d</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="34b692da-278c-4018-96ec-a9d03f696b43" name="Check Handle" type="Code"><subsheetid>492548e8-2fa5-473e-9061-df8326d46e4c</subsheetid><loginhibit /><display x="-30" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><outputs><output type="flag" name="HandleMissing" stage="HandleMissing" /></outputs><onsuccess>a7383095-97e9-4fa8-90e0-ad186e9df285</onsuccess><code><![CDATA[
' Just ensure that the handle references a valid instance
HandleMissing = (GetInstance(handle) is Nothing)]]></code></stage><stage stageid="1468c19b-a6a0-44e0-b096-5f325448f3fb" name="handle" type="Data"><subsheetid>492548e8-2fa5-473e-9061-df8326d46e4c</subsheetid><display x="-195" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="52d17605-ad90-4a36-aa9d-47e5418dba04" name="HandleMissing" type="Data"><subsheetid>492548e8-2fa5-473e-9061-df8326d46e4c</subsheetid><display x="-195" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a7383095-97e9-4fa8-90e0-ad186e9df285" name="Is Handle Missing?" type="Decision"><subsheetid>492548e8-2fa5-473e-9061-df8326d46e4c</subsheetid><loginhibit /><display x="-30" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[HandleMissing]" /><ontrue>8b5e76e6-a81e-4377-b161-1bef1ff3d753</ontrue><onfalse>a4c8054c-d063-42e0-8063-c8972459baa3</onfalse></stage><stage stageid="8b5e76e6-a81e-4377-b161-1bef1ff3d753" name="Bad Instance Handle" type="Exception"><subsheetid>492548e8-2fa5-473e-9061-df8326d46e4c</subsheetid><display x="135" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Bad Handle" detail="&quot;Handle: &quot; &amp; [handle] &amp; &quot; does not correspond to an Excel Instance&quot;" /></stage><stage stageid="79986761-82ee-46d2-83d5-4e3375b886be" name="CheckInstanceHandle" type="SubSheet"><subsheetid>859e3c31-acbc-48dd-8535-ef2ce9385d70</subsheetid><loginhibit /><display x="15" y="-120" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>b272722b-ab35-4a09-9082-3cc31a0999b5</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="2db56ca3-8def-419f-a3e3-ac8408915c69" name="Open Named Instance" type="Code"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="15" y="-135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="WorkbookName" expr="[workbookname]" /><input type="number" name="timeout" expr="[Timeout]" /></inputs><outputs><output type="number" name="handle" stage="handle" /></outputs><onsuccess>add1def4-fc64-4534-bbb0-d3ac07611a85</onsuccess><code><![CDATA[Dim obj = ExecWithTimeout(Timeout, "Open Named Instance",
Function() OpenNamedObjectAA(WorkbookName))
handle = GetHandle(obj)]]></code></stage><stage stageid="6e2accad-a08b-4b28-9551-f44a9a291607" name="handle" type="Data"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><display x="-210" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="fe8e6a89-2552-4e75-9d44-72240a365783" name="workbookname" type="Data"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><display x="-210" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a08aa147-8eee-4f21-a683-142cb1680af6" name="Is WorkbookName empty?" type="Decision"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="15" y="-210" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="Trim([workbookname])=&quot;&quot;" /><ontrue>aaa7ff33-69b5-4636-8766-e0556ee48bec</ontrue><onfalse>2db56ca3-8def-419f-a3e3-ac8408915c69</onfalse></stage><stage stageid="aaa7ff33-69b5-4636-8766-e0556ee48bec" name="Open Arbitrary Instance" type="Code"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="195" y="-210" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Timeout" expr="[Timeout]" /></inputs><outputs><output type="number" name="handle" stage="handle" /></outputs><onsuccess>51d7d624-e8bf-42b7-afdd-8d090b584865</onsuccess><code><![CDATA[Dim obj As Object = Nothing
Try
    obj = ExecWithTimeout(timeout,"Get Object",
        Function() GetObject(,"Excel.Application"))
Catch ex As TimeoutException
    mLastException = ex
    Throw
End Try
If obj Is Nothing Then Throw New Exception("Could not Get Object")

' GetObject may return an unusable wrapper (possibly if instance is shutting
' down) which results in a "COM target does not implement IDispatch" exception
' when accessing members of the object. If reading the EnableEvents property 
' results in an exception, the recover stage will run and a new instance will 
' be created instead.
Dim tempEnableEvents = obj.EnableEvents

handle = GetHandle(obj)]]></code></stage><stage stageid="fba0fa7c-4ed5-4652-b4ae-08770f5f3867" name="No Open Instances" type="Recover"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="375" y="-210" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>9474db50-6935-47fa-b862-4aa1a49143f8</onsuccess></stage><stage stageid="df0b2b99-8c10-4cf4-9d2d-c3ccf515c960" name="Carry On, Bertram" type="Resume"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="375" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>7fb1ba2f-64f1-417b-9b97-479efb954a9d</onsuccess></stage><stage stageid="a6205e66-5e1f-4360-86a2-8f1325751c3c" name="Create Instance" type="SubSheet"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="375" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Enable Events" narrative="Flag to indicate that events should be enabled / disabled on the attached instance - defaulted to True" expr="True" /></inputs><outputs><output type="number" name="handle" narrative="An integer which can be used to identify the created instance in subsequent actions" stage="handle" /></outputs><onsuccess>df0b2b99-8c10-4cf4-9d2d-c3ccf515c960</onsuccess><processid>99e648cc-a136-471c-8424-19071c0fd9e7</processid></stage><stage stageid="852ff62f-6d2b-4031-b675-ec155fd88908" name="CheckInstanceHandle" type="SubSheet"><subsheetid>73b8ddb4-b679-4697-b3c4-79ce833a9456</subsheetid><loginhibit /><display x="-15" y="-300" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>232e4bda-508e-44c7-8adb-315ce0fab8af</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="59ebf811-1faf-4486-8630-6d2de19027f5" name="CheckType" type="Decision"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="375" y="-75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="ExceptionType()=&quot;Internal&quot;" /><ontrue>a6205e66-5e1f-4360-86a2-8f1325751c3c</ontrue><onfalse>567674ba-270a-4107-ada5-1dae59125522</onfalse></stage><stage stageid="567674ba-270a-4107-ada5-1dae59125522" name="RethrowException" type="Exception"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><display x="570" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception localized="yes" type="" detail="" usecurrent="yes" /></stage><stage stageid="9e0df7e0-ab34-4a97-9f69-db66c88ff5f4" name="CheckInstanceHandle" type="SubSheet"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><loginhibit /><display x="15" y="-195" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>41c51e08-6c3e-4cbc-bc30-31936476aa7d</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="4a034863-88fc-4111-a656-18471e002741" name="workbookname" type="Data"><subsheetid>6632ed99-8751-4c2a-ad00-3cc016300e08</subsheetid><loginhibit /><narrative>The name of the workbook</narrative><display x="-240" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="366f8bd4-fafd-47cc-98a3-0afb7d697fe9" name="ActivateWorkbook" type="Code"><subsheetid>6632ed99-8751-4c2a-ad00-3cc016300e08</subsheetid><loginhibit /><display x="45" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="name" expr="[workbookname]" /></inputs><onsuccess>f8b84adb-3239-4125-af8d-4b1d02c950a6</onsuccess><code><![CDATA[
GetWorkbook(handle,name).Activate()]]></code></stage><stage stageid="e74de56c-16cf-4cd7-8ecf-fabdf05e7311" name="handle" type="Data"><subsheetid>6e7cb0ad-5910-4065-aab2-2919726bae39</subsheetid><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="e45f2d66-35c1-40fd-a729-754cfabbb5ab" name="SaveWorkbook" type="Code"><subsheetid>6e7cb0ad-5910-4065-aab2-2919726bae39</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="number" name="timeout" expr="[Timeout]" /></inputs><onsuccess>4c75715c-7a4a-491b-804f-261ee86fcd95</onsuccess><code><![CDATA[ExecWithTimeout(Timeout, "Save Workbook",
Sub()
    Dim wb as Object = GetWorkbook(handle,workbookname)
    Dim excel as Object = wb.Application
    excel.DisplayAlerts = False
    Invoke(wb, "Save")
    excel.DisplayAlerts = True
End Sub)]]></code></stage><stage stageid="8ba3f3c5-2585-44db-9393-a681e9ff1111" name="workbookname" type="Data"><subsheetid>6e7cb0ad-5910-4065-aab2-2919726bae39</subsheetid><display x="-195" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6bc9d285-c937-4336-89b3-aa7acf379075" name="Start" type="Start"><subsheetid>21a53e34-8128-41cb-ad73-17250758ff23</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook which should be saved resides. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook which should be saved" stage="workbookname" /><input type="text" name="Filename" narrative="The full path and filename to which the workbook should be saved." stage="filename" /></inputs><onsuccess>7fa4c0ab-6c38-4a55-915a-48e7ce529979</onsuccess></stage><stage stageid="a6943793-fb0e-491c-bdc1-ccf04ee31e6d" name="workbookname" type="Data"><subsheetid>21a53e34-8128-41cb-ad73-17250758ff23</subsheetid><display x="-255" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8b526d9f-c7bd-4190-8c33-a6f5ad7982fa" name="SaveWorkbookAs" type="Code"><subsheetid>21a53e34-8128-41cb-ad73-17250758ff23</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="text" name="filename" expr="[filename]" /><input type="number" name="Timeout" expr="[Timeout]" /></inputs><outputs><output type="text" name="newworkbookname" stage="newworkbookname" /></outputs><onsuccess>b4f79caf-dea6-4a9a-95f0-0c05bea8b485</onsuccess><code><![CDATA[newworkbookname = ExecWithTimeout(Timeout, "Save Workbook As",
Function()
    Dim wb as Object  = GetWorkbook(handle,workbookname)
    Dim excel as Object = wb.Application

    excel.DisplayAlerts = False
    wb.SaveAs(filename)
    excel.DisplayAlerts = True

    Return wb.Name
End Function)]]></code></stage><stage stageid="a7fd5308-fe75-448e-99ad-e104521ee580" name="CheckInstanceAndWorkbook" type="SubSheetInfo"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><narrative>Checks the instance and workbook values, throwing an exception if they are invalid.

Params:
- instance : Number : The integer value representing an Excel instance. The default value of zero represents the last activated instance.
- Workbook Name : Text : The name of the workbook on the instance to check. An empty string represents the 'active' workbook.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</narrative><display x="-240" y="-150" w="360" h="180" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d69e69ce-7251-40e1-b779-c9951ee36cbb" name="Start" type="Start"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer representing an Excel instance" stage="handle" /><input type="text" name="workbookname" narrative="The name of the workbook to check - &quot;&quot; to indicate the active workbook" stage="workbookname" /></inputs><onsuccess>16e7e153-e022-4c0b-9af2-ac69b52f855a</onsuccess></stage><stage stageid="bf3ac1a2-7f2a-4071-89c6-73cfa8f8c60d" name="End" type="End"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="16e7e153-e022-4c0b-9af2-ac69b52f855a" name="CheckInstanceHandle" type="SubSheet"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><loginhibit /><display x="15" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>d4997ba5-8e1f-4585-a093-376eb725f14d</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="b6c9fba5-0c8e-4e66-9cf2-8f2f1e5f6118" name="Workbook Found?" type="Decision"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><loginhibit /><display x="15" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[workbookfound]" /><ontrue>bf3ac1a2-7f2a-4071-89c6-73cfa8f8c60d</ontrue><onfalse>62e3710c-2e7e-4507-a49b-0009b3585ba3</onfalse></stage><stage stageid="62e3710c-2e7e-4507-a49b-0009b3585ba3" name="Workbook Not Found" type="Exception"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><narrative>Thrown when a workbook name was not found</narrative><display x="195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Workbook Not Found" detail="&quot;Workbook named: &quot; &amp; [workbookname] &amp; &quot; not found in instance: &quot; &amp; [handle]" /></stage><stage stageid="c3051222-78b2-48d6-9813-d71f854c5e81" name="handle" type="Data"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="6bcb687a-3390-4a83-8690-fba44345b1a8" name="workbookname" type="Data"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><loginhibit /><narrative>The name of the workbook</narrative><display x="-195" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ba694738-8f03-4a1c-a7b1-d946dc55c028" name="workbookfound" type="Data"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><loginhibit /><display x="-195" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="d4997ba5-8e1f-4585-a093-376eb725f14d" name="CheckWorkbook" type="Code"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><loginhibit /><display x="15" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="number" name="timeout" expr="[Timeout]" /></inputs><outputs><output type="flag" name="workbookfound" stage="workbookfound" /></outputs><onsuccess>b6c9fba5-0c8e-4e66-9cf2-8f2f1e5f6118</onsuccess><code><![CDATA[
Try
	ExecWithTimeout(timeout,"Get Workbook",
        Sub() GetWorkbook(handle,workbookname))	
	workbookfound = True
Catch ex as Exception
	If ex.Message.IndexOf("DISP_E_BADINDEX")<>-1 Then
		workbookfound = False
	Else
		Throw ex
	End If
End Try]]></code></stage><stage stageid="ab6f627b-d630-4bdd-b840-7aac26b5806f" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>6e7cb0ad-5910-4065-aab2-2919726bae39</subsheetid><loginhibit /><display x="15" y="-120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>e45f2d66-35c1-40fd-a729-754cfabbb5ab</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="7fa4c0ab-6c38-4a55-915a-48e7ce529979" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>21a53e34-8128-41cb-ad73-17250758ff23</subsheetid><loginhibit /><display x="15" y="-75" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>8b526d9f-c7bd-4190-8c33-a6f5ad7982fa</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="d52e7a12-1a97-4bcf-9014-5a4ad93aa054" name="Close Workbook" type="Code"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><loginhibit /><display x="-255" y="150" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="name" expr="[workbookname]" /><input type="number" name="timeout" expr="[Timeout]" /></inputs><onsuccess>5f23862f-bb67-4712-ade2-d8d62befeb7b</onsuccess><code><![CDATA[ExecWithTimeout(Timeout, "Close Workbook",
Sub()
    Dim wb as Object = GetWorkbook(handle,name)
    Dim app as Object = wb.Application

    app.DisplayAlerts = False
    wb.Close(False)
    app.DisplayAlerts = True
End Sub)]]></code></stage><stage stageid="3a83f920-ccd5-4dc3-95ee-4c5a195c5191" name="handle" type="Data"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><display x="-465" y="120" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="7b233620-de4e-40ff-9a99-af09b1574d08" name="workbookname" type="Data"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><display x="-465" y="165" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="85080efc-4429-45d0-9248-dfcceaa60a27" name="Start" type="Start"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="-255" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook which should be closed resides. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook which should be closed." stage="workbookname" /><input type="flag" name="Save Data" narrative="True to save the data before closing the workbook; The default of False will discard any changes before closing the workbook." stage="savedata" /></inputs><onsuccess>52c31124-7463-40b9-8d24-9ffebe12e167</onsuccess></stage><stage stageid="b481dbd1-022d-42b5-a2bc-5bfbbc233772" name="savedata" type="Data"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><loginhibit /><display x="-465" y="210" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="52c31124-7463-40b9-8d24-9ffebe12e167" name="Save Data?" type="Decision"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><loginhibit /><display x="-255" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[savedata]" /><ontrue>16f6c60c-721b-44be-9e97-b5b518e0f360</ontrue><onfalse>68e0d10e-5b8a-4ccb-a42b-67192ce2ede1</onfalse></stage><stage stageid="16f6c60c-721b-44be-9e97-b5b518e0f360" name="Save Workbook" type="SubSheet"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><loginhibit /><display x="-120" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="Workbook Name" expr="[workbookname]" /></inputs><onsuccess>cf877504-31ed-4e77-b72f-b00469c37fc7</onsuccess><processid>6e7cb0ad-5910-4065-aab2-2919726bae39</processid></stage><stage stageid="68e0d10e-5b8a-4ccb-a42b-67192ce2ede1" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><loginhibit /><display x="-255" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>d52e7a12-1a97-4bcf-9014-5a4ad93aa054</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="cf877504-31ed-4e77-b72f-b00469c37fc7" name="anchor1" type="Anchor"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><loginhibit /><display x="-120" y="150" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>d52e7a12-1a97-4bcf-9014-5a4ad93aa054</onsuccess></stage><stage stageid="cdb03710-27a7-4412-964a-73e4b9bd1a07" name="noteybenny" type="Note"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><loginhibit /><narrative>Note: CheckInstanceAndWorkbook is done as part of SaveWorkbook, so no need to do it again</narrative><display x="15" y="60" w="180" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f39e78b7-d81a-43de-af4f-ea3ce7a918a2" name="handle" type="Data"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><display x="-300" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="1f02e77b-3ca1-40a7-a64b-35fdad519172" name="workbookname" type="Data"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><display x="-300" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6344b53e-9777-411e-bab1-aee5633bbc7d" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>6632ed99-8751-4c2a-ad00-3cc016300e08</subsheetid><loginhibit /><display x="45" y="-165" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>366f8bd4-fafd-47cc-98a3-0afb7d697fe9</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="ba48be23-80aa-4b44-beef-dbc6a7fb5901" name="VerifyFileExists" type="SubSheetInfo"><subsheetid>41a07606-d51b-4fe3-a076-7a77a4ca2cde</subsheetid><narrative>Checks if the given file exists.

Params:
- File name : Text : Path to the file to check

Exceptions:
- File Not Found : If the given file does not exist or is not a file.</narrative><display x="-210" y="-120" w="240" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0c6df86d-8ca7-4778-adeb-2c570998768f" name="Start" type="Start"><subsheetid>41a07606-d51b-4fe3-a076-7a77a4ca2cde</subsheetid><loginhibit /><display x="-15" y="-165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="filename" narrative="The filename to check to ensure it exists." stage="filename" /></inputs><onsuccess>e28c5aa8-d587-4390-843e-b97c32c2cdb8</onsuccess></stage><stage stageid="d465101e-fa27-4434-8413-515e331d1389" name="End" type="End"><subsheetid>41a07606-d51b-4fe3-a076-7a77a4ca2cde</subsheetid><loginhibit /><display x="-15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="8d315224-d32b-4a85-aae0-3ee4d3b98c9c" name="filename" type="Data"><subsheetid>41a07606-d51b-4fe3-a076-7a77a4ca2cde</subsheetid><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="86877e71-923f-4480-9b41-a5a7f4dc60a5" name="fileexists" type="Data"><subsheetid>41a07606-d51b-4fe3-a076-7a77a4ca2cde</subsheetid><loginhibit /><display x="-195" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="e28c5aa8-d587-4390-843e-b97c32c2cdb8" name="File Exists?" type="Code"><subsheetid>41a07606-d51b-4fe3-a076-7a77a4ca2cde</subsheetid><loginhibit /><display x="-15" y="-105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="filename" expr="[filename]" /></inputs><outputs><output type="flag" name="fileexists" stage="fileexists" /></outputs><onsuccess>d43bfe27-76d7-4542-b7ad-ba696468713e</onsuccess><code><![CDATA[
fileexists = File.Exists(filename)]]></code></stage><stage stageid="d43bfe27-76d7-4542-b7ad-ba696468713e" name="Does File Exist?" type="Decision"><subsheetid>41a07606-d51b-4fe3-a076-7a77a4ca2cde</subsheetid><loginhibit /><display x="-15" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[fileexists]" /><ontrue>d465101e-fa27-4434-8413-515e331d1389</ontrue><onfalse>11a4a0e7-8810-493b-9409-df70ca4dc5b2</onfalse></stage><stage stageid="11a4a0e7-8810-493b-9409-df70ca4dc5b2" name="File Not Found" type="Exception"><subsheetid>41a07606-d51b-4fe3-a076-7a77a4ca2cde</subsheetid><display x="135" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="File Not Found" detail="&quot;File: &quot; &amp; [filename] &amp; &quot; does not exist or is not a file&quot;" /></stage><stage stageid="41c51e08-6c3e-4cbc-bc30-31936476aa7d" name="VerifyFileExists" type="SubSheet"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><loginhibit /><display x="15" y="-135" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="filename" expr="[filename]" /></inputs><onsuccess>f308d1c5-88b0-455a-bff7-8163c95d1eab</onsuccess><processid>41a07606-d51b-4fe3-a076-7a77a4ca2cde</processid></stage><stage stageid="60533ca6-ea95-4425-b684-87e7517782aa" name="Start" type="Start"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><loginhibit /><display x="15" y="-225" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet which should be activated resides. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook in which the sheet exists - The default empty value indicates the currently active workbook on the specified instance." stage="workbookname" /><input type="text" name="Worksheet Name" narrative="The name of the sheet which should be activated. The default empty text value indicates that the currently active sheet should be, er, activated, making this a no-op." stage="worksheetname" /><input type="flag" name="Create If Missing?" narrative="True to create the sheet if it isn't present on the specified workbook; False to not do so." stage="createifmissing" /></inputs><onsuccess>b5d5c5b0-1e3b-438b-b988-6058174ec5ba</onsuccess></stage><stage stageid="63d363e1-c78b-4332-815c-06f9d6f7a7df" name="OpenWorksheet" type="Code"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><loginhibit /><display x="15" y="-105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="text" name="worksheetname" expr="[worksheetname]" /><input type="flag" name="createifmissing" expr="[createifmissing]" /></inputs><outputs><output type="flag" name="sheetexists" stage="sheetexists" /></outputs><onsuccess>3a854b87-0e5a-46dd-8181-a58f97555aa8</onsuccess><code><![CDATA[
Dim ws as Object = GetWorksheet(handle,workbookname,worksheetname,createifmissing)
sheetexists = ws IsNot Nothing 
If sheetexists then ws.Activate()]]></code></stage><stage stageid="b5d5c5b0-1e3b-438b-b988-6058174ec5ba" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><loginhibit /><display x="15" y="-165" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>63d363e1-c78b-4332-815c-06f9d6f7a7df</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="1dccafb3-fd07-4362-b343-e87c1a67e83e" name="worksheetname" type="Data"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><display x="-180" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6b35d569-0eb2-4c01-bb88-e5f7c41bde81" name="End" type="End"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="fab4ac4b-d2f7-4f1c-a0c3-d6dd0cd01f9b" name="handle" type="Data"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><display x="-195" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="60f1e726-ab7f-437a-8bda-36148238d510" name="workbookname" type="Data"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><display x="-195" y="45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="13ac609e-b9ca-4a72-907c-d7656496f5ab" name="Start" type="Start"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><loginhibit /><display x="15" y="-195" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet which should be deleted resides. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook which contains the sheet to be deleted. The default empty value indicates the currently active workbook on the specified instance." stage="workbookname" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet to be deleted. The default empty value indicates the currently active worksheet." stage="worksheetname" /></inputs><onsuccess>5346c305-4024-4d1d-8806-c1b20f16c10d</onsuccess></stage><stage stageid="982dd82e-af43-49cb-a4b1-58da1ccfeb33" name="Delete Worksheet" type="Code"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="text" name="worksheetname" expr="[worksheetname]" /></inputs><outputs><output type="flag" name="sheetexisted" stage="sheetexisted" /></outputs><onsuccess>56c2259b-9d71-4364-bede-79b4af1e3e96</onsuccess><code><![CDATA[
Dim Inst As Object = GetInstance(handle)
Inst.DisplayAlerts = False

Dim ws as Object = GetWorksheet(handle,workbookname,worksheetname,False)
sheetexisted = ws IsNot Nothing
If sheetexisted Then ws.Delete()

Inst.DisplayAlerts = True]]></code></stage><stage stageid="5346c305-4024-4d1d-8806-c1b20f16c10d" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><loginhibit /><display x="15" y="-135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>982dd82e-af43-49cb-a4b1-58da1ccfeb33</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="6ca6d1da-9270-43f8-89d4-c0ece0a353cb" name="worksheetname" type="Data"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><display x="-195" y="90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ae9d880b-4f92-4620-94e8-36d06f4e2181" name="Start" type="Start"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance from which the required cell value should be retrieved. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Cell Reference" narrative="The cell reference indicating which cell's value should be retrieved. An empty value indicates that the currently active cell's value should be retrieved." stage="cellref" /></inputs><onsuccess>9a734ecf-7e58-4aa4-b7ff-5aa4494ec687</onsuccess></stage><stage stageid="ca24190a-a9cb-4c37-b5d2-78bcd838ef40" name="End" type="End"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Value" narrative="The (unformatted) value from the required cell." stage="value" /></outputs></stage><stage stageid="b659eb08-bf67-463a-a8cc-556b152d8032" name="cellref" type="Data"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="257d1cf8-2a6f-47d2-88ee-1d0a125cb27d" name="value" type="Data"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><display x="-195" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a04a5ea1-798c-4659-ac77-0c966c305cba" name="Get Cell Value" type="Code"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><loginhibit /><display x="15" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="cellref" expr="[cellref]" /></inputs><outputs><output type="text" name="value" stage="value" /></outputs><onsuccess>ca24190a-a9cb-4c37-b5d2-78bcd838ef40</onsuccess><code><![CDATA[
	Dim cellVal as String = GetInstance(handle).ActiveCell.Value
	value = IIf(cellVal Is Nothing, "", cellVal)]]></code></stage><stage stageid="39135f99-dd54-4a2b-bff2-555714753a6d" name="Go To Cell" type="SubSheet"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><loginhibit /><display x="15" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be navigated to. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Cell Reference" narrative="The cell reference on the currently active sheet within the specified instance which should be navigated to." expr="[cellref]" /></inputs><onsuccess>a04a5ea1-798c-4659-ac77-0c966c305cba</onsuccess><processid>ed502669-4207-4c88-895d-8c58ec321578</processid></stage><stage stageid="c533ffd2-866d-4944-82be-7e6a6ede4c9a" name="handle" type="Data"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="e3fe8fb5-4290-4e6e-8d8f-780f47e78d27" name="workbookname" type="Data"><subsheetid>73b8ddb4-b679-4697-b3c4-79ce833a9456</subsheetid><display x="-240" y="-120" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5a7dc88f-16d6-41f8-a4f1-4ca8921bf024" name="Get Worksheet As Collection" type="SubSheetInfo"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><narrative>Gets the current worksheet into a collection. This will read the worksheet and store the contents into the collection. The first row will be treated as the column names and will be used as the column names in the generated collection.

Params:
- handle : Number : The integer identifying the instance in which the worksheet resides. Default (0) indicates the current instance.
- Workbook Name : Text : The name of the workbook on which the sheet resides. Default ("") indicates the active workbook on the instance.
- Worksheet Name : Text : The name of the worksheet which is required as a collection. Default ("") indicates the active sheet within the workbook.

Output:
Data - Collection - The data from the worksheet.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.
- Worksheet Not Found : If the specified worksheet does not exist on the specified workbook.

Office 2013 onwards
There are known issues when attempting to read and write data using the Excel VBO with the application set to run in background mode. These issues can be overcome by using the Show action</narrative><display x="-285" y="-195" w="420" h="270" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="cf5b0880-2cac-4221-946a-e4e3d7f0bc99" name="End" type="End"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Data" narrative="The collection containing the data from the specified worksheet - the column IDs will be gleaned from the first row on the sheet being retrieved." stage="worksheetcollection" /></outputs></stage><stage stageid="c42e68de-468d-4aac-bcd2-283b9f578565" name="handle" type="Data"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="ed8d683e-8efe-426c-8be6-85136cbdf337" name="workbookname" type="Data"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><display x="-195" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="14362f26-4336-4848-adf6-2e710eb2a69d" name="Start" type="Start"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><loginhibit /><display x="15" y="-285" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet which should be retrieved resides. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook which contains the sheet required. The default empty text indicates the currently active workbook on the specified instance." stage="workbookname" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet within the specified workbook which should be written to a collection. The default empty text indicates the currently active worksheet within the specified workbook." stage="worksheetname" /></inputs><onsuccess>23c90658-57ef-456a-92fa-970b0161d0f8</onsuccess></stage><stage stageid="36a8c859-cf71-4b54-b7ed-317997b94589" name="GetWorksheetAsCollection" type="Code"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><loginhibit /><display x="15" y="-120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="text" name="worksheetname" expr="[worksheetname]" /></inputs><outputs><output type="collection" name="worksheetcollection" stage="worksheetcollection" /><output type="flag" name="sheetexists" stage="sheetexists" /></outputs><onsuccess>b6d0da26-0322-4b43-b1d5-304466ff29fb</onsuccess><code><![CDATA[
	Dim ws as Object = _
	 GetWorksheet(handle, workbookname, worksheetname, False)

	' Do we have a sheet?
	sheetexists = ws IsNot Nothing
	' No sheet? No entry.
	If Not sheetexists Then Return

	ws.Activate()

	worksheetCollection = GetWorksheetUsedRangeAsDataTable(ws.UsedRange, True)
]]></code></stage><stage stageid="23c90658-57ef-456a-92fa-970b0161d0f8" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><loginhibit /><display x="15" y="-210" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>36a8c859-cf71-4b54-b7ed-317997b94589</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="51a0a405-79a5-4a53-9a36-a40b08481389" name="worksheetname" type="Data"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><display x="-195" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c4c01041-da7a-4cd3-9990-a0a236064fa5" name="worksheetcollection" type="Collection"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><display x="-345" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="9b8dd3a0-045b-4019-b977-8716d12d92c6" name="workbookname" type="Data"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><loginhibit /><display x="-210" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3ba94499-d376-4a0b-9486-f4bced0a6a23" name="Close All Instances" type="SubSheetInfo"><subsheetid>feb8ce9f-299e-4152-85a1-354a5f9d995c</subsheetid><narrative>Closes all instances of excel which have been opened by this business object, either through "Create Instance" or "Open Instance" and which have not been discarded through "Close Instance" or "Release Instance"</narrative><display x="-195" y="-105" w="210" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="e8745127-ee68-4c60-8b52-0b68e91835bf" name="Start" type="Start"><subsheetid>feb8ce9f-299e-4152-85a1-354a5f9d995c</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>8f8060c8-cea7-41c9-93c1-b181ca345fa9</onsuccess></stage><stage stageid="85215f92-002d-4d9c-8fe7-652c149d0206" name="End" type="End"><subsheetid>feb8ce9f-299e-4152-85a1-354a5f9d995c</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="8f8060c8-cea7-41c9-93c1-b181ca345fa9" name="CloseAllInstances" type="Code"><subsheetid>feb8ce9f-299e-4152-85a1-354a5f9d995c</subsheetid><loginhibit /><display x="15" y="-105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>85215f92-002d-4d9c-8fe7-652c149d0206</onsuccess><code><![CDATA[
Dim clone as Dictionary(Of Integer,Object) = _
	new Dictionary(Of Integer,Object)(HandleMap)

For Each Handle As Integer In clone.Keys
	CloseInstance(Handle,False)
Next]]></code></stage><stage stageid="15437c28-7f56-4c1b-b98a-769b875b9d57" name="Find Next Empty Cell" type="SubSheetInfo"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><narrative>Searches for the next empty cell in the direction given.
This can either activate that cell before returning, or just return the cell reference while leaving the active cell as it was.

Params:
- handle : Number : The integer handle identifying the Excel instance to use. The default of zero indicates the 'current' instance.
- Direction : Text : The direction in which to go, this should start with "U", "D", "L" or "R" (not case-sensitive) - the rest of the string is ignored, so you can use "Up", "DOWN" "left" and, indeed, "r"
- Activate Cell? : Flag : True to activate the found cell, False to just return the reference. Default is False.

Returns:
- Cell Reference : Text : The cell ID which represents the next empty cell in the required direction. This will be blank if no empty cell was found in the given direction.

Exceptions:
Invalid Direction Parameter : If the given direction parameter was invalid - ie. did not start with one of the (case-insensitive) letters "U", "D", "L" or "R".</narrative><display x="-300" y="-195" w="450" h="270" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d3707693-ef57-453a-b8b2-16e8d8aee39f" name="Start" type="Start"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><loginhibit /><display x="-15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be sought. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Direction" narrative="The direction in which the next empty cell is required. This should start with any of &quot;U&quot;, &quot;D&quot;, &quot;L&quot; or &quot;R&quot; to find a cell up, down, left or right respectively. The direction parameter is not case-sensitive." stage="direction" /><input type="flag" name="Activate Cell?" narrative="True to activate the cell which is found; False to just return the reference and leave the active cell as it was before. Default is False." stage="activatecell" /></inputs><onsuccess>ea536eb5-62b7-4b15-b0b9-0c5415414692</onsuccess></stage><stage stageid="65e26d12-b37e-4df9-a00b-07340967e5b2" name="End" type="End"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><loginhibit /><display x="-15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Cell Reference" narrative="The cell reference identifying the next empty cell from the active cell in the direction given. An empty value indicates that there were no empty cells between the active cell and a boundary." stage="cellref" /></outputs></stage><stage stageid="2d159e37-f93b-42db-b8a7-3ea3e5300c76" name="direction" type="Data"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><display x="-240" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bf3a1953-80c7-4d24-92fe-1e6823202956" name="cellref" type="Data"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><display x="-150" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ea536eb5-62b7-4b15-b0b9-0c5415414692" name="Direction Valid?" type="Decision"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><loginhibit /><narrative>Direction must start with one of the following:
- U : Indicates 'up'
- D : Indicates 'down'
- L : Indicates 'left'
- R : Indicates 'right'
Any other value (including empty text) is invalid</narrative><display x="-15" y="-75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="Len(Trim([direction]))&gt;0 AND InStr(&quot;UDLR&quot;,Upper(Left(Trim([direction]),1)))&lt;&gt;0" /><ontrue>e8cca858-4b46-40a0-81fc-3112398c4a42</ontrue><onfalse>382555c6-554f-465d-bbac-43e5b0ec06ed</onfalse></stage><stage stageid="382555c6-554f-465d-bbac-43e5b0ec06ed" name="Invalid Direction Parameter" type="Exception"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><display x="150" y="-75" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Invalid Direction Parameter" detail="&quot;Direction: '&quot; &amp; [direction] &amp; &quot;' is invalid - it must start with 'U', 'D', 'L' or 'R' (up, down, left or right)&quot;" /></stage><stage stageid="e8cca858-4b46-40a0-81fc-3112398c4a42" name="FindEmptyCell" type="Code"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><loginhibit /><display x="-15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="direction" expr="[direction]" /></inputs><outputs><output type="text" name="cellref" stage="cellref" /></outputs><onsuccess>a47f3c07-957d-4909-bc43-4c56e5f58ae6</onsuccess><code><![CDATA[
' The initial char of the direction (capitalised)
Dim strDir as String = direction.Trim().Substring(0,1).ToUpper()

' The excel instance
Dim excel as Object = GetInstance(handle)

' The excel enum representing the direction
' Note: setting to zero is just to nix a duff compiler warning
Dim dirn as Integer = 0

' xlDirection enum values from: 
' http://msdn.microsoft.com/en-us/library/bb241212.aspx

' Get the direction we need to go
Select Case strDir
	Case "U"
		dirn = -4162 ' Excel.XlDirection.xlToUp
	Case "D"
		dirn = -4121 ' Excel.XlDirection.xlToDown
	Case "L"
		dirn = -4159 ' Excel.XlDirection.xlToLeft
	Case "R"
		dirn = -4161 ' Excel.XlDirection.xlToRight
	Case Else
		Throw New ArgumentException("Invalid Direction: " & strDir)
End Select

Dim cell as Object = excel.ActiveCell

While True

	' First check the next one along - if that's blank then we're away..
	Dim nextCell as Object = GetNextCell(cell, strDir)

	' If the cell address is the same on moving - that indicates we're
	' at a limit (eg. 1st column going left, last row going down etc.)
	' Just return empty to indicate that there are no blank cells in
	' that direction.
	If cell.Address = nextCell.Address Then
		cellref = ""
		Return
	ElseIf nextCell.Value = Nothing Then ' We've found our blank
		cellref = nextCell.Address(False,False)
		Return
	End If
	
	cell = nextCell
	
	' Quick way (rather than plodding from one cell to the next)
	' is to effectively press the 'End' key - but this is highly
	' inconsistent in what it returns.
	' Go to the 'end' of the range - ie. the last filled cell
	' cell = cell.End(dirn)
	' Now we need to go one beyond, ie. to the next cell
	' cell = GetNextCell(cell, strDir)

End While
]]></code></stage><stage stageid="facf151b-ee72-46d1-b528-a921e6945048" name="handle" type="Data"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><display x="-240" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="c507994e-eb49-43c1-bf77-9bf7cf88e0e6" name="Get Formatted Cell Value" type="SubSheetInfo"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><narrative>Gets the formatted value of the desired cell. This will apply any formatting which is in place in the specified cell before outputting the value.</narrative><display x="-195" y="-105" w="210" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c0ed8b3d-fb86-442b-959e-a601d2d5f84f" name="Start" type="Start"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance within which the cell is contained. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Cell Reference" narrative="The reference to the cell whose value is required. Note that a side-effect of this action is that the specified cell will become the active cell on the specified instance. An empty value indicates the currently active cell." stage="cellref" /></inputs><onsuccess>29427d7f-a2d9-4b65-b6c4-773881bd285d</onsuccess></stage><stage stageid="722e3ab7-97b7-4cd6-886e-53bf4ac022ec" name="End" type="End"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Value" narrative="The formatted value at the given cell reference." stage="value" /></outputs></stage><stage stageid="1260d770-e90c-4ea2-9e64-e3442c7de787" name="cellref" type="Data"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6618eccc-3c6e-4660-997c-5f9142e71dc8" name="value" type="Data"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><display x="-195" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="94dc11fe-505e-4544-a26b-80d3d88d0951" name="Get Cell Text" type="Code"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><loginhibit /><display x="15" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="cellref" expr="[cellref]" /></inputs><outputs><output type="text" name="value" stage="value" /></outputs><onsuccess>722e3ab7-97b7-4cd6-886e-53bf4ac022ec</onsuccess><code><![CDATA[
	value = GetInstance(handle).ActiveCell.Text]]></code></stage><stage stageid="3e695c2e-2110-4655-ba2e-31a41f453383" name="handle" type="Data"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="d9fc29b1-af47-4caf-882b-d9fc56955a8b" name="Split Worksheet" type="SubSheetInfo"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><narrative>Splits the specified worksheet into separate workbooks, creating a new sheet on each one and copying a subset of rows across to it.

Params:
- handle : Number : The integer representing the Excel instance - 0 represents the 'active' excel instance.
- Rows per sheet : Number : The number of rows which should be copied into each separate workbook.
- Workbook Name : Text : The name of the workbook from which the sheet should be split. "" indicates the active workbook on the instance.
- Worksheet Name : Text : The name of the worksheet from which the data should be split. "" indicates the active worksheet on the instance.
- Path : Text : The directory in which the resultant workbooks should be saved.
- No Title Row : Flag : True to indicate that the first row should *not* be used as a title row and copied across each of the generated workbooks.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.
- File Not Found : If the given path did not exist or was not a directory</narrative><display x="-240" y="-180" w="510" h="240" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="aa8bb9c5-c392-43d5-b8fb-6a6308c40ad6" name="End" type="End"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><loginhibit /><display x="105" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="052dc2d6-2989-49fb-9dbd-d4db6e106c98" name="Start" type="Start"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><loginhibit /><display x="105" y="-285" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet which should be retrieved resides. The default of zero indicates the currently active instance." stage="handle" /><input type="number" name="Rows per worksheet" narrative="The number of rows which should appear in each worksheet. Zero indicates all rows." stage="rowspersheet" /><input type="text" name="Workbook Name" narrative="The name of the workbook within the specified instance which contains the sheet to be split. The default empty text indicates the currently active workbook within the specified instance should be used." stage="workbookname" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet within the specified workbook to split - The default empty value indicates that the currently active sheet within the workbook should be used." stage="worksheetname" /><input type="flag" name="No Title Row" narrative="True to indicate that the rows should just be split across without using the first row as a title row (ie. as a list of column headers). False to indicate that the first row contains the column headers which should be replicated across all generated sheets." stage="notitle" /><input type="text" name="Path" narrative="The path to the directory in which the generated workbooks should be created. The files will be created with a name of &quot;{Workbook Name}_SECTION_nnnn&quot;, where nnnn is an number incrementing with each section generated." stage="path" /></inputs><onsuccess>ee1e1e11-a16a-4060-9ea0-0848320dfbaf</onsuccess></stage><stage stageid="3200e67b-1f79-4672-9828-e9e4438f565b" name="handle" type="Data"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><display x="-285" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="177b7483-8cfb-41a7-8644-e4fdc19ecf2a" name="rowspersheet" type="Data"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><display x="-150" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="dd48b9ea-dee0-4b1a-a9bb-7c84a64fa132" name="workbookname" type="Data"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><display x="-285" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4f865844-bba2-4377-8b24-5d089cbfb8c4" name="worksheetname" type="Data"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><display x="-285" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ee1e1e11-a16a-4060-9ea0-0848320dfbaf" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><loginhibit /><display x="105" y="-225" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>359dbb2d-d57f-48c1-9c7f-1d22ef094036</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="359dbb2d-d57f-48c1-9c7f-1d22ef094036" name="Split Worksheet" type="Code"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><loginhibit /><display x="105" y="-165" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="text" name="worksheetname" expr="[worksheetname]" /><input type="number" name="rowspersheet" expr="[rowspersheet]" /><input type="flag" name="notitle" expr="[notitle]" /><input type="text" name="path" expr="[path]" /></inputs><outputs><output type="flag" name="filefound" stage="filefound" /><output type="flag" name="sheetexists" stage="sheetexists" /></outputs><onsuccess>5cb56c9a-aa29-4ed4-84e1-9a65976ba50f</onsuccess><code><![CDATA[Dim sheet as Object = GetWorksheet(handle,workbookname,worksheetname,False)

sheetexists = sheet IsNot Nothing
If Not sheetexists Then Return

Dim book as Object = sheet.Parent
Dim excel as Object = sheet.Application

Dim prefix as String = book.Name
If prefix.ToLower().EndsWith(".xls") Then
	prefix = prefix.Substring(0,prefix.Length - 4)
End If

If Not path.EndsWith("\") Then
	path += "\"
End If

filefound = Directory.Exists(path)
If Not filefound Then ' Might as well quit now 
	Return
End If

Dim lastCell as Object = sheet.Cells.Find("*", , , , , 2)			 'Excel.XlSearchDirection.xlPrevious=2
'loop through the worksheet in blocks of Numblines lines

' Force overwrites if the excel book already exists.
excel.DisplayAlerts = False ' Hide alerts

Dim loopCount as Integer = 0
For row as Integer = 1 To lastCell.Row-1 Step rowspersheet ' -1 to cope with total-rows = rowspersheet
	loopCount = loopCount + 1
	Dim newbook as Object = excel.Workbooks.Add
	If notitle Then
		'copy each block into the new worksheet
		sheet.Range(sheet.Cells(row, 1), sheet.Cells(loopCount * rowspersheet, sheet.Columns.Count)).EntireRow.Copy(newbook.Sheets(1).Range("A1"))
	Else
		'in here - so there must be a title row that needs copying to all the new worksheets
		If row = 1 Then
			'copy row 1-201 into new worksheet (including title row at #1)
			sheet.Range(sheet.Cells(row, 1),sheet.Cells(row + rowspersheet,sheet.Columns.Count)).EntireRow.Copy(newbook.Sheets(1).Range("A1"))
		Else
			'copy title row into new worksheet
			sheet.Range(sheet.Cells(1, 1),sheet.Cells(1,sheet.Columns.Count)).EntireRow.Copy(newbook.Sheets(1).Range("A1"))
			'next copy row iloop+1 to iloop+NumbLines into new worksheet (i.e. 202-401)
			sheet.Range(sheet.Cells(row + 1, 1),sheet.Cells(row + rowspersheet,sheet.Columns.Count)).EntireRow.Copy(newbook.Sheets(1).Range("A2"))
		End If
	End If
	'close and save the new workbook
	newbook.Close(True, path & prefix & "_SECTION_" & (loopCount+1000).ToString().Substring(1) & ".xls")
Next]]></code></stage><stage stageid="cfd178fc-26e5-4e7c-b9f3-cb49ea4de27e" name="notitle" type="Data"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><display x="-150" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="acee6017-400e-44c3-8b07-611d7318fecf" name="path" type="Data"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><display x="-150" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2dec5f88-d7e5-4ad4-be54-8744dc5cac54" name="filefound" type="Data"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><display x="-150" y="105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="859597f9-d048-46a3-bf99-2f3f6588c2c5" name="Was file found?" type="Decision"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><loginhibit /><display x="105" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[filefound]" /><ontrue>aa8bb9c5-c392-43d5-b8fb-6a6308c40ad6</ontrue><onfalse>6b2c84c0-9ceb-4f05-8746-5dfbf7ed3733</onfalse></stage><stage stageid="6b2c84c0-9ceb-4f05-8746-5dfbf7ed3733" name="No Such Directory" type="Exception"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><display x="300" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="File Not Found" detail="&quot;Directory : &quot; &amp; [path] &amp; &quot; does not exist or is not a directory&quot;" /></stage><stage stageid="e9c5ba22-79d3-4bd7-ae8f-3b36c06dd51e" name="Get Number Of Rows" type="SubSheetInfo"><subsheetid>dc139ac7-b971-481e-9528-b1521ae9fc92</subsheetid><narrative>Counts the number of rows in a worksheet.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="555b5c2d-9106-444b-9c96-f1ff4699a988" name="End" type="End"><subsheetid>dc139ac7-b971-481e-9528-b1521ae9fc92</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="Number of rows" narrative="The number of rows." stage="rowcount" /></outputs></stage><stage stageid="1c4aa0dc-e628-424b-8df8-eaf16dbd668d" name="Start" type="Start"><subsheetid>dc139ac7-b971-481e-9528-b1521ae9fc92</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the number of rows is required. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook on which the number of rows is required. The default empty text value indicates the currently active workbook on the specified instance." stage="workbookname" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet on which the number of rows is required. The default empty text value indicates the currently active sheet on the specified workbook." stage="worksheetname" /></inputs><onsuccess>35173317-eeae-482b-8a2a-ea46406fcb4f</onsuccess></stage><stage stageid="35173317-eeae-482b-8a2a-ea46406fcb4f" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>dc139ac7-b971-481e-9528-b1521ae9fc92</subsheetid><loginhibit /><display x="15" y="-75" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>aa3ba555-86e5-42ae-bdb5-b614c46bdaf9</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="aa3ba555-86e5-42ae-bdb5-b614c46bdaf9" name="Count Rows" type="Code"><subsheetid>dc139ac7-b971-481e-9528-b1521ae9fc92</subsheetid><loginhibit /><display x="15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="text" name="worksheetname" expr="[worksheetname]" /></inputs><outputs><output type="number" name="rowcount" stage="rowcount" /></outputs><onsuccess>555b5c2d-9106-444b-9c96-f1ff4699a988</onsuccess><code><![CDATA[
' enum - Excel.XlSearchDirection.xlPrevious=2
rowcount = GetWorksheet(handle,workbookname,worksheetname).Cells.Find("*", , , , , 2).Row]]></code></stage><stage stageid="fbf7b5e7-f86b-48f0-8d2a-8658bcabfe72" name="handle" type="Data"><subsheetid>dc139ac7-b971-481e-9528-b1521ae9fc92</subsheetid><display x="-270" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="ae17d409-d655-459f-a6fe-1c4ed04c7023" name="workbookname" type="Data"><subsheetid>dc139ac7-b971-481e-9528-b1521ae9fc92</subsheetid><display x="-270" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4f2032a3-62ce-48a2-b098-ed275a569931" name="worksheetname" type="Data"><subsheetid>dc139ac7-b971-481e-9528-b1521ae9fc92</subsheetid><display x="-270" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ac9321b0-2209-4f44-bd1e-3876c05fc35f" name="rowcount" type="Data"><subsheetid>dc139ac7-b971-481e-9528-b1521ae9fc92</subsheetid><display x="-150" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e1bb96d7-94f9-4570-85a9-f1bcff4f31ae" name="Is Read Only" type="SubSheetInfo"><subsheetid>ddb3c741-0c59-4ac8-a260-258fb8eb1674</subsheetid><narrative>Checks if the given workbook is read only or not.

Params:
- handle : Number : The integer identifying the excel instance to check. Default (0) indicates the current instance.
- Workbook Name : Text : The name of the workbook to be checked. Default ("") indicates the active workbook on the given instance.

Output:
Read Only? : Flag : True to indicate that the workbook is read only; False to indicate that it is writable.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</narrative><display x="-300" y="-165" w="420" h="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="bb6cb4de-9a8f-424e-82d8-52d766ab5da5" name="Start" type="Start"><subsheetid>ddb3c741-0c59-4ac8-a260-258fb8eb1674</subsheetid><loginhibit /><display x="0" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook which should be checked resides. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook to test to see if it is read-only or not." stage="workbookname" /></inputs><onsuccess>91487aa9-0d65-4895-940d-c4fed2212eec</onsuccess></stage><stage stageid="1e8fe949-d784-437f-a724-b5003709f18c" name="End" type="End"><subsheetid>ddb3c741-0c59-4ac8-a260-258fb8eb1674</subsheetid><loginhibit /><display x="0" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Read Only?" narrative="True to indicate that the specified workbook is read-only; False to indicate that it can be written to." stage="isreadonly" /></outputs></stage><stage stageid="cfa1438f-ab60-4810-a5b5-ede71fc7b700" name="handle" type="Data"><subsheetid>ddb3c741-0c59-4ac8-a260-258fb8eb1674</subsheetid><display x="-270" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="da3c5815-0a1f-4d3d-af8a-09e5f8a1d262" name="workbookname" type="Data"><subsheetid>ddb3c741-0c59-4ac8-a260-258fb8eb1674</subsheetid><display x="-270" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="91487aa9-0d65-4895-940d-c4fed2212eec" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>ddb3c741-0c59-4ac8-a260-258fb8eb1674</subsheetid><loginhibit /><display x="0" y="-90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>e412638c-10ff-49e6-ae71-6b5c86f40ddb</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="b7057d73-acb5-4298-a652-5f91898d67d6" name="isreadonly" type="Data"><subsheetid>ddb3c741-0c59-4ac8-a260-258fb8eb1674</subsheetid><display x="-150" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e412638c-10ff-49e6-ae71-6b5c86f40ddb" name="Check Read Only" type="Code"><subsheetid>ddb3c741-0c59-4ac8-a260-258fb8eb1674</subsheetid><loginhibit /><display x="0" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><outputs><output type="flag" name="isreadonly" stage="isreadonly" /></outputs><onsuccess>1e8fe949-d784-437f-a724-b5003709f18c</onsuccess><code><![CDATA[
isreadonly = GetWorkbook(handle,workbookname).ReadOnly]]></code></stage><stage stageid="fedc107e-577b-47d9-a445-c3a3e66ef516" name="Close All Instances" type="SubSheet"><subsheetid>ab6c7fcd-9997-4c5c-9ff1-2dcb5879975a</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>d2814bb7-61fc-4b4f-8fd9-2dd9f79c06ba</onsuccess><processid>feb8ce9f-299e-4152-85a1-354a5f9d995c</processid></stage><stage stageid="f6285d0d-f7fe-4987-96cf-4d0e27180f81" name="Show" type="SubSheetInfo"><subsheetid>268628ce-c0f3-492a-be5c-87b432e16d1d</subsheetid><narrative>Shows a window attached to the instance identified.

Params:
- handle : Number : The handle identifying the excel instance to show. The default of zero shows the currently active instance.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
</narrative><display x="-225" y="-105" w="330" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="865342da-5035-45ef-9902-c74ba855f521" name="Start" type="Start"><subsheetid>268628ce-c0f3-492a-be5c-87b432e16d1d</subsheetid><loginhibit /><display x="15" y="-150" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance which should have its window displayed. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>6562ae8e-f16f-4f89-8787-7884cc6a57db</onsuccess></stage><stage stageid="565f4f77-b276-4735-9c18-000ce13946a7" name="End" type="End"><subsheetid>268628ce-c0f3-492a-be5c-87b432e16d1d</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="6562ae8e-f16f-4f89-8787-7884cc6a57db" name="CheckInstanceHandle" type="SubSheet"><subsheetid>268628ce-c0f3-492a-be5c-87b432e16d1d</subsheetid><loginhibit /><display x="15" y="-105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>7785ca63-e0a8-40c6-940b-0d9e73944b25</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="97a05e5a-864b-4413-8623-d939827e5c39" name="Hide" type="SubSheetInfo"><subsheetid>ef10421c-e1ff-4227-b367-c53059a6766d</subsheetid><narrative>Hides the window attached to the instance identified.

Params:
- handle : Number : The handle identifying the excel instance to hide. The default of zero shows the currently active instance.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
</narrative><display x="-240" y="-120" w="360" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7785ca63-e0a8-40c6-940b-0d9e73944b25" name="ShowInstance" type="Code"><subsheetid>268628ce-c0f3-492a-be5c-87b432e16d1d</subsheetid><loginhibit /><display x="15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>565f4f77-b276-4735-9c18-000ce13946a7</onsuccess><code><![CDATA[
	GetInstance(handle).Visible = True]]></code></stage><stage stageid="f65b17c8-19fe-4381-9b68-8909f6aa312d" name="handle" type="Data"><subsheetid>268628ce-c0f3-492a-be5c-87b432e16d1d</subsheetid><display x="-195" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="11f4ca85-d053-4b2e-a46d-705fe87040c0" name="Start" type="Start"><subsheetid>ef10421c-e1ff-4227-b367-c53059a6766d</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance which should have its window hidden. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>ebc908b3-4501-4500-9648-a35ebbabddda</onsuccess></stage><stage stageid="6106570f-43e1-4a42-9f67-c8f2522a910c" name="End" type="End"><subsheetid>ef10421c-e1ff-4227-b367-c53059a6766d</subsheetid><loginhibit /><display x="15" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ebc908b3-4501-4500-9648-a35ebbabddda" name="CheckInstanceHandle" type="SubSheet"><subsheetid>ef10421c-e1ff-4227-b367-c53059a6766d</subsheetid><loginhibit /><display x="15" y="-120" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>1cc2d38f-3783-42f7-8b75-78243c367fb3</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="1cc2d38f-3783-42f7-8b75-78243c367fb3" name="HideInstance" type="Code"><subsheetid>ef10421c-e1ff-4227-b367-c53059a6766d</subsheetid><loginhibit /><display x="15" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>6106570f-43e1-4a42-9f67-c8f2522a910c</onsuccess><code><![CDATA[
	GetInstance(handle).Visible = False]]></code></stage><stage stageid="11e05865-7edb-4526-b015-b4b5f725fbc4" name="handle" type="Data"><subsheetid>ef10421c-e1ff-4227-b367-c53059a6766d</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="2e480365-7061-4a6c-81ea-380e5bd06ef7" name="Save Current Workbook As" type="SubSheetInfo"><subsheetid>81b9e5cd-a91d-4a33-bc23-1602c5fe878f</subsheetid><narrative>Save the current workbook using the given file name. This is the equivalent of calling the 'Save Workbook As' action with the default values for 'handle' (0) and 'Workbook Name' ("")

Params :
- File name : Text : The path and name of the file to which the workbook should be saved.

Output :
- New Workbook Name : Text : The new name with which the workbook is identified within the excel instance.</narrative><display x="-285" y="-150" w="360" h="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7e1a622f-6438-41c8-9b86-e0d93c8267cb" name="Start" type="Start"><subsheetid>81b9e5cd-a91d-4a33-bc23-1602c5fe878f</subsheetid><loginhibit /><display x="-15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance for which the current workbook which should be saved. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="File name" narrative="The full path and file name to which the current workbook should be saved." stage="filename" /></inputs><onsuccess>ec111fc5-c308-4507-8b78-8fa3a8cfa136</onsuccess></stage><stage stageid="acb62e2e-bb38-4f8b-8ceb-61ec851d8986" name="End" type="End"><subsheetid>81b9e5cd-a91d-4a33-bc23-1602c5fe878f</subsheetid><loginhibit /><display x="-15" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="New Workbook Name" narrative="The new workbook name which Excel will use to identify the workbook." stage="newworkbookname" /></outputs></stage><stage stageid="c5eee5f9-2db2-4efb-8f47-46e98073dedb" name="filename" type="Data"><subsheetid>81b9e5cd-a91d-4a33-bc23-1602c5fe878f</subsheetid><display x="-195" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ec111fc5-c308-4507-8b78-8fa3a8cfa136" name="Save Workbook As" type="SubSheet"><subsheetid>81b9e5cd-a91d-4a33-bc23-1602c5fe878f</subsheetid><loginhibit /><display x="-15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="Workbook Name" expr="&quot;&quot;" /><input type="text" name="Filename" expr="[filename]" /></inputs><outputs><output type="text" name="New Workbook Name" stage="newworkbookname" /></outputs><onsuccess>acb62e2e-bb38-4f8b-8ceb-61ec851d8986</onsuccess><processid>21a53e34-8128-41cb-ad73-17250758ff23</processid></stage><stage stageid="09b432b9-8774-440c-8468-a5effa8bfe98" name="Exit" type="SubSheetInfo"><subsheetid>dc33871a-9aec-4a29-b811-3ab205ddf41e</subsheetid><narrative>Here for backward compatibility - exits the current instance of Excel without saving any changes.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="4f9b1c2f-8b07-4ff1-95bc-12d1de8ec1a8" name="Start" type="Start"><subsheetid>dc33871a-9aec-4a29-b811-3ab205ddf41e</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>fc97b188-f45e-46f4-a66e-f592917cabb1</onsuccess></stage><stage stageid="c6c7615b-e18b-42aa-9e83-88884e01e23b" name="End" type="End"><subsheetid>dc33871a-9aec-4a29-b811-3ab205ddf41e</subsheetid><loginhibit /><display x="-30" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="fc97b188-f45e-46f4-a66e-f592917cabb1" name="Close Instance" type="SubSheet"><subsheetid>dc33871a-9aec-4a29-b811-3ab205ddf41e</subsheetid><loginhibit /><display x="-30" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="0" /><input type="flag" name="Save Changes" expr="False" /></inputs><onsuccess>c6c7615b-e18b-42aa-9e83-88884e01e23b</onsuccess><processid>6ec3006a-6553-4526-b522-32526c4aa3cc</processid></stage><stage stageid="f441e8a4-9990-4a87-a011-cb9f6c56a3f3" name="Save Current Workbook" type="SubSheetInfo"><subsheetid>76d598ed-b254-4c1e-8004-d4f2928b1450</subsheetid><narrative>Saves the current workbook using the workbook name as the file name.
This is the equivalent of calling the Save Workbook action with the default values for 'handle' (0) and 'Workbook Name' ("")

Exceptions: 
- Bad Handle : If there is no active instance.
- Workbook Not Found : If there is no active workbook on the instance.</narrative><display x="-270" y="-90" w="330" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ed1db4c8-9563-4f9f-9606-a26b934a1db5" name="Start" type="Start"><subsheetid>76d598ed-b254-4c1e-8004-d4f2928b1450</subsheetid><loginhibit /><display x="-45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>0d75fe69-c13e-4536-a444-0f915cb6844a</onsuccess></stage><stage stageid="097cd2c8-6d4c-42dc-a542-6e1f1e5a1b7e" name="End" type="End"><subsheetid>76d598ed-b254-4c1e-8004-d4f2928b1450</subsheetid><loginhibit /><display x="-45" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0d75fe69-c13e-4536-a444-0f915cb6844a" name="Save Workbook" type="SubSheet"><subsheetid>76d598ed-b254-4c1e-8004-d4f2928b1450</subsheetid><loginhibit /><display x="-45" y="-75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="0" /><input type="text" name="Workbook Name" expr="&quot;&quot;" /></inputs><onsuccess>097cd2c8-6d4c-42dc-a542-6e1f1e5a1b7e</onsuccess><processid>6e7cb0ad-5910-4065-aab2-2919726bae39</processid></stage><stage stageid="4e15b86d-9a5b-40ce-babe-c9fb02cf8764" name="createifmissing" type="Data"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><display x="-180" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="dabb4d29-516f-442c-b2da-32cc45ae4df3" name="Get Worksheet As Collection (Fast)" type="SubSheetInfo"><subsheetid>e58a482d-f349-4f40-9b03-a903156ce1b5</subsheetid><narrative>Here for back-compatability. Should be considered deprecated and calls should be replaced by "Get Worksheet As Collection", but right now this gets the active worksheet on the active workbook in the current instance of Excel into a collection. It is the equivalent of calling GetWorksheet As Collection with all the default input values.

Output:
Data : Collection : The active sheet's data in a collection.</narrative><display x="-300" y="-120" w="330" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c9ce0be6-6a88-4147-aeb3-e8974bb74970" name="Start" type="Start"><subsheetid>e58a482d-f349-4f40-9b03-a903156ce1b5</subsheetid><loginhibit /><display x="-45" y="-165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>a3308402-1446-47b9-9e40-cc105a30db14</onsuccess></stage><stage stageid="aa04eeb6-e87c-4392-b7d2-52e4eb0b28af" name="End" type="End"><subsheetid>e58a482d-f349-4f40-9b03-a903156ce1b5</subsheetid><loginhibit /><display x="-45" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Data" narrative="The data output" stage="worksheetcollection" /></outputs></stage><stage stageid="98e74d10-88b7-40dd-b771-0a137c8d0665" name="worksheetcollection" type="Collection"><subsheetid>e58a482d-f349-4f40-9b03-a903156ce1b5</subsheetid><display x="-210" y="-15" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="a3308402-1446-47b9-9e40-cc105a30db14" name="Get Worksheet As Collection" type="SubSheet"><subsheetid>e58a482d-f349-4f40-9b03-a903156ce1b5</subsheetid><loginhibit /><display x="-45" y="-90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="0" /><input type="text" name="Workbook Name" expr="&quot;&quot;" /><input type="text" name="Worksheet Name" expr="&quot;&quot;" /></inputs><outputs><output type="collection" name="Data" stage="worksheetcollection" /></outputs><onsuccess>aa04eeb6-e87c-4392-b7d2-52e4eb0b28af</onsuccess><processid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</processid></stage><stage stageid="078c6299-d93e-41b7-9a05-e26f0436b301" name="Format Cell" type="SubSheetInfo"><subsheetid>a031ba9a-3bd2-49b3-8d9b-6f982b34eb3c</subsheetid><narrative>Sets the number format at the given cell to that specified.
Oddly, this *doesn't* set the currently active cell.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="584cad36-fa91-4f11-83b7-4829f89f9a35" name="Start" type="Start"><subsheetid>a031ba9a-3bd2-49b3-8d9b-6f982b34eb3c</subsheetid><loginhibit /><display x="-45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the cell to be formatted is contained. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Cell Reference" narrative="The reference to the cell whose format should be changed." stage="cellref" /><input type="text" name="Cell Format" narrative="The format required for the cell - this can be the name of the default format (eg. &quot;General&quot;) or a sequence of formatting codes (eg. &quot;£#,##0.00_);[Red](£#,##0.00)&quot;)" stage="format" /></inputs><onsuccess>6ed5e96a-3604-426e-b112-0be4f4f4b9a8</onsuccess></stage><stage stageid="59f040b8-35ab-48a1-8321-ab6d321172f4" name="cellref" type="Data"><subsheetid>a031ba9a-3bd2-49b3-8d9b-6f982b34eb3c</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1867e11e-a153-4421-9512-848674ac9bea" name="format" type="Data"><subsheetid>a031ba9a-3bd2-49b3-8d9b-6f982b34eb3c</subsheetid><display x="-195" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f19aada3-d5b7-49ca-8f65-824a0be6abea" name="handle" type="Data"><subsheetid>a031ba9a-3bd2-49b3-8d9b-6f982b34eb3c</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="bc1c92c3-d8fd-4e00-86eb-cf22a3331a93" name="Format Current Cell" type="SubSheetInfo"><subsheetid>9b535bfc-4f80-4d7c-88b5-49b941688030</subsheetid><narrative>Sets a cell format for the currently active cell.</narrative><display x="-195" y="-105" w="180" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7fea1a9b-6cad-487c-a1d4-0b7a31c0b1e6" name="Start" type="Start"><subsheetid>9b535bfc-4f80-4d7c-88b5-49b941688030</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the cell to be formatted is contained. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Cell Format" narrative="The format required for the cell - this can be the name of the default format (eg. &quot;General&quot;) or a sequence of formatting codes (eg. &quot;£#,##0.00_);[Red](£#,##0.00)&quot;)" stage="format" /></inputs><onsuccess>a8dd2eb1-5144-4f87-b5fc-87dc562df875</onsuccess></stage><stage stageid="936f31ef-fa8e-4960-aa8a-1653cc6d7de2" name="Get Active Cell" type="SubSheetInfo"><subsheetid>31ed0ec6-5d0f-4f9e-90c8-1fb7e73e5d5c</subsheetid><narrative>Gets a reference to the currently active cell on the given instance.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b4a8f71f-cdb8-4091-99f6-f127fb3ec48d" name="Start" type="Start"><subsheetid>31ed0ec6-5d0f-4f9e-90c8-1fb7e73e5d5c</subsheetid><loginhibit /><display x="0" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the currently active cell is required. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>0f68d429-d637-41bc-ab1c-3890e4e57da6</onsuccess></stage><stage stageid="de4f91e6-efde-42cd-9efa-700811c74c15" name="End" type="End"><subsheetid>31ed0ec6-5d0f-4f9e-90c8-1fb7e73e5d5c</subsheetid><loginhibit /><display x="0" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Cell Reference" narrative="The reference identifying the currently active cell on the specified sheet." stage="cellref" /></outputs></stage><stage stageid="3251089f-0682-4cd7-84d1-78fd6a3f68db" name="handle" type="Data"><subsheetid>31ed0ec6-5d0f-4f9e-90c8-1fb7e73e5d5c</subsheetid><display x="-180" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="a88df339-9204-419b-9dd7-4553548f1dff" name="cellref" type="Data"><subsheetid>31ed0ec6-5d0f-4f9e-90c8-1fb7e73e5d5c</subsheetid><display x="-180" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0f68d429-d637-41bc-ab1c-3890e4e57da6" name="CheckInstanceHandle" type="SubSheet"><subsheetid>31ed0ec6-5d0f-4f9e-90c8-1fb7e73e5d5c</subsheetid><loginhibit /><display x="0" y="-90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle representing the instance." expr="[handle]" /></inputs><onsuccess>0749822c-e521-461c-a3cc-23f5a695980b</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="0749822c-e521-461c-a3cc-23f5a695980b" name="GetActiveCell" type="Code"><subsheetid>31ed0ec6-5d0f-4f9e-90c8-1fb7e73e5d5c</subsheetid><loginhibit /><display x="0" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><outputs><output type="text" name="cellref" stage="cellref" /></outputs><onsuccess>de4f91e6-efde-42cd-9efa-700811c74c15</onsuccess><code><![CDATA[
cellref = GetInstance(handle).ActiveCell.Address(False,False)]]></code></stage><stage stageid="035e5e46-b65c-4bb5-8684-b433aa67ec7b" name="activatecell" type="Data"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><display x="-150" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="a47f3c07-957d-4909-bc43-4c56e5f58ae6" name="Activate Cell?" type="Decision"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><loginhibit /><display x="-15" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[activatecell]" /><ontrue>e17eb74e-6764-4980-a96c-dd500de13181</ontrue><onfalse>65e26d12-b37e-4df9-a00b-07340967e5b2</onfalse></stage><stage stageid="e17eb74e-6764-4980-a96c-dd500de13181" name="Go To Cell" type="SubSheet"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><loginhibit /><display x="135" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="Cell Reference" expr="[cellref]" /></inputs><onsuccess>23c196fc-bba5-4cc0-8e36-c8d6db96e360</onsuccess><processid>ed502669-4207-4c88-895d-8c58ec321578</processid></stage><stage stageid="23c196fc-bba5-4cc0-8e36-c8d6db96e360" name="anchor2" type="Anchor"><subsheetid>0b5de6c6-ed9a-443d-95b8-142dd521120e</subsheetid><loginhibit /><display x="135" y="105" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>65e26d12-b37e-4df9-a00b-07340967e5b2</onsuccess></stage><stage stageid="5c445c44-609a-45b3-8c4a-ff4a670213df" name="Go To Next Empty Cell Left" type="SubSheetInfo"><subsheetid>eaafa766-b0ce-4891-8e6e-de12d6283ae0</subsheetid><narrative>Activates the next empty cell that can be found on the left of the active cell.</narrative><display x="-210" y="-105" w="210" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="75944053-c0d7-42b9-9231-b173e13066f5" name="Start" type="Start"><subsheetid>eaafa766-b0ce-4891-8e6e-de12d6283ae0</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be found. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>10b0cef9-77af-42e0-b42e-6fc1870587a4</onsuccess></stage><stage stageid="63d50db2-a5f9-48a9-ae16-9a801712b53c" name="End" type="End"><subsheetid>eaafa766-b0ce-4891-8e6e-de12d6283ae0</subsheetid><loginhibit /><display x="-30" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Cell Reference" narrative="The reference of the cell which has been found to be empty - an empty value indicates that no empty cells were found." stage="cellref" /></outputs></stage><stage stageid="10b0cef9-77af-42e0-b42e-6fc1870587a4" name="Find Next Empty Cell" type="SubSheet"><subsheetid>eaafa766-b0ce-4891-8e6e-de12d6283ae0</subsheetid><loginhibit /><display x="-30" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be sought. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Direction" narrative="The direction in which the next empty cell is required. This should start with any of &quot;U&quot;, &quot;D&quot;, &quot;L&quot; or &quot;R&quot; to find a cell up, down, left or right respectively. The direction parameter is not case-sensitive." expr="&quot;L&quot;" /><input type="flag" name="Activate Cell?" narrative="True to activate the cell which is found; False to just return the reference and leave the active cell as it was before. Default is False." expr="True" /></inputs><outputs><output type="text" name="Cell Reference" narrative="The cell reference identifying the next empty cell from the active cell in the direction given. An empty value indicates that there were no empty cells between the active cell and a boundary." stage="cellref" /></outputs><onsuccess>63d50db2-a5f9-48a9-ae16-9a801712b53c</onsuccess><processid>0b5de6c6-ed9a-443d-95b8-142dd521120e</processid></stage><stage stageid="f6b88b10-a188-436b-830e-b7eaf783495c" name="handle" type="Data"><subsheetid>eaafa766-b0ce-4891-8e6e-de12d6283ae0</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="6b1312d6-de01-4272-b3cd-765b4835a9f2" name="cellref" type="Data"><subsheetid>eaafa766-b0ce-4891-8e6e-de12d6283ae0</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4ffa60dc-058f-4edc-9140-a43050494dee" name="Go To Next Empty Cell Right" type="SubSheetInfo"><subsheetid>d2d4c80d-3058-4d60-8e96-7b9b12f9ae58</subsheetid><narrative>Activates the next empty cell that can be found on the right of the active cell.</narrative><display x="-210" y="-105" w="210" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="78bf9f71-b3ba-4ef3-8142-08be21698287" name="Go To Next Empty Cell Up" type="SubSheetInfo"><subsheetid>5a78c1a5-e339-4f76-9203-d180bee31770</subsheetid><narrative>Activates the next empty cell that can be found above the active cell.</narrative><display x="-210" y="-105" w="210" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0a069347-2e66-4668-ab57-b59e6536c5d0" name="Go To Next Empty Cell Down" type="SubSheetInfo"><subsheetid>82492075-b486-413c-9bd4-05eba466843e</subsheetid><narrative>Activates the next empty cell that can be found below the active cell.</narrative><display x="-210" y="-105" w="210" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b3b21101-6815-4f78-b7af-06f0a73a4070" name="Start" type="Start"><subsheetid>d2d4c80d-3058-4d60-8e96-7b9b12f9ae58</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be found. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>782731b8-b7fb-4bec-8b35-b0438a5d8cec</onsuccess></stage><stage stageid="650fc617-bcbd-4d39-b835-748d94773ec6" name="End" type="End"><subsheetid>d2d4c80d-3058-4d60-8e96-7b9b12f9ae58</subsheetid><loginhibit /><display x="-30" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Cell Reference" narrative="The reference of the cell which has been found to be empty - an empty value indicates that no empty cells were found." stage="cellref" /></outputs></stage><stage stageid="782731b8-b7fb-4bec-8b35-b0438a5d8cec" name="Find Next Empty Cell" type="SubSheet"><subsheetid>d2d4c80d-3058-4d60-8e96-7b9b12f9ae58</subsheetid><loginhibit /><display x="-30" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be sought. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Direction" narrative="The direction in which the next empty cell is required. This should start with any of &quot;U&quot;, &quot;D&quot;, &quot;L&quot; or &quot;R&quot; to find a cell up, down, left or right respectively. The direction parameter is not case-sensitive." expr="&quot;R&quot;" /><input type="flag" name="Activate Cell?" narrative="True to activate the cell which is found; False to just return the reference and leave the active cell as it was before. Default is False." expr="True" /></inputs><outputs><output type="text" name="Cell Reference" narrative="The cell reference identifying the next empty cell from the active cell in the direction given. An empty value indicates that there were no empty cells between the active cell and a boundary." stage="cellref" /></outputs><onsuccess>650fc617-bcbd-4d39-b835-748d94773ec6</onsuccess><processid>0b5de6c6-ed9a-443d-95b8-142dd521120e</processid></stage><stage stageid="56afae5f-81d8-4fdc-b521-cb4b99fac5c3" name="handle" type="Data"><subsheetid>d2d4c80d-3058-4d60-8e96-7b9b12f9ae58</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="347d2c28-0ea0-4ed0-95ce-14e5925f7193" name="cellref" type="Data"><subsheetid>d2d4c80d-3058-4d60-8e96-7b9b12f9ae58</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4636685a-21dc-420d-ae4b-e435f9861298" name="Start" type="Start"><subsheetid>5a78c1a5-e339-4f76-9203-d180bee31770</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be found. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>c01227ef-86b5-48c4-8cbc-6db80b1df2c6</onsuccess></stage><stage stageid="c7e480b2-caf7-430d-b419-49c70c452c4f" name="End" type="End"><subsheetid>5a78c1a5-e339-4f76-9203-d180bee31770</subsheetid><loginhibit /><display x="-30" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Cell Reference" narrative="The reference of the cell which has been found to be empty - an empty value indicates that no empty cells were found." stage="cellref" /></outputs></stage><stage stageid="c01227ef-86b5-48c4-8cbc-6db80b1df2c6" name="Find Next Empty Cell" type="SubSheet"><subsheetid>5a78c1a5-e339-4f76-9203-d180bee31770</subsheetid><loginhibit /><display x="-30" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be sought. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Direction" narrative="The direction in which the next empty cell is required. This should start with any of &quot;U&quot;, &quot;D&quot;, &quot;L&quot; or &quot;R&quot; to find a cell up, down, left or right respectively. The direction parameter is not case-sensitive." expr="&quot;U&quot;" /><input type="flag" name="Activate Cell?" narrative="True to activate the cell which is found; False to just return the reference and leave the active cell as it was before. Default is False." expr="True" /></inputs><outputs><output type="text" name="Cell Reference" narrative="The cell reference identifying the next empty cell from the active cell in the direction given. An empty value indicates that there were no empty cells between the active cell and a boundary." stage="cellref" /></outputs><onsuccess>c7e480b2-caf7-430d-b419-49c70c452c4f</onsuccess><processid>0b5de6c6-ed9a-443d-95b8-142dd521120e</processid></stage><stage stageid="2d6e7e4e-d6f5-45b7-b4ae-33658d6d38fd" name="handle" type="Data"><subsheetid>5a78c1a5-e339-4f76-9203-d180bee31770</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="287aee08-8696-49f9-b659-244e88067d0a" name="cellref" type="Data"><subsheetid>5a78c1a5-e339-4f76-9203-d180bee31770</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4791458d-f683-4adf-ad1c-1591b3d2fab2" name="Start" type="Start"><subsheetid>82492075-b486-413c-9bd4-05eba466843e</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be found. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>072dae62-8d0d-4522-904c-6d253988874d</onsuccess></stage><stage stageid="b90c78f9-6a37-4db4-b30f-ac96d30c730c" name="End" type="End"><subsheetid>82492075-b486-413c-9bd4-05eba466843e</subsheetid><loginhibit /><display x="-30" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Cell Reference" narrative="The reference of the cell which has been found to be empty - an empty value indicates that no empty cells were found." stage="cellref" /></outputs></stage><stage stageid="072dae62-8d0d-4522-904c-6d253988874d" name="Find Next Empty Cell" type="SubSheet"><subsheetid>82492075-b486-413c-9bd4-05eba466843e</subsheetid><loginhibit /><display x="-30" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be sought. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Direction" narrative="The direction in which the next empty cell is required. This should start with any of &quot;U&quot;, &quot;D&quot;, &quot;L&quot; or &quot;R&quot; to find a cell up, down, left or right respectively. The direction parameter is not case-sensitive." expr="&quot;D&quot;" /><input type="flag" name="Activate Cell?" narrative="True to activate the cell which is found; False to just return the reference and leave the active cell as it was before. Default is False." expr="True" /></inputs><outputs><output type="text" name="Cell Reference" narrative="The cell reference identifying the next empty cell from the active cell in the direction given. An empty value indicates that there were no empty cells between the active cell and a boundary." stage="cellref" /></outputs><onsuccess>b90c78f9-6a37-4db4-b30f-ac96d30c730c</onsuccess><processid>0b5de6c6-ed9a-443d-95b8-142dd521120e</processid></stage><stage stageid="c9e817ca-81d1-4d65-b9d1-27fe80445871" name="handle" type="Data"><subsheetid>82492075-b486-413c-9bd4-05eba466843e</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="1f9a80c2-fd03-43e2-a333-5f2c6b7ad0e2" name="cellref" type="Data"><subsheetid>82492075-b486-413c-9bd4-05eba466843e</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="febdcc05-5a8a-4445-a188-d0259dfd21a5" name="handle" type="Data"><subsheetid>9b535bfc-4f80-4d7c-88b5-49b941688030</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="9cbae4e4-6b41-4a38-a05e-0dc4df5d25a3" name="End" type="End"><subsheetid>a031ba9a-3bd2-49b3-8d9b-6f982b34eb3c</subsheetid><loginhibit /><display x="-45" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="111cd676-ae8c-4b83-9bb1-5567fe0735bd" name="FormatCell" type="Code"><subsheetid>a031ba9a-3bd2-49b3-8d9b-6f982b34eb3c</subsheetid><loginhibit /><display x="-45" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="cellref" expr="[cellref]" /><input type="text" name="format" expr="[format]" /><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>9cbae4e4-6b41-4a38-a05e-0dc4df5d25a3</onsuccess><code><![CDATA[
GetWorkbook(handle,Nothing).ActiveSheet.Range(cellref,cellref).NumberFormat = format]]></code></stage><stage stageid="6ed5e96a-3604-426e-b112-0be4f4f4b9a8" name="Activate Workbook" type="SubSheet"><subsheetid>a031ba9a-3bd2-49b3-8d9b-6f982b34eb3c</subsheetid><loginhibit /><display x="-45" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook should be activated. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The workbook name identifying the workbook which should be activated - empty text indicates the currently active workbook, making this a no-op." expr="&quot;&quot;" /></inputs><onsuccess>111cd676-ae8c-4b83-9bb1-5567fe0735bd</onsuccess><processid>6632ed99-8751-4c2a-ad00-3cc016300e08</processid></stage><stage stageid="a8dd2eb1-5144-4f87-b5fc-87dc562df875" name="Get Active Cell" type="SubSheet"><subsheetid>9b535bfc-4f80-4d7c-88b5-49b941688030</subsheetid><loginhibit /><display x="-30" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the currently active cell is required. The default of zero indicates the currently active instance." expr="[handle]" /></inputs><outputs><output type="text" name="Cell Reference" narrative="The reference identifying the currently active cell on the specified sheet." stage="cellref" /></outputs><onsuccess>22a903ea-24b0-4f4b-ad3d-590aa6ab3d97</onsuccess><processid>31ed0ec6-5d0f-4f9e-90c8-1fb7e73e5d5c</processid></stage><stage stageid="8480e1e0-5e73-4bec-bc84-ab2b4a5f43fa" name="cellref" type="Data"><subsheetid>9b535bfc-4f80-4d7c-88b5-49b941688030</subsheetid><display x="120" y="-105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="22a903ea-24b0-4f4b-ad3d-590aa6ab3d97" name="Format Cell" type="SubSheet"><subsheetid>9b535bfc-4f80-4d7c-88b5-49b941688030</subsheetid><loginhibit /><display x="-30" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the cell to be formatted is contained. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Cell Reference" narrative="The reference to the cell whose format should be changed." expr="[cellref]" /><input type="text" name="Cell Format" narrative="The format required for the cell - this can be the name of the default format (eg. &quot;General&quot;) or a sequence of formatting codes (eg. &quot;£#,##0.00_);[Red](£#,##0.00)&quot;)" expr="[format]" /></inputs><onsuccess>2776814b-74bd-42b3-b282-80a156b933cd</onsuccess><processid>a031ba9a-3bd2-49b3-8d9b-6f982b34eb3c</processid></stage><stage stageid="dc6c799a-7fa3-4623-9bf8-e966d530b67d" name="format" type="Data"><subsheetid>9b535bfc-4f80-4d7c-88b5-49b941688030</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2776814b-74bd-42b3-b282-80a156b933cd" name="End3" type="End"><subsheetid>9b535bfc-4f80-4d7c-88b5-49b941688030</subsheetid><loginhibit /><display x="-30" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="04fbbbb0-aba9-4518-8bc7-d26273986f9e" name="Set Window Size" type="SubSheetInfo"><subsheetid>39374841-edab-4ea9-86d9-5f2fff3f1a5f</subsheetid><narrative>Sets the window size of the specified instance.</narrative><display x="-195" y="-105" w="180" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7a197c45-c253-4fb8-bed5-e01508e93824" name="Start" type="Start"><subsheetid>39374841-edab-4ea9-86d9-5f2fff3f1a5f</subsheetid><loginhibit /><display x="-15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle specifying the instance on which the bounds should be changed." stage="handle" /><input type="number" name="Width" narrative="The width to which the instance's window should be set" stage="width" /><input type="number" name="Height" narrative="The height to which the instance's window should be set." stage="height" /></inputs><onsuccess>3d73ff94-84e6-4e12-947e-76d14884579c</onsuccess></stage><stage stageid="a952606a-38e1-4585-821a-7395c94d70cb" name="End" type="End"><subsheetid>39374841-edab-4ea9-86d9-5f2fff3f1a5f</subsheetid><loginhibit /><display x="-15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d4c82574-5577-49e8-80a8-79a27ace5ffb" name="Set Window Location" type="SubSheetInfo"><subsheetid>904eeb0d-e6a2-408b-99b5-621307252585</subsheetid><narrative>Moves the specified instance's window to the required location.</narrative><display x="-195" y="-105" w="180" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="67ee4120-06af-41a6-ae0a-629e1bd3bd05" name="Start" type="Start"><subsheetid>904eeb0d-e6a2-408b-99b5-621307252585</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance whose window location should be set." stage="handle" /><input type="number" name="X" narrative="The x co-ordinate to which the window should be moved." stage="x" /><input type="number" name="Y" narrative="The y co-ordinate to which the window should be moved." stage="y" /></inputs><onsuccess>3f663a38-1c01-438f-a02a-aa56ded74764</onsuccess></stage><stage stageid="5b24c512-8930-4c34-9083-7834083ab65c" name="End" type="End"><subsheetid>904eeb0d-e6a2-408b-99b5-621307252585</subsheetid><loginhibit /><display x="-30" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="129fe5f1-311c-4b58-964f-74b62d5f17ad" name="Set Window State" type="SubSheetInfo"><subsheetid>d4998c94-d432-4713-81a5-e902535089c6</subsheetid><narrative>Minimizes / maximizes / restores the window attached to the specified excel instance.

Exceptions:
Invalid Input Parameter : If the given state was not "normal" and did not start with either "min" or "max"</narrative><display x="-240" y="-105" w="270" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="44e95a42-ad61-4e8d-af8a-aed037662ba8" name="Go To Next Cell" type="SubSheetInfo"><subsheetid>b0b877cd-07ce-4df1-a63b-89fa4d315c4c</subsheetid><narrative>Moves a specified number of rows and columns from the currently active cell and returns the new cell reference.
If the resultant cell reference is the same as the active cell before this action was called, this action has 'failed'. This is usually because the active cell is too close to a boundary.</narrative><display x="-330" y="-135" w="420" h="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a87664dd-017d-4b12-b9c3-7230d7910326" name="Start" type="Start"><subsheetid>b0b877cd-07ce-4df1-a63b-89fa4d315c4c</subsheetid><loginhibit /><display x="-45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be navigated to. The default of zero indicates the currently active instance." stage="handle" /><input type="number" name="Rows" narrative="The number of rows to navigate down. A negative value indicates that the action should navigate UP the required number of rows." stage="rows" /><input type="number" name="Columns" narrative="The number of columns to navigate to the right. A negative value indicates that the action should navigate to the left." stage="cols" /></inputs><onsuccess>fdbdccce-2959-40cb-b4b4-d53556dd97a1</onsuccess></stage><stage stageid="dcae25b1-7e8b-4ee2-9ffc-11aacd935154" name="Close Current Workbook" type="SubSheetInfo"><subsheetid>efe9d5bd-c8f0-42e1-aadc-6c7b0bfdd92c</subsheetid><narrative>Closes the current workbook on the current excel instance.
This is the equivalent of calling the 'Close Workbook' action with the default values for 'handle' (0) and 'Workbook Name' ("")</narrative><display x="-210" y="-105" w="210" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="8fccb8ba-397f-406d-a6cd-85cb3c09ba17" name="Start" type="Start"><subsheetid>efe9d5bd-c8f0-42e1-aadc-6c7b0bfdd92c</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook which should be closed resides. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>9dbc3256-ac5d-4bb3-880c-a4aaaaf33bc5</onsuccess></stage><stage stageid="160a79e4-be77-47f7-b8f2-271a170a762f" name="End" type="End"><subsheetid>efe9d5bd-c8f0-42e1-aadc-6c7b0bfdd92c</subsheetid><loginhibit /><display x="-30" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9dbc3256-ac5d-4bb3-880c-a4aaaaf33bc5" name="Close Workbook" type="SubSheet"><subsheetid>efe9d5bd-c8f0-42e1-aadc-6c7b0bfdd92c</subsheetid><loginhibit /><display x="-30" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="Workbook Name" expr="&quot;&quot;" /><input type="flag" name="Save Data" expr="False" /></inputs><onsuccess>160a79e4-be77-47f7-b8f2-271a170a762f</onsuccess><processid>6ccaae8b-c06f-45c8-8772-835218881458</processid></stage><stage stageid="a9a3eac3-7c04-4983-9224-bbf490c75af1" name="handle" type="Data"><subsheetid>efe9d5bd-c8f0-42e1-aadc-6c7b0bfdd92c</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="00fbd16c-c443-4d2e-ae2a-4539f816c297" name="rows" type="Data"><subsheetid>b0b877cd-07ce-4df1-a63b-89fa4d315c4c</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2fa354e6-61e2-452d-b0c4-208150e9076d" name="cols" type="Data"><subsheetid>b0b877cd-07ce-4df1-a63b-89fa4d315c4c</subsheetid><display x="-195" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="50344da8-13a3-4d20-899b-bfd3b5507681" name="End" type="End"><subsheetid>b0b877cd-07ce-4df1-a63b-89fa4d315c4c</subsheetid><loginhibit /><display x="-45" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Cell Reference" narrative="The reference of the currently active cell after navigating the required number of rows / columns. If the action could not navigate the desired number of rows / columns (eg. the active cell is near a boundary), then the active cell will not have been change, and this cell reference will represent the same cell that was active before this action was initiated." stage="cellref" /></outputs></stage><stage stageid="30a3c6c6-5324-4fe2-a0b2-3026f1a5e379" name="GoToNextCell" type="Code"><subsheetid>b0b877cd-07ce-4df1-a63b-89fa4d315c4c</subsheetid><loginhibit /><display x="-45" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="number" name="cols" expr="[cols]" /><input type="number" name="rows" expr="[rows]" /></inputs><outputs><output type="text" name="cellref" stage="cellref" /></outputs><onsuccess>50344da8-13a3-4d20-899b-bfd3b5507681</onsuccess><code><![CDATA[
Dim Instance As Object = GetInstance(handle)

If Instance.ActiveCell Is Nothing Then
	Dim wb As Object = Instance.ActiveWorkBook 
	If wb IsNot Nothing Then
		Dim ws As Object = wb.ActiveSheet
		If ws IsNot Nothing Then
			ws.Range(1,1).Activate()
		Else
			Throw New Exception("There is no active worksheet")
		End If
	Else
		Throw New Exception("There is no active workbook")
	End If
Else
	Try
		Instance.ActiveCell.Offset(rows,cols).Activate()
	Catch ex As Exception
	End Try
End If
cellref = Instance.ActiveCell.Address(False,False)
]]></code></stage><stage stageid="fdbdccce-2959-40cb-b4b4-d53556dd97a1" name="Activate Workbook" type="SubSheet"><subsheetid>b0b877cd-07ce-4df1-a63b-89fa4d315c4c</subsheetid><loginhibit /><display x="-45" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook should be activated. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The workbook name identifying the workbook which should be activated - empty text indicates the currently active workbook, making this a no-op." expr="&quot;&quot;" /></inputs><onsuccess>30a3c6c6-5324-4fe2-a0b2-3026f1a5e379</onsuccess><processid>6632ed99-8751-4c2a-ad00-3cc016300e08</processid></stage><stage stageid="5742c4d1-0b40-4dd9-8cf0-e66b9adeab4b" name="handle" type="Data"><subsheetid>b0b877cd-07ce-4df1-a63b-89fa4d315c4c</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="437bf59c-d85b-45c9-8828-2e2c665afd10" name="cellref" type="Data"><subsheetid>b0b877cd-07ce-4df1-a63b-89fa4d315c4c</subsheetid><display x="105" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="dc5149d8-0c99-413a-81c8-ba9efc719cdc" name="handle" type="Data"><subsheetid>39374841-edab-4ea9-86d9-5f2fff3f1a5f</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="a87fd94f-f26f-4c2e-bb67-1ae4c0bed939" name="width" type="Data"><subsheetid>39374841-edab-4ea9-86d9-5f2fff3f1a5f</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="59a65ce5-cfb1-4190-8449-e4fb5ced121a" name="height" type="Data"><subsheetid>39374841-edab-4ea9-86d9-5f2fff3f1a5f</subsheetid><display x="-195" y="60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3d73ff94-84e6-4e12-947e-76d14884579c" name="CheckInstanceHandle" type="SubSheet"><subsheetid>39374841-edab-4ea9-86d9-5f2fff3f1a5f</subsheetid><loginhibit /><display x="-15" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle representing the instance." expr="[handle]" /></inputs><onsuccess>82380eea-db5c-47b3-9a94-2e19338cca95</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="82380eea-db5c-47b3-9a94-2e19338cca95" name="SetWindowSize" type="Code"><subsheetid>39374841-edab-4ea9-86d9-5f2fff3f1a5f</subsheetid><loginhibit /><display x="-15" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="number" name="height" expr="[height]" /><input type="number" name="width" expr="[width]" /></inputs><onsuccess>a952606a-38e1-4585-821a-7395c94d70cb</onsuccess><code><![CDATA[Dim excel as Object = GetInstance(handle)

excel.WindowState = -4143 'Excel.XlWindowState.xlNormal
excel.Width = width
excel.Height = height]]></code></stage><stage stageid="8acfecd0-d6d9-4de0-ae9e-46922ed73111" name="x" type="Data"><subsheetid>904eeb0d-e6a2-408b-99b5-621307252585</subsheetid><display x="-195" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b68bc93f-161f-4d6f-825d-2d961690ca56" name="y" type="Data"><subsheetid>904eeb0d-e6a2-408b-99b5-621307252585</subsheetid><display x="-195" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="079ee65b-a90b-4ab6-81b5-801557c07fbf" name="handle" type="Data"><subsheetid>904eeb0d-e6a2-408b-99b5-621307252585</subsheetid><display x="-195" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="3f663a38-1c01-438f-a02a-aa56ded74764" name="CheckInstanceHandle" type="SubSheet"><subsheetid>904eeb0d-e6a2-408b-99b5-621307252585</subsheetid><loginhibit /><display x="-30" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle representing the instance." expr="[handle]" /></inputs><onsuccess>12d30538-38bf-4f9b-a180-41d0b836854c</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="12d30538-38bf-4f9b-a180-41d0b836854c" name="SetWindowLocation" type="Code"><subsheetid>904eeb0d-e6a2-408b-99b5-621307252585</subsheetid><loginhibit /><display x="-30" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="number" name="x" expr="[x]" /><input type="number" name="y" expr="[y]" /></inputs><onsuccess>5b24c512-8930-4c34-9083-7834083ab65c</onsuccess><code><![CDATA[Dim excel as Object = GetInstance(handle)

excel.WindowState = -4143 'Excel.XlWindowState.xlNormal
excel.Left = x
excel.Top = y]]></code></stage><stage stageid="016d76a7-6a95-485e-84f5-faa85a0c0712" name="Start" type="Start"><subsheetid>d4998c94-d432-4713-81a5-e902535089c6</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance whose window state should be set." stage="handle" /><input type="text" name="State" narrative="The state of the window which is required. Should start with &quot;min&quot; (to minimize the window), &quot;max&quot; (to maximise the window) or it should equal &quot;normal&quot; (to restore the window). Anything else will result in an error." stage="state" /></inputs><onsuccess>0f8fc913-9174-4304-823f-d18ffae7217a</onsuccess></stage><stage stageid="ffe49fc1-13a2-4e84-a649-bd692ef7752a" name="End" type="End"><subsheetid>d4998c94-d432-4713-81a5-e902535089c6</subsheetid><loginhibit /><display x="-30" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ca7b06cd-e6e3-42e1-8980-cb429796aa3b" name="handle" type="Data"><subsheetid>d4998c94-d432-4713-81a5-e902535089c6</subsheetid><display x="-195" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="3db578f3-47a7-4150-9ccc-6f9a16dbe73f" name="CheckInstanceHandle" type="SubSheet"><subsheetid>d4998c94-d432-4713-81a5-e902535089c6</subsheetid><loginhibit /><display x="-30" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle representing the instance." expr="[handle]" /></inputs><onsuccess>458615b7-ea0b-4d96-9dce-87099d6e5950</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="458615b7-ea0b-4d96-9dce-87099d6e5950" name="SetWindowState" type="Code"><subsheetid>d4998c94-d432-4713-81a5-e902535089c6</subsheetid><loginhibit /><display x="-30" y="45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="state" expr="[state]" /></inputs><onsuccess>ffe49fc1-13a2-4e84-a649-bd692ef7752a</onsuccess><code><![CDATA[Dim excel as Object = GetInstance(handle)

If state.ToLower().StartsWith("min") Then
	excel.WindowState = -4140
ElseIf state.ToLower().StartsWith("max") Then
	excel.WindowState = -4137
ElseIf state.ToLower() = "normal" Then
	excel.WindowState = -4143
End If]]></code></stage><stage stageid="4686174e-a845-4f2b-9a0a-70325a2df399" name="Valid State?" type="Decision"><subsheetid>d4998c94-d432-4713-81a5-e902535089c6</subsheetid><loginhibit /><narrative>Checks if the given state is a valid value</narrative><display x="-30" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="StartsWith([state],&quot;max&quot;) or StartsWith([state],&quot;min&quot;) or [state]=&quot;normal&quot;" /><ontrue>3db578f3-47a7-4150-9ccc-6f9a16dbe73f</ontrue><onfalse>c0e54c49-a9fc-48c4-a54e-2b85581d4ba5</onfalse></stage><stage stageid="1537f595-55fc-4726-910a-1d5ef88bf7a4" name="state" type="Data"><subsheetid>d4998c94-d432-4713-81a5-e902535089c6</subsheetid><display x="-195" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c0e54c49-a9fc-48c4-a54e-2b85581d4ba5" name="Invalid State Exception" type="Exception"><subsheetid>d4998c94-d432-4713-81a5-e902535089c6</subsheetid><display x="135" y="-45" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Invalid Input Parameter" detail="&quot;Invalid Window State Parameter : &quot; &amp; [state] &amp; &quot; - must start with 'min', 'max' or equal 'normal'&quot;" /></stage><stage stageid="9d0e19ce-07b8-4074-a34c-6186bcd3ca77" name="newworkbookname" type="Data"><subsheetid>81b9e5cd-a91d-4a33-bc23-1602c5fe878f</subsheetid><display x="-195" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="04e9d703-4b1c-4196-b1ff-7bf68a12faae" name="newworkbookname" type="Data"><subsheetid>21a53e34-8128-41cb-ad73-17250758ff23</subsheetid><narrative>The new workbook name assigned by Excel after saving the book</narrative><display x="-135" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9ab01750-1bb3-4299-add0-8a1d08f6bf41" name="handle" type="Data"><subsheetid>81b9e5cd-a91d-4a33-bc23-1602c5fe878f</subsheetid><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="f778bc6c-8cdd-4e56-80b8-b7cdb1fd11ae" name="Release Instance" type="SubSheetInfo"><subsheetid>4fb11e41-83d8-461d-8c0d-04cdd2f670e2</subsheetid><narrative>Removes an instance from this business object *without* closing or quitting it - after running this action, the instance in question will not be accessible by this object unless it is re-attached to using 'Open Instance'.

Params:
- handle : Number : The handle of the instance to be released. The default of 0 indicates the currently active instance. Note that following the current instance being released, the current instance will not be set.

Exceptions:
- Bad Handle : If the given handle did not correspond to an instance.
</narrative><display x="-240" y="-135" w="360" h="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="66fece2a-2c82-48bb-92fe-211ee6556a24" name="Start" type="Start"><subsheetid>4fb11e41-83d8-461d-8c0d-04cdd2f670e2</subsheetid><loginhibit /><preconditions><condition narrative="" /><condition narrative="" /></preconditions><display x="15" y="-195" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance to be released. The default value of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>1d0738a9-7841-446d-b3ed-1a4bafeccc1b</onsuccess></stage><stage stageid="dc556131-4dde-459f-9af8-8c854fcae760" name="End" type="End"><subsheetid>4fb11e41-83d8-461d-8c0d-04cdd2f670e2</subsheetid><loginhibit /><display x="15" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="6da262c1-9a82-4bc8-9363-ede171f125e5" name="handle" type="Data"><subsheetid>4fb11e41-83d8-461d-8c0d-04cdd2f670e2</subsheetid><display x="-225" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="1d0738a9-7841-446d-b3ed-1a4bafeccc1b" name="CheckInstanceHandle" type="SubSheet"><subsheetid>4fb11e41-83d8-461d-8c0d-04cdd2f670e2</subsheetid><loginhibit /><display x="15" y="-150" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>2e67a2b9-10bf-4d4d-9bd9-db68edaf7662</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="2e67a2b9-10bf-4d4d-9bd9-db68edaf7662" name="Release Instance" type="Code"><subsheetid>4fb11e41-83d8-461d-8c0d-04cdd2f670e2</subsheetid><loginhibit /><display x="15" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>dc556131-4dde-459f-9af8-8c854fcae760</onsuccess><code><![CDATA[
	Dim current as Object = CurrentInstance
	Dim inst as Object = GetInstance(handle) ' Careful - sets the 'current instance' to inst

	HandleMap.Remove(handle)
	InstanceMap.Remove(inst)

	If Object.ReferenceEquals(inst, current) Then
		CurrentInstance = Nothing
	Else
		CurrentInstance = current
	End If
]]></code></stage><stage stageid="0f04ef58-eacb-4204-ba2b-d073285c2be8" name="Note1" type="Note"><subsheetid>859e3c31-acbc-48dd-8535-ef2ce9385d70</subsheetid><loginhibit /><narrative>Don't need to anything - a side-effect of the check is to set the current instance... makes it simple.</narrative><display x="150" y="-120" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f0ee2a73-65b2-418e-8b77-6dc802046c5d" name="Attach" type="SubSheetInfo"><subsheetid>7ad81501-44a1-48ab-94fd-9b2c35ed20b8</subsheetid><narrative>Back-compatible link to 'Open Instance'. This opens the first running instance of Excel found and links to it in this object.

Returns:
- handle : Number : An integer with which the instance opened can be identified.
- Enable Events : Flag : Indicates that events should be enabled / disabled on the attached instance - defaulted to True</narrative><display x="-210" y="-120" w="240" h="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="92e3475b-ed7d-4ae1-940c-7eb554a7cea8" name="Start" type="Start"><subsheetid>7ad81501-44a1-48ab-94fd-9b2c35ed20b8</subsheetid><loginhibit /><display x="-15" y="-150" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Enable Events" narrative="Flag to indicate that events should be enabled / disabled on the attached instance - defaulted to True" stage="Enable Events" /></inputs><onsuccess>ba67509b-7301-4ce1-a467-e9970249b392</onsuccess></stage><stage stageid="c74db74c-8822-4391-8593-d9919e357a5b" name="End" type="End"><subsheetid>7ad81501-44a1-48ab-94fd-9b2c35ed20b8</subsheetid><loginhibit /><display x="-15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="handle" narrative="The integer handle which identifies the excel instance in subsequent actions" stage="handle" /></outputs></stage><stage stageid="f68ab231-3cbb-423e-84de-9103b9f971f4" name="handle" type="Data"><subsheetid>7ad81501-44a1-48ab-94fd-9b2c35ed20b8</subsheetid><display x="-195" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ba67509b-7301-4ce1-a467-e9970249b392" name="Open Instance" type="SubSheet"><subsheetid>7ad81501-44a1-48ab-94fd-9b2c35ed20b8</subsheetid><loginhibit /><display x="-15" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Workbook Name" narrative="The name of the workbook which should be opened. An empty value indicates that the first activated instance of Excel should be opened." expr="&quot;&quot;" /><input type="flag" name="Enable Events?" narrative="Flag to indicate whether events (ie. macros) should be enabled on the given instance. Default is True" expr="[Enable Events]" /></inputs><outputs><output type="number" name="handle" narrative="The integer handle with which the instance can be identified in later actions." stage="handle" /></outputs><onsuccess>c74db74c-8822-4391-8593-d9919e357a5b</onsuccess><processid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</processid></stage><stage stageid="fa5aede4-db23-4781-8954-3baaf0fd0740" name="Attach to workbook" type="SubSheetInfo"><subsheetid>2b3544ad-af96-4f40-9b50-16dfbe0600f1</subsheetid><narrative>Back compatible link to 'Open instance' - attaches to the excel instance containing the current workbook. Note that if the instance containing the workbook could not be found, a new instance will be created.

Params:
- File name : Text : The name of the file in the instance that should be opened.
- Enable Events : Flag : Indicates that events should be enabled / disabled on the attached instance - defaulted to True
Returns:
- handle : Number : The integer that can be used to reference this instance later.</narrative><display x="-195" y="-135" w="390" h="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="431ac081-4d84-414a-80dd-cb137dd67a73" name="Start" type="Start"><subsheetid>2b3544ad-af96-4f40-9b50-16dfbe0600f1</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="60" y="-195" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File name" narrative="The name of the file which should be opened" stage="filename" /><input type="flag" name="Enable Events" narrative="Flag to indicate that events should be enabled / disabled on the attached instance - defaulted to True" stage="Enable Events" /></inputs><onsuccess>4a719c51-85b9-4750-9593-bf0e3166edfc</onsuccess></stage><stage stageid="ba3c2775-b5ac-44a8-be6b-05befaea619b" name="End" type="End"><subsheetid>2b3544ad-af96-4f40-9b50-16dfbe0600f1</subsheetid><loginhibit /><display x="60" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="handle" narrative="The integer handle indentifying the instance opened. This can be used in subsequent actions to identify the instance." stage="handle" /></outputs></stage><stage stageid="0283fb0e-8dda-4956-b434-ea1d6c99e063" name="handle" type="Data"><subsheetid>2b3544ad-af96-4f40-9b50-16dfbe0600f1</subsheetid><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4a719c51-85b9-4750-9593-bf0e3166edfc" name="Open Instance" type="SubSheet"><subsheetid>2b3544ad-af96-4f40-9b50-16dfbe0600f1</subsheetid><loginhibit /><display x="60" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Workbook Name" narrative="The name of the workbook which should be opened. An empty value indicates that the first activated instance of Excel should be opened." expr="[filename]" /><input type="flag" name="Enable Events?" narrative="Flag to indicate whether events (ie. macros) should be enabled on the given instance. Default is True" expr="[Enable Events]" /></inputs><outputs><output type="number" name="handle" narrative="The integer handle with which the instance can be identified in later actions." stage="handle" /></outputs><onsuccess>ba3c2775-b5ac-44a8-be6b-05befaea619b</onsuccess><processid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</processid></stage><stage stageid="c99c412d-dbb6-4a6a-a7e2-9834a74052d0" name="filename" type="Data"><subsheetid>2b3544ad-af96-4f40-9b50-16dfbe0600f1</subsheetid><display x="-195" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9a734ecf-7e58-4aa4-b7ff-5aa4494ec687" name="cellref empty?" type="Decision"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><loginhibit /><display x="15" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[cellref]=&quot;&quot;" /><ontrue>bed65abf-b1ad-4f7e-83be-c8a96e3ea162</ontrue><onfalse>39135f99-dd54-4a2b-bff2-555714753a6d</onfalse></stage><stage stageid="bed65abf-b1ad-4f7e-83be-c8a96e3ea162" name="anchor3" type="Anchor"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><loginhibit /><display x="105" y="-90" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>b98f8e72-e995-42a4-b3f9-df0acf2a5944</onsuccess></stage><stage stageid="b98f8e72-e995-42a4-b3f9-df0acf2a5944" name="anchor4" type="Anchor"><subsheetid>0e031661-2f5e-4cb2-949b-97babe59ff81</subsheetid><loginhibit /><display x="105" y="0" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>a04a5ea1-798c-4659-ac77-0c966c305cba</onsuccess></stage><stage stageid="250bb1db-ca8e-4edb-b9a4-52fa39261823" name="Go To Cell" type="SubSheet"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><loginhibit /><display x="15" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required cell should be navigated to. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Cell Reference" narrative="The cell reference on the currently active sheet within the specified instance which should be navigated to." expr="[cellref]" /></inputs><onsuccess>94dc11fe-505e-4544-a26b-80d3d88d0951</onsuccess><processid>ed502669-4207-4c88-895d-8c58ec321578</processid></stage><stage stageid="29427d7f-a2d9-4b65-b6c4-773881bd285d" name="cellref empty?" type="Decision"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><loginhibit /><display x="15" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[cellref]=&quot;&quot;" /><ontrue>e743b184-cb2f-43cb-83c1-b99654286d3d</ontrue><onfalse>250bb1db-ca8e-4edb-b9a4-52fa39261823</onfalse></stage><stage stageid="e743b184-cb2f-43cb-83c1-b99654286d3d" name="anchor3" type="Anchor"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><loginhibit /><display x="105" y="-90" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>dea637ce-5933-4805-94a4-f2bbd9b99d0b</onsuccess></stage><stage stageid="dea637ce-5933-4805-94a4-f2bbd9b99d0b" name="anchor4" type="Anchor"><subsheetid>17f8ab72-203a-42d4-a59b-a073ccd57bb0</subsheetid><loginhibit /><display x="105" y="0" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>94dc11fe-505e-4544-a26b-80d3d88d0951</onsuccess></stage><stage stageid="bcf597f1-97f7-449c-8865-ff8ca139dd6c" name="Get Active Cell Value" type="SubSheetInfo"><subsheetid>d96215cc-750e-4616-8852-1d4d44a9f21b</subsheetid><narrative>Gets the value of the currently active cell.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b69207e1-2811-4150-a61f-4746ef8489d4" name="Start" type="Start"><subsheetid>d96215cc-750e-4616-8852-1d4d44a9f21b</subsheetid><loginhibit /><display x="-45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the cell whose value is required resides. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>af8aab5e-4539-4acc-a5cc-1bd632282587</onsuccess></stage><stage stageid="73e8408e-ff97-4d9f-b0e0-5a0e844b731c" name="End" type="End"><subsheetid>d96215cc-750e-4616-8852-1d4d44a9f21b</subsheetid><loginhibit /><display x="-45" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Value" narrative="The (unformatted) value found at the specified cell." stage="Value" /></outputs></stage><stage stageid="af8aab5e-4539-4acc-a5cc-1bd632282587" name="Get Active Cell Value" type="SubSheet"><subsheetid>d96215cc-750e-4616-8852-1d4d44a9f21b</subsheetid><loginhibit /><display x="-45" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance from which the required cell value should be retrieved. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Cell Reference" narrative="The cell reference indicating which cell's value should be retrieved. An empty value indicates that the currently active cell's value should be retrieved." expr="&quot;&quot;" /></inputs><outputs><output type="text" name="Value" narrative="The (unformatted) value from the required cell." stage="Value" /></outputs><onsuccess>73e8408e-ff97-4d9f-b0e0-5a0e844b731c</onsuccess><processid>0e031661-2f5e-4cb2-949b-97babe59ff81</processid></stage><stage stageid="88d7196d-2443-4439-8261-6700e9673d0a" name="handle" type="Data"><subsheetid>d96215cc-750e-4616-8852-1d4d44a9f21b</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="e4cdc61b-a1e1-461e-8d91-a98cd40a2c5a" name="Value" type="Data"><subsheetid>d96215cc-750e-4616-8852-1d4d44a9f21b</subsheetid><display x="-195" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="69cd13bc-f818-4a5b-be64-b6fb7de62c61" name="Create Worksheet" type="SubSheetInfo"><subsheetid>f78a5f80-c2d5-4e9b-ae08-a56fb8007b18</subsheetid><narrative>Creates a new worksheet in the specified workbook with the given name. If a sheet with the given name already exists, this will activate that sheet.

Params:
- handle : Number : The number identifying the instance required.
- Workbook Name : Text : The name of the workbook to add it to. An empty string (the default) indicates the active workbook in the instance.
- Worksheet Name : Text : The name of the worksheet that is required. Note that if the name matches a worksheet already in the workbook a new worksheet will not be created, but that worksheet will be activated.

Exceptions: 
- Bad Handle : If the given handle did not correspond to an instance.
- Workbook Not Found : If the given workbook did not exist on the specified instance.</narrative><display x="-285" y="-165" w="420" h="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="2a0c385f-fe76-4eb3-a36f-4936eb7ac84a" name="Start" type="Start"><subsheetid>f78a5f80-c2d5-4e9b-ae08-a56fb8007b18</subsheetid><loginhibit /><display x="-30" y="-240" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet should be created. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook in which the sheet should be created - The default empty value indicates the currently active workbook on the specified instance." stage="workbookname" /><input type="text" name="Worksheet Name" narrative="The name of the sheet which should be activated. The default empty text value indicates that the currently active sheet should be, er, activated, making this a no-op." stage="worksheetname" /></inputs><onsuccess>89240340-492e-44ab-9fed-c64a6d3fffdf</onsuccess></stage><stage stageid="5d624e42-813e-467d-bda1-ebb3e410045c" name="End" type="End"><subsheetid>f78a5f80-c2d5-4e9b-ae08-a56fb8007b18</subsheetid><loginhibit /><display x="-30" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="89240340-492e-44ab-9fed-c64a6d3fffdf" name="Activate Worksheet" type="SubSheet"><subsheetid>f78a5f80-c2d5-4e9b-ae08-a56fb8007b18</subsheetid><loginhibit /><display x="-30" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="Workbook Name" expr="[workbookname]" /><input type="flag" name="Create If Missing?" expr="True" /><input type="text" name="Worksheet Name" expr="[worksheetname]" /></inputs><onsuccess>5d624e42-813e-467d-bda1-ebb3e410045c</onsuccess><processid>733c2840-8162-465a-a8f2-7d023087c369</processid></stage><stage stageid="ab7509fd-0572-44d9-9050-b9c9907c49ac" name="handle" type="Data"><subsheetid>f78a5f80-c2d5-4e9b-ae08-a56fb8007b18</subsheetid><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="544db1ef-b84c-403c-b4ee-de2d660ec253" name="worksheetname" type="Data"><subsheetid>f78a5f80-c2d5-4e9b-ae08-a56fb8007b18</subsheetid><display x="-195" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="df17296d-4f63-46cf-bcd9-4acd7eefed34" name="workbookname" type="Data"><subsheetid>f78a5f80-c2d5-4e9b-ae08-a56fb8007b18</subsheetid><display x="-195" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="64089c9a-4a30-4db5-bf87-7ba017ba54e7" name="Write Collection" type="SubSheetInfo"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><narrative>Writes the given collection into the specified sheet.</narrative><display x="-195" y="-105" w="180" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a1ab274b-c2fb-47c7-94f8-292590df5765" name="Start" type="Start"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><loginhibit /><display x="45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the specified collection should be written. The default of zero indicates the currently active instance." stage="handle" /><input type="collection" name="Collection" narrative="The collection containing the data which should be written to the worksheet." stage="collection" /><input type="text" name="Workbook Name" narrative="The name of the workbook within which the data should be written. The default empty value indicates the current workbook within the specified instance." stage="workbookname" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet on which the given data should be written. The default empty value indicates the current sheet within the specified workbook." stage="worksheetname" /><input type="text" name="Cell Reference" narrative="The reference at which the collection should be written." stage="cellref" /><input type="flag" name="Include Column Names" narrative="True to indicate that the column names from the collection should be written out as the first row; False to ignore the column names and just write out the data." stage="includecolnames" /></inputs><onsuccess>a3a318c6-e218-4e78-a818-1673f90541b3</onsuccess></stage><stage stageid="8819df51-0132-421d-baae-b24b5082f131" name="End" type="End"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><loginhibit /><display x="45" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="85afbd6d-2c6e-42f8-8e71-7858a8488167" name="handle" type="Data"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><display x="-255" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bc024959-b016-4b16-93a8-e230e4ab936d" name="collection" type="Collection"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><display x="-135" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="71e25266-b464-4b47-b6a7-c8a70cff7514" name="worksheetname" type="Data"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><display x="-255" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e5f2a253-bee4-4ee0-9d8c-ab780265b5db" name="workbookname" type="Data"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><display x="-255" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="98c5b0c8-0c25-4972-b9c8-6057e6841ce5" name="includecolnames" type="Data"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><display x="-135" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a3a318c6-e218-4e78-a818-1673f90541b3" name="Activate Worksheet" type="SubSheet"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><loginhibit /><display x="45" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet which should be activated resides. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The name of the workbook in which the sheet exists - The default empty value indicates the currently active workbook on the specified instance." expr="[workbookname]" /><input type="text" name="Worksheet Name" narrative="The name of the sheet which should be activated. The default empty text value indicates that the currently active sheet should be, er, activated, making this a no-op." expr="[worksheetname]" /><input type="flag" name="Create If Missing?" narrative="True to create the sheet if it isn't present on the specified workbook; False to not do so." expr="False" /></inputs><onsuccess>f2ebff4d-5325-45e8-945d-73006f5bd7ce</onsuccess><processid>733c2840-8162-465a-a8f2-7d023087c369</processid></stage><stage stageid="f2ebff4d-5325-45e8-945d-73006f5bd7ce" name="WriteColl" type="Code"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><loginhibit /><display x="45" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="text" name="worksheetname" expr="[worksheetname]" /><input type="text" name="cellref" expr="[cellref]" /><input type="collection" name="collection" expr="[collection]" /><input type="flag" name="includecolnames" expr="[includecolnames]" /></inputs><onsuccess>8819df51-0132-421d-baae-b24b5082f131</onsuccess><code><![CDATA[' Get to the cell
Dim ws As Object = GetWorksheet(handle, workbookname, worksheetname)
Dim origin As Object = ws.Range(cellref, cellref)
Dim cell As Object = origin

Dim colInd As Integer = 0, rowInd As Integer = 0 ' Offsets from the origin cell

' Deal with the column names first
If includecolnames Then
	For Each col As DataColumn In Collection.Columns
		Try
			cell = origin.Offset(rowInd, colInd)
		Catch ex As Exception ' Hit the edge.
			Exit For
		End Try
		SetProperty(cell, "Value", col.ColumnName)
		colInd += 1
	Next
	rowInd += 1
End If

' Now for the data itself
For Each row As DataRow In Collection.Rows
	colInd = 0
	For Each col As DataColumn In Collection.Columns
		Try
			cell = origin.Offset(rowInd, colInd)
		Catch ex As Exception ' Hit the edge.
			Exit For
		End Try
		'MessageBox.Show("RowOffset:" & rowInd & "; ColOffset:" & colInd & "; cell: " & cell.Address(False,False))
		SetProperty(cell, "Value", row(col))
		colInd += 1
	Next
	rowInd += 1
Next]]></code></stage><stage stageid="fb353c57-7a8c-4ccb-9428-94761a643715" name="cellref" type="Data"><subsheetid>0dbe03a0-e259-47ab-bee7-7dec41ae32e7</subsheetid><display x="-135" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="add1def4-fc64-4534-bbb0-d3ac07611a85" name="anchor5" type="Anchor"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="15" y="60" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>108c176a-92d1-4f50-b460-ac6a3f0dac25</onsuccess></stage><stage stageid="51d7d624-e8bf-42b7-afdd-8d090b584865" name="anchor6" type="Anchor"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="195" y="60" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>add1def4-fc64-4534-bbb0-d3ac07611a85</onsuccess></stage><stage stageid="4be7292e-9eb1-43f7-9e87-3ae906bd79ed" name="savechanges" type="Data"><subsheetid>6ec3006a-6553-4526-b522-32526c4aa3cc</subsheetid><display x="-210" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="0f8fc913-9174-4304-823f-d18ffae7217a" name="state = Lower(state)" type="Calculation"><subsheetid>d4998c94-d432-4713-81a5-e902535089c6</subsheetid><loginhibit /><display x="-30" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>4686174e-a845-4f2b-9a0a-70325a2df399</onsuccess><calculation expression="Lower([state])" stage="state" /></stage><stage stageid="27e7ff80-4437-42a3-ba14-e499be5bc0e5" name="sheetexists" type="Data"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><display x="-240" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3a854b87-0e5a-46dd-8181-a58f97555aa8" name="Sheet Existed?" type="Decision"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[sheetexists]" /><ontrue>ddfe7f54-b5c2-410a-8a5d-3c2b52de9550</ontrue><onfalse>9bc52652-698b-46ca-ba0d-ebb170432963</onfalse></stage><stage stageid="9bc52652-698b-46ca-ba0d-ebb170432963" name="No Such Sheet" type="Exception"><subsheetid>733c2840-8162-465a-a8f2-7d023087c369</subsheetid><display x="150" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Worksheet Not Found" detail="&quot;No worksheet was found with the name '&quot; &amp; [worksheetname] &amp; &quot;' on the workbook '&quot; &amp; [workbookname] &amp; &quot;' within the instance with the handle: &quot; &amp; [handle]" /></stage><stage stageid="b396c564-6c31-4c6f-be0a-0cc64f178a19" name="sheetexisted" type="Data"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><display x="-195" y="135" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="56c2259b-9d71-4364-bede-79b4af1e3e96" name="Sheet Existed?" type="Decision"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><loginhibit /><display x="15" y="30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[sheetexisted]" /><ontrue>6b35d569-0eb2-4c01-bb88-e5f7c41bde81</ontrue><onfalse>091e0364-11db-49d4-8e94-8f5f9396fa9c</onfalse></stage><stage stageid="091e0364-11db-49d4-8e94-8f5f9396fa9c" name="No Such Sheet" type="Exception"><subsheetid>37a2442f-8e22-4749-8b44-4ef2980f28a6</subsheetid><display x="150" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Worksheet Not Found" detail="&quot;No worksheet was found with the name '&quot; &amp; [worksheetname] &amp; &quot;' on the workbook '&quot; &amp; [workbookname] &amp; &quot;' within the instance with the handle: &quot; &amp; [handle]" /></stage><stage stageid="b6d0da26-0322-4b43-b1d5-304466ff29fb" name="Sheet Exists?" type="Decision"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[sheetexists]" /><ontrue>cf5b0880-2cac-4221-946a-e4e3d7f0bc99</ontrue><onfalse>7e8fce63-9130-4c0f-baea-ea8be793c57d</onfalse></stage><stage stageid="7e8fce63-9130-4c0f-baea-ea8be793c57d" name="No Such Sheet" type="Exception"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><display x="165" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Worksheet Not Found" detail="&quot;No worksheet was found with the name '&quot; &amp; [worksheetname] &amp; &quot;' on the workbook '&quot; &amp; [workbookname] &amp; &quot;' within the instance with the handle: &quot; &amp; [handle]" /></stage><stage stageid="286f9733-2a26-4c00-a7ff-7ac289086919" name="sheetexists" type="Data"><subsheetid>8e22a2d9-d4c3-4fe0-bbf0-4788d1812d30</subsheetid><display x="-195" y="105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5cb56c9a-aa29-4ed4-84e1-9a65976ba50f" name="Does sheet exist?" type="Decision"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><loginhibit /><display x="105" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[sheetexists]" /><ontrue>859597f9-d048-46a3-bf99-2f3f6588c2c5</ontrue><onfalse>2b8672dd-8330-4c2d-a522-9f12c9e27ba2</onfalse></stage><stage stageid="2b8672dd-8330-4c2d-a522-9f12c9e27ba2" name="No Such Sheet" type="Exception"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><display x="300" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Worksheet Not Found" detail="&quot;No worksheet was found with the name '&quot; &amp; [worksheetname] &amp; &quot;' on the workbook '&quot; &amp; [workbookname] &amp; &quot;' within the instance with the handle: &quot; &amp; [handle]" /></stage><stage stageid="c50f1065-0989-47f5-aad4-c66396e462e0" name="sheetexists" type="Data"><subsheetid>f743df98-2e69-4559-89b6-32ef6637618d</subsheetid><display x="-285" y="105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="68b64b13-62f8-4431-94c4-62b7ff1f1c2c" name="Get Worksheet as Collection Offset" type="SubSheetInfo"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><narrative>Gets the current worksheet into a collection. This will read the worksheet and store the contents into the collection. The offset function allows a starting cell to be specified.</narrative><display x="-330" y="-705" w="210" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="164e0a2b-6c31-48ce-8172-7fb4edd3dbb3" name="End" type="End"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><loginhibit /><display x="-120" y="-480" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Data" narrative="The data output" stage="worksheetcollection" /></outputs></stage><stage stageid="0b6697a7-4aa1-4ec1-86db-bc41f3ca9d5e" name="handle" type="Data"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><display x="-330" y="-600" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="2c25e33f-7af9-4998-8c1a-4029c0e2af9e" name="workbookname" type="Data"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><display x="-330" y="-555" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5ee01090-4b0b-4e85-9643-1f3b40d182e2" name="Start" type="Start"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><loginhibit /><display x="-120" y="-705" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet which should be retrieved resides. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook which contains the sheet required. The default empty text indicates the currently active workbook on the specified instance." stage="workbookname" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet within the specified workbook which should be written to a collection. The default empty text indicates the currently active worksheet within the specified workbook." stage="worksheetname" /><input type="text" name="StartCell" narrative="The starting cell of the range of interest" stage="Start Cell" /><input type="flag" name="Use Header" narrative="This flag states if the excel collection uses a header, or not." stage="Use Header" /></inputs><onsuccess>8f50a819-e470-4c0e-97d5-08bd0f705682</onsuccess></stage><stage stageid="a755a822-d485-45ea-8d7d-426646b4aec0" name="GetWorksheetAsCollectionOffset" type="Code"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><loginhibit /><display x="-120" y="-585" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="text" name="worksheetname" expr="[worksheetname]" /><input type="text" name="Start Cell" expr="[Start Cell]" /><input type="flag" name="Use Header" expr="[Use Header]" /></inputs><outputs><output type="collection" name="worksheetcollection" stage="worksheetcollection" /></outputs><onsuccess>164e0a2b-6c31-48ce-8172-7fb4edd3dbb3</onsuccess><code><![CDATA[
	Dim ws as Object = GetWorksheet( _
	 handle, workbookname, worksheetname)
	ws.Activate()

	Dim cell as Object = ws.Range(Start_Cell)
	Dim r as Object = _
	 ws.UsedRange.Offset(cell.row-1,cell.column-1)
	r.Select()
	r.Copy()

	Dim data As String = GetClipboardText()
	
	worksheetCollection = ParseDelimSeparatedVariables( _
	 data, vbTab, Nothing, Use_Header)
]]></code></stage><stage stageid="8f50a819-e470-4c0e-97d5-08bd0f705682" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><loginhibit /><display x="-120" y="-645" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>a755a822-d485-45ea-8d7d-426646b4aec0</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="f82cf955-6669-494b-b6a1-866974c7cc74" name="worksheetname" type="Data"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><display x="-330" y="-510" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9b329ff1-b62a-41eb-9503-6673f300eb68" name="worksheetcollection" type="Collection"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><display x="90" y="-600" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="3f4b3c3e-515f-4ee7-9e70-5c76c0fb3044" name="Set Events Enabled" type="SubSheetInfo"><subsheetid>69db5cf5-4908-49c7-9027-8f48e26e5b27</subsheetid><narrative>Enables or disables the events on the specified excel instance.</narrative><display x="-195" y="-105" w="180" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="cb955f7e-320d-42d1-8dad-26b8f55d083b" name="Start" type="Start"><subsheetid>69db5cf5-4908-49c7-9027-8f48e26e5b27</subsheetid><loginhibit /><display x="0" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer identifier for the instance on which the events should be enabled / disabled. Zero indicates the 'current active' instance." stage="handle" /><input type="flag" name="Enable Events" narrative="True to enable events on the specified instance, False to disable events" stage="Enable Events" /></inputs><onsuccess>68483479-6865-4fd5-9a77-f4392c4ade9e</onsuccess></stage><stage stageid="3969dd45-fdea-4671-879e-461a56f312be" name="End" type="End"><subsheetid>69db5cf5-4908-49c7-9027-8f48e26e5b27</subsheetid><loginhibit /><display x="0" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="68483479-6865-4fd5-9a77-f4392c4ade9e" name="CheckInstanceHandle" type="SubSheet"><subsheetid>69db5cf5-4908-49c7-9027-8f48e26e5b27</subsheetid><loginhibit /><display x="0" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle representing the instance." expr="[handle]" /></inputs><onsuccess>21682417-b503-44b4-92f2-a3c80b4fad14</onsuccess><processid>492548e8-2fa5-473e-9061-df8326d46e4c</processid></stage><stage stageid="45553fd7-b75b-4fee-8961-aff490d121b3" name="Enable Events" type="Data"><subsheetid>69db5cf5-4908-49c7-9027-8f48e26e5b27</subsheetid><display x="-195" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="21682417-b503-44b4-92f2-a3c80b4fad14" name="Enable Events" type="Code"><subsheetid>69db5cf5-4908-49c7-9027-8f48e26e5b27</subsheetid><loginhibit /><display x="0" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="flag" name="enable" expr="[Enable Events]" /></inputs><onsuccess>3969dd45-fdea-4671-879e-461a56f312be</onsuccess><code><![CDATA[
GetInstance(handle).EnableEvents = enable]]></code></stage><stage stageid="3fd7c1fd-f40f-451d-885e-3f5e34c62b77" name="handle" type="Data"><subsheetid>69db5cf5-4908-49c7-9027-8f48e26e5b27</subsheetid><display x="-195" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="cb99ca56-7dc9-4a0d-860e-651747237d8f" name="Enable Events" type="Data"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><display x="-210" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="7fb1ba2f-64f1-417b-9b97-479efb954a9d" name="anchor8" type="Anchor"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="375" y="60" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>51d7d624-e8bf-42b7-afdd-8d090b584865</onsuccess></stage><stage stageid="108c176a-92d1-4f50-b460-ac6a3f0dac25" name="Enable/Disable Events" type="SubSheet"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="15" y="105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer identifier for the instance on which the events should be enabled / disabled. Zero indicates the 'current active' instance." expr="[handle]" /><input type="flag" name="Enable Events" narrative="True to enable events on the specified instance, False to disable events" expr="[Enable Events]" /></inputs><onsuccess>754832af-1144-48ff-8ab0-bb6c86d3f78e</onsuccess><processid>69db5cf5-4908-49c7-9027-8f48e26e5b27</processid></stage><stage stageid="17b0edcc-4892-4e42-93c9-9438a160ed66" name="Enable Events" type="Data"><subsheetid>7ad81501-44a1-48ab-94fd-9b2c35ed20b8</subsheetid><display x="-195" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="e24f71a3-1760-49ce-bbcb-4750671f20ad" name="Enable Events" type="Data"><subsheetid>2b3544ad-af96-4f40-9b50-16dfbe0600f1</subsheetid><display x="-195" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="9773e311-bcc9-4426-999e-7c586da425c5" name="Enable Events" type="Data"><subsheetid>99e648cc-a136-471c-8424-19071c0fd9e7</subsheetid><display x="-255" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="a13edde2-3883-4007-9719-92f0e1009ddd" name="Set Events Enabled" type="SubSheet"><subsheetid>99e648cc-a136-471c-8424-19071c0fd9e7</subsheetid><loginhibit /><display x="-15" y="-60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer identifier for the instance on which the events should be enabled / disabled. Zero indicates the 'current active' instance." expr="[handle]" /><input type="flag" name="Enable Events" narrative="True to enable events on the specified instance, False to disable events" expr="[Enable Events]" /></inputs><onsuccess>d337a2cf-1121-4619-a1b1-f7f19bea974e</onsuccess><processid>69db5cf5-4908-49c7-9027-8f48e26e5b27</processid></stage><stage stageid="7c3abf99-a3ae-44c2-b834-ad050b20a0eb" name="Enable Events" type="Data"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><display x="-210" y="105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="6c2fa22d-1876-46b7-92eb-cf8343d0911f" name="Set Events Enabled" type="SubSheet"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><loginhibit /><display x="15" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer identifier for the instance on which the events should be enabled / disabled. Zero indicates the 'current active' instance." expr="[handle]" /><input type="flag" name="Enable Events" narrative="True to enable events on the specified instance, False to disable events" expr="[Enable Events]" /></inputs><onsuccess>18a306bf-d323-4c4e-83b5-4b226773161c</onsuccess><processid>69db5cf5-4908-49c7-9027-8f48e26e5b27</processid></stage><stage stageid="e13408b2-c348-4d32-9ca3-e878db7cd165" name="Start Cell" type="Data"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><display x="-45" y="-705" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="614b5c49-3b88-427a-9513-c3048d8b716d" name="Get Worksheet Names" type="SubSheetInfo"><subsheetid>becd6faa-f5c0-4d3a-a48a-cb54d3aa8909</subsheetid><narrative>Gets the name of the worksheets.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ef85b34d-5145-4f90-96a4-0f1abc4c4889" name="End" type="End"><subsheetid>becd6faa-f5c0-4d3a-a48a-cb54d3aa8909</subsheetid><loginhibit /><display x="150" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Worksheet Names" narrative="A collection of worksheet names found in the specified workbook" stage="Worksheet Names" /></outputs></stage><stage stageid="7e4ae954-86d5-4183-88b2-d307fecfc6a9" name="Start" type="Start"><subsheetid>becd6faa-f5c0-4d3a-a48a-cb54d3aa8909</subsheetid><loginhibit /><display x="150" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the number of rows is required. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook." stage="workbookname" /></inputs><onsuccess>9bc4bc33-6a3a-43e0-86e0-7b209978508a</onsuccess></stage><stage stageid="9bc4bc33-6a3a-43e0-86e0-7b209978508a" name="CheckInstanceAndWorkbook" type="SubSheet"><subsheetid>becd6faa-f5c0-4d3a-a48a-cb54d3aa8909</subsheetid><loginhibit /><display x="150" y="-45" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><onsuccess>bbd37070-c589-4f9c-8d03-11f2982c59f4</onsuccess><processid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</processid></stage><stage stageid="bbd37070-c589-4f9c-8d03-11f2982c59f4" name="Get Worksheets" type="Code"><subsheetid>becd6faa-f5c0-4d3a-a48a-cb54d3aa8909</subsheetid><loginhibit /><display x="150" y="15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /></inputs><outputs><output type="collection" name="Worksheet Names" stage="Worksheet Names" /></outputs><onsuccess>ef85b34d-5145-4f90-96a4-0f1abc4c4889</onsuccess><code><![CDATA[Dim wb As Object = GetWorkbook(Handle, WorkbookName)
Dim sheets as Object = wb.Sheets

Worksheet_Names = New DataTable()
Worksheet_Names.Columns.Add("Name", GetType(String))

If sheets IsNot Nothing Then
	For Each sheet as Object in sheets
		Worksheet_Names.Rows.Add(New Object() {sheet.Name})
	Next
End If]]></code></stage><stage stageid="cff86abf-c0f2-493d-942f-759ce2830ff8" name="handle" type="Data"><subsheetid>becd6faa-f5c0-4d3a-a48a-cb54d3aa8909</subsheetid><display x="-135" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="e5d53720-b610-4e5c-bf49-94cbcaf29e20" name="workbookname" type="Data"><subsheetid>becd6faa-f5c0-4d3a-a48a-cb54d3aa8909</subsheetid><display x="-135" y="45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5bd45f86-2f78-4a96-8e74-62414e4094e7" name="Worksheet Names" type="Collection"><subsheetid>becd6faa-f5c0-4d3a-a48a-cb54d3aa8909</subsheetid><display x="255" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="9d637f02-8e13-4c65-a606-5756018a9e8c" name="Worksheet Exists" type="SubSheetInfo"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><narrative>Checks if a worksheet exists in a workbook.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="54725352-a686-4ebc-88d8-80fa81af39bc" name="End" type="End"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><loginhibit /><display x="15" y="225" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Worksheet Exists" narrative="Indicates whether or not the named worksheet exists" stage="Worksheet Exists" /></outputs></stage><stage stageid="4cd78f5f-29a7-4f71-ab51-5c93e2e50ba3" name="Start" type="Start"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><loginhibit /><display x="105" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the number of rows is required. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook on which the number of rows is required. The default empty text value indicates the currently active workbook on the specified instance." stage="workbookname" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet of interest; it will be checked for existence" stage="Worksheet Name" /></inputs><onsuccess>b4bad8df-ac04-4c0f-88cf-21bd3dc6707a</onsuccess></stage><stage stageid="4126c650-c062-413d-b6b3-501c8743b400" name="handle" type="Data"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><display x="-180" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="a19213a7-dbb4-4a78-b929-7c0ec2f48fa7" name="workbookname" type="Data"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><display x="-180" y="45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b4bad8df-ac04-4c0f-88cf-21bd3dc6707a" name="Get Worksheet Names" type="SubSheet"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><loginhibit /><display x="105" y="-45" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the number of rows is required. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The name of the workbook on which the number of rows is required. The default empty text value indicates the currently active workbook on the specified instance." expr="[workbookname]" /></inputs><outputs><output type="collection" name="Worksheet Names" narrative="A collection of worksheet names found in the specified workbook" stage="Worksheet Names" /></outputs><onsuccess>3124d4f1-6d19-450e-8d71-01e6c2cac8d9</onsuccess><processid>becd6faa-f5c0-4d3a-a48a-cb54d3aa8909</processid></stage><stage stageid="920cf97d-74a9-441c-9e2b-2c47c023ac33" name="Worksheet Names" type="Collection"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><display x="255" y="-45" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="3124d4f1-6d19-450e-8d71-01e6c2cac8d9" name="For Each Name" type="LoopStart"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><loginhibit /><display x="105" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>0e40b339-b952-445b-a957-6d2d0a1bdbac</onsuccess><groupid>7adde929-95a8-4bdb-8362-2dcf58807cb2</groupid><looptype>ForEach</looptype><loopdata>Worksheet Names</loopdata></stage><stage stageid="27d57e09-d2fa-496d-a5c6-d382be881ad1" name="Next" type="LoopEnd"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><loginhibit /><display x="105" y="135" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>aea2b1ba-e24b-4929-a0be-bc2ad811f277</onsuccess><groupid>7adde929-95a8-4bdb-8362-2dcf58807cb2</groupid></stage><stage stageid="4198f8b9-1418-4bbc-a984-4049f1b78df6" name="Worksheet Name" type="Data"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><display x="180" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0e40b339-b952-445b-a957-6d2d0a1bdbac" name="Matches?" type="Decision"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><loginhibit /><display x="105" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Worksheet Name] = [Worksheet Names.Name]" /><ontrue>f284f63f-fccf-4df8-ab7d-d7ef8aca1fb1</ontrue><onfalse>27d57e09-d2fa-496d-a5c6-d382be881ad1</onfalse></stage><stage stageid="f284f63f-fccf-4df8-ab7d-d7ef8aca1fb1" name="Found" type="Calculation"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>54725352-a686-4ebc-88d8-80fa81af39bc</onsuccess><calculation expression="True" stage="Worksheet Exists" /></stage><stage stageid="f5a7d39b-3edc-4984-89dc-f88f02b5f747" name="Worksheet Exists" type="Data"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><display x="-60" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="aea2b1ba-e24b-4929-a0be-bc2ad811f277" name="Not Found" type="Calculation"><subsheetid>eacc4634-9985-4a1d-9773-8f79928708ee</subsheetid><loginhibit /><display x="105" y="225" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>54725352-a686-4ebc-88d8-80fa81af39bc</onsuccess><calculation expression="False" stage="Worksheet Exists" /></stage><stage stageid="a1d81278-4fd7-4ee6-a878-8ec4dcde4793" name="Get Worksheet Range As Collection" type="SubSheetInfo"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><narrative>Exceptions
Office 2013 onwards
There are known issues when attempting to read and write data using the Excel VBO with the application set to run in background mode. These issues can be overcome by using the Show action</narrative><display x="-135" y="-105" w="360" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="6f2ee451-c914-4c38-8e19-4d3e3a519dfd" name="End" type="End"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><loginhibit /><display x="135" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Data" narrative="The spreadsheet data from the specified range, as a collection" stage="worksheetcollection" /></outputs></stage><stage stageid="fa5759e6-b7e3-42d1-8297-90953ec4a343" name="handle" type="Data"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><display x="-75" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="832f8dbf-c88e-4488-89ec-d0782439fc34" name="workbookname" type="Data"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><display x="-75" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b7a36655-443b-482f-809b-eb738682ee98" name="Start" type="Start"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><loginhibit /><display x="135" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the number of rows is required. The default of zero indicates the currently active instance." stage="handle" /><input type="text" name="Workbook Name" narrative="The name of the workbook on which the number of rows is required. The default empty text value indicates the currently active workbook on the specified instance." stage="workbookname" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet within the specified workbook which should be written to a collection. The default empty text indicates the currently active worksheet within the specified workbook." stage="worksheetname" /><input type="text" name="StartCell" narrative="The starting cell of the range of interest" stage="Start Cell" /><input type="text" name="EndCell" narrative="The end cell of the range of interest" stage="End Cell" /><input type="flag" name="Use Header" narrative="This flag states if the excel collection uses a header, or not." stage="Use Header" /></inputs><onsuccess>58d3ca4f-4467-492d-b85a-fd7ab4271110</onsuccess></stage><stage stageid="680eac96-2bd0-4d02-a62b-ac7bf684dae9" name="GetWorksheetRangeAsCollection" type="Code"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><loginhibit /><display x="135" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /><input type="text" name="workbookname" expr="[workbookname]" /><input type="text" name="worksheetname" expr="[worksheetname]" /><input type="text" name="Start Cell" expr="[Start Cell]" /><input type="text" name="End Cell" expr="[End Cell]" /><input type="flag" name="Use Header" expr="[Use Header]" /></inputs><outputs><output type="collection" name="worksheetcollection" stage="worksheetcollection" /></outputs><onsuccess>6f2ee451-c914-4c38-8e19-4d3e3a519dfd</onsuccess><code><![CDATA[
	Dim ws as Object = GetWorksheet( _
	 handle, workbookname, worksheetname)
	Dim r as Object
	r = ws.Range(Start_Cell & ":" & End_Cell)
	r.Select()
	r.Copy()

	Dim data As String = GetClipboardText()

	worksheetCollection = ParseDelimSeparatedVariables( _
	 data, vbTab, Nothing, Use_Header)
]]></code></stage><stage stageid="706da482-84a4-4e78-a1ba-002f80123e3f" name="worksheetname" type="Data"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><display x="-75" y="75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b1ec36df-f335-48a9-a0f4-e3f39d6c987d" name="worksheetcollection" type="Collection"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><display x="345" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="8054b9c8-5245-4a77-a058-949faeec00a7" name="Start Cell" type="Data"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><display x="210" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d9f43b65-bd92-44fa-b0fe-cf798aaf49be" name="End Cell" type="Data"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><display x="270" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="40717bdb-980d-46a2-8ed8-4c3c283a98ff" name="Use Header" type="Data"><subsheetid>92799072-140a-4621-89cd-2da12475dcda</subsheetid><display x="30" y="-705" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="1a437a6b-8cfe-4bc1-a7d3-ca5a2e026477" name="Remove Blank Rows" type="SubSheetInfo"><subsheetid>67651307-0389-47bf-ae8d-fd94364e808f</subsheetid><narrative>Removes blank rows in the active excel workbook. The entire row must consist of blank cells.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c883a67c-5093-45d2-82c8-680cf35c2c0e" name="Start" type="Start"><subsheetid>67651307-0389-47bf-ae8d-fd94364e808f</subsheetid><loginhibit /><display x="75" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the required workbook should be opened. The default of zero indicates the currently active instance." stage="handle" /></inputs><onsuccess>1e0e5735-5bc9-43dc-85c9-4e8735def67f</onsuccess></stage><stage stageid="7023c112-819d-4c9c-82f3-84ab84c9f560" name="End" type="End"><subsheetid>67651307-0389-47bf-ae8d-fd94364e808f</subsheetid><loginhibit /><display x="75" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1e0e5735-5bc9-43dc-85c9-4e8735def67f" name="Activate Workbook" type="SubSheet"><subsheetid>67651307-0389-47bf-ae8d-fd94364e808f</subsheetid><loginhibit /><display x="75" y="-45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the workbook should be activated. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The workbook name identifying the workbook which should be activated - empty text indicates the currently active workbook, making this a no-op." expr="" /></inputs><onsuccess>4fa6c603-9d6a-4077-ba95-9d213394ee06</onsuccess><processid>6632ed99-8751-4c2a-ad00-3cc016300e08</processid></stage><stage stageid="890b79a0-986e-4982-a010-99e17a8f7173" name="handle" type="Data"><subsheetid>67651307-0389-47bf-ae8d-fd94364e808f</subsheetid><display x="225" y="-105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="4fa6c603-9d6a-4077-ba95-9d213394ee06" name="Delete blank rows" type="Code"><subsheetid>67651307-0389-47bf-ae8d-fd94364e808f</subsheetid><loginhibit /><display x="75" y="15" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" expr="[handle]" /></inputs><onsuccess>7023c112-819d-4c9c-82f3-84ab84c9f560</onsuccess><code><![CDATA[Dim worksheet As Object
worksheet = GetWorkbook(handle,Nothing).ActiveSheet

Const xlCellTypeLastCell As Integer = 11 
Dim FirstRow As Integer = 1
Dim LastRow As Integer = worksheet.Cells.SpecialCells(xlCellTypeLastCell).Row

For i As Integer = LastRow To FirstRow Step -1
	If worksheet.Application.CountA(worksheet.Rows(i)) = 0 Then
		worksheet.Rows(i).Delete
	End If
Next]]></code></stage><stage stageid="7ea085b3-60ed-4690-9b58-044e3adac69b" name="Move Worksheet" type="SubSheetInfo"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><narrative>Moves the specified worksheet to another workbook.
</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="48fad533-06e9-41b7-b213-bfea2423c61c" name="Start" type="Start"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance on which the workbook which should be closed resides. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Source Workbook" narrative="The name of the source workbook which contains the sheet required." stage="Source Workbook" /><input type="text" name="Source Worksheet" narrative="The name of the source worksheet which is to be moved." stage="Source Worksheet" /><input type="text" name="Destination Workbook" narrative="The name of the destination workbook which the worksheet will be moved to." stage="Destination Workbook" /><input type="number" name="Destination Position" narrative="The destination position to move the worksheet to." stage="Destination Position" /><input type="flag" name="Copy" narrative="The true or false flag to decide if the moved worksheet will be copied." stage="Copy" /></inputs><onsuccess>b950e637-fb25-4932-b970-65e4ee21dd1d</onsuccess></stage><stage stageid="51274535-b09a-4b0b-a9bc-fff82557aa0a" name="Handle" type="Data"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6336e057-ac6a-4b57-b789-906100be58cc" name="Source Workbook" type="Data"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="51bf5410-80ae-4517-8ee8-1ccf54a61e2f" name="Source Worksheet" type="Data"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="467b75ec-f03c-460e-a57d-d6852ab35293" name="Destination Workbook" type="Data"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9ad740a0-b0e5-483c-9247-2b766533c852" name="Source Worksheet Exists" type="SubSheet"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="135" y="-30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the number of rows is required. The default of zero indicates the currently active instance." expr="[Handle]" /><input type="text" name="Workbook Name" narrative="The name of the workbook on which the number of rows is required. The default empty text value indicates the currently active workbook on the specified instance." expr="[Source Workbook]" /><input type="text" name="Worksheet Name" narrative="The name of the worksheet of interest; it will be checked for existence" expr="[Source Worksheet]" /></inputs><outputs><output type="flag" name="Worksheet Exists" narrative="Indicates whether or not the named worksheet exists" stage="Worksheet Exists" /></outputs><onsuccess>efca1a70-2f20-4dda-b071-825a986958a6</onsuccess><processid>eacc4634-9985-4a1d-9773-8f79928708ee</processid></stage><stage stageid="4702c382-1a44-441c-9cd1-83281efd10ff" name="Worksheet Exists" type="Data"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="-195" y="210" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="efca1a70-2f20-4dda-b071-825a986958a6" name="Worksheet Exists?" type="Decision"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="135" y="45" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Worksheet Exists]" /><ontrue>e804939a-8a40-4803-89cd-b10e57a97583</ontrue><onfalse>5d46a63f-e90b-4432-8c62-52d2e2380065</onfalse></stage><stage stageid="e804939a-8a40-4803-89cd-b10e57a97583" name="Move Named Worksheet" type="Code"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="135" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="SourceWorkbook" expr="[Source Workbook]" /><input type="text" name="SourceWorksheet" expr="[Source Worksheet]" /><input type="text" name="DestinationWorkbook" expr="[Destination Workbook]" /><input type="number" name="DestinationPosition" expr="[Destination Position]" /><input type="flag" name="Copy" expr="[Copy]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>764ea205-800b-4ab5-adc1-273a46ad93b6</onsuccess><code><![CDATA[Dim dBook, sSheet As Object
Dim p As Integer

Try

dBook = GetWorkbook(Handle, DestinationWorkbook)
sSheet = GetWorksheet(Handle, SourceWorkbook, SourceWorksheet)

p = Math.Max(1, DestinationPosition)
p = Math.Min(dBook.Worksheets.Count, p)

If DestinationPosition > p Then
	If Copy Then
		sSheet.Copy(After:=dBook.Worksheets(p))
	Else
		sSheet.Move(After:=dBook.Worksheets(p))
	End If
Else
	If Copy Then
		sSheet.Copy(Before:=dBook.Worksheets(p))
	Else
		sSheet.Move(Before:=dBook.Worksheets(p))
	End If
End If

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	dBook = Nothing
	sSheet = Nothing
End Try]]></code></stage><stage stageid="38d819d9-2dec-4ae8-afe3-76da44096935" name="End2" type="End"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="135" y="270" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="cb823085-c462-43b7-81d0-3ad7f1e026dd" name="Success" type="Data"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="-195" y="240" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="81e05f5d-ac29-4885-b6cd-fd5a308fcc44" name="Message" type="Data"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="-195" y="270" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="764ea205-800b-4ab5-adc1-273a46ad93b6" name="Success?" type="Decision"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="135" y="195" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>38d819d9-2dec-4ae8-afe3-76da44096935</ontrue><onfalse>65eda7a6-ce00-4372-9fc9-26931328aba4</onfalse></stage><stage stageid="7b25db9b-d103-4ba0-a8a5-468a16e50dd7" name="Exception" type="Exception"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="345" y="195" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to copy worksheet: &quot; &amp; [Message]" /></stage><stage stageid="87c0d87a-ef13-4eb7-8e10-085ab67dc0a0" name="Destination Position" type="Data"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="3e46008f-172e-42b3-b4b3-e7221f0ef6d8" name="Copy and Paste Worksheet Range" type="SubSheetInfo"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><narrative>Office 2013 onwards
There are known issues when attempting to read and write data using the Excel VBO with the application set to run in background mode. These issues can be overcome by using the Show action</narrative><display x="-270" y="-120" w="300" h="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="979c420e-1748-448e-9334-e238c47503a1" name="Copy" type="Data"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="-195" y="120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="5d46a63f-e90b-4432-8c62-52d2e2380065" name="Exception" type="Exception"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="240" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Source worksheet not found&quot;" /></stage><stage stageid="b470a541-1a6d-4c08-936a-94d2c6c99aa8" name="Start" type="Start"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance on which the workbook which should be closed resides. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Source Workbook" narrative="The name of the source workbook which is be copied." stage="Source Workbook" /><input type="text" name="Source Worksheet" narrative="The name of the source worksheet which is to be copied." stage="Source Worksheet" /><input type="text" name="Source Range" narrative="The range of cells which will be copied." stage="Source Range" /><input type="text" name="Destination Workbook" narrative="The name of the destination workbook which the worksheet will be copied to." stage="Destination Workbook" /><input type="text" name="Destination Worksheet" narrative="The name of the destination worksheet which the range of cell will be copied to." stage="Destination Worksheet" /><input type="text" name="Destination Range" narrative="The destination range of cells." stage="Destination Range" /></inputs><onsuccess>11afaed8-560c-4915-b3eb-04f45158a941</onsuccess></stage><stage stageid="b4598457-7e50-432e-ae29-7d081367e298" name="Source Workbook" type="Data"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="dc6e0465-0f54-401c-964f-974f43802264" name="Source Worksheet" type="Data"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="18b0fe7d-0b86-4fd0-bcd9-6c80841ae464" name="Destination Workbook" type="Data"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="-195" y="105" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0366fbb1-1c68-4466-87cb-760d499b4cdd" name="Worksheet Exists" type="Data"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="-195" y="210" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="11afaed8-560c-4915-b3eb-04f45158a941" name="Paste Worksheet" type="Code"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Source Workbook" expr="[Source Workbook]" /><input type="text" name="Source Worksheet" expr="[Source Worksheet]" /><input type="text" name="Source Range" expr="[Source Range]" /><input type="text" name="Destination Workbook" expr="[Destination Workbook]" /><input type="text" name="Destination Worksheet" expr="[Destination Worksheet]" /><input type="text" name="Destination Range" expr="[Destination Range]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>8136ae2b-8fb0-4945-8016-b5b9eae4c2d2</onsuccess><code><![CDATA[Dim sw, dw As Object
Dim ss, ds As Object
Dim excel, sheet, source, destination, cells, cell As Object

Try

sw = GetWorkbook(Handle, Source_Workbook)
dw = GetWorkbook(Handle, Destination_Workbook)

ss = GetWorksheet(Handle, Source_Workbook, Source_Worksheet)
ds = GetWorksheet(Handle, Destination_Workbook, Destination_Worksheet)

sw.Activate()
ss.Activate()
excel = ss.Application
sheet = excel.ActiveSheet
cell = excel.ActiveCell

If Source_Range="" Then
	cells = sheet.Cells
	Destination_Range = "A1"
Else
	cells = sheet.Range(Source_Range)
End If

cells.Select()
source = excel.Selection
source.Copy()
cell.Select()

dw.Activate()
ds.Activate()
sheet = excel.ActiveSheet
cell = excel.ActiveCell
destination = sheet.Range(Destination_Range)
destination.Select()
sheet.Paste()
cell.Select()

My.Computer.Clipboard.Clear()

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	sw = Nothing
	ss = Nothing
	dw = Nothing
	ds = Nothing
	excel = Nothing
	sheet = Nothing
	source = Nothing
	destination = Nothing
	cells = Nothing
	cell = Nothing
End Try]]></code></stage><stage stageid="70304b7a-b551-4a52-b52d-924f11d328a7" name="End2" type="End"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="61bc4bd1-c8ab-4fe3-993e-a7e30fcaf9ef" name="Success" type="Data"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="-195" y="240" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2e558b45-ad3b-459a-978c-048e7f555c4a" name="Message" type="Data"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="-195" y="270" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8136ae2b-8fb0-4945-8016-b5b9eae4c2d2" name="Success?" type="Decision"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><loginhibit /><display x="15" y="30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>70304b7a-b551-4a52-b52d-924f11d328a7</ontrue><onfalse>470e1a49-496c-497e-b59a-537f730059cb</onfalse></stage><stage stageid="470e1a49-496c-497e-b59a-537f730059cb" name="Exception" type="Exception"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="120" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to copy worksheet: &quot; &amp; [Message]" /></stage><stage stageid="2a17d158-14b5-4cec-aa84-2b6789585973" name="Destination Worksheet" type="Data"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="124d4f6c-b7b5-4935-8d7a-71a253571261" name="Handle" type="Data"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b950e637-fb25-4932-b970-65e4ee21dd1d" name="Source Worksheet Number?" type="Decision"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="15" y="-30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="IsNumber([Source Worksheet])" /><ontrue>eba296d1-0f89-4c61-892c-b25b40f3f618</ontrue><onfalse>9ad740a0-b0e5-483c-9247-2b766533c852</onfalse></stage><stage stageid="8b56215b-b4e5-4a95-a49d-179871dd1d2b" name="Move Numbered Worksheet" type="Code"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="15" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="SourceWorkbook" expr="[Source Workbook]" /><input type="number" name="SourceWorksheet" expr="[Source Worksheet Number]" /><input type="text" name="DestinationWorkbook" expr="[Destination Workbook]" /><input type="number" name="DestinationPosition" expr="[Destination Position]" /><input type="flag" name="Copy" expr="[Copy]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>e9db38cf-4c64-49fa-a46b-f2dfa31dfe18</onsuccess><code><![CDATA[Dim sBook, dBook As Object
Dim sSheet As Object
Dim p As Integer

Try

sBook = GetWorkbook(Handle, SourceWorkbook)
dBook = GetWorkbook(Handle, DestinationWorkbook)

sSheet = sBook.Worksheets(SourceWorksheet)

p = Math.Max(1, DestinationPosition)
p = Math.Min(sBook.Worksheets.Count, p)

If DestinationPosition > p Then
	If Copy Then
		sSheet.Copy(After:=dBook.Worksheets(p))
	Else
		sSheet.Move(After:=dBook.Worksheets(p))
	End If
Else
	If Copy Then
		sSheet.Copy(Before:=dBook.Worksheets(p))
	Else
		sSheet.Move(Before:=dBook.Worksheets(p))
	End If
End If

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	sBook = Nothing
	dBook = Nothing
	sSheet = Nothing
End Try]]></code></stage><stage stageid="e9db38cf-4c64-49fa-a46b-f2dfa31dfe18" name="anchor7" type="Anchor"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="15" y="195" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>764ea205-800b-4ab5-adc1-273a46ad93b6</onsuccess></stage><stage stageid="65eda7a6-ce00-4372-9fc9-26931328aba4" name="Copy?" type="Decision"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="240" y="195" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Copy]" /><ontrue>7b25db9b-d103-4ba0-a8a5-468a16e50dd7</ontrue><onfalse>32d3772b-fe03-4a13-a415-62b4fdd5fa8f</onfalse></stage><stage stageid="32d3772b-fe03-4a13-a415-62b4fdd5fa8f" name="Exception" type="Exception"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="240" y="270" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to move worksheet: &quot; &amp; [Message]" /></stage><stage stageid="eba296d1-0f89-4c61-892c-b25b40f3f618" name="Source Workbook Number" type="Calculation"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><loginhibit /><display x="15" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>8b56215b-b4e5-4a95-a49d-179871dd1d2b</onsuccess><calculation expression="[Source Worksheet]" stage="Source Worksheet Number" /></stage><stage stageid="2cc989f3-1c41-4289-98fb-383b0c88ed74" name="Source Worksheet Number" type="Data"><subsheetid>79b9bf7c-222d-4cc3-adc8-5bb337fa6d72</subsheetid><display x="-195" y="180" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="09bbef8a-09b2-4a43-925d-b1a0b88e692b" name="Get Worksheet Position" type="SubSheetInfo"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="4235fac3-2295-4511-828e-090e9c888d38" name="End" type="End"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="Position" narrative="The output data - the position of the worksheet." stage="Position" /></outputs></stage><stage stageid="46d026ab-934f-4e60-8d1f-68344ac1b103" name="Handle" type="Data"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d3d97151-6742-41e9-9b9a-08ce6b9700d1" name="Workbook" type="Data"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7ec78a25-f322-4161-8872-54815ffbc0f0" name="Worksheet" type="Data"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9ccd25c1-379e-41cf-92fd-2d02ac1fc7ac" name="Start" type="Start"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance on which the number of rows is required. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook on which the number of rows is required. The default empty text value indicates the currently active workbook on the specified instance." stage="Workbook" /><input type="text" name="Worksheet" narrative="The name of the worksheet of interest; it will be checked for existence" stage="Worksheet" /></inputs><onsuccess>244c946c-e677-4da7-8d5a-de244ec07eea</onsuccess></stage><stage stageid="244c946c-e677-4da7-8d5a-de244ec07eea" name="Get Worksheet Position" type="Code"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /><input type="text" name="Worksheet" expr="[Worksheet]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /><output type="number" name="Position" stage="Position" /></outputs><onsuccess>27d60ef1-833c-44f5-b5ab-0aefb2c0581c</onsuccess><code><![CDATA[Dim wb, ws As Object

Try

wb = GetWorkbook(Handle, Workbook)
ws = wb.Worksheets
Position = ws(Worksheet).Index

Success = True

Catch e As Exception
   position = -1
	Success = False
	Message = e.Message
Finally
	wb = Nothing
	ws = Nothing
End Try]]></code></stage><stage stageid="f13a2dde-4da4-4811-a0dd-f3f0bb009354" name="Position" type="Data"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="32b13d14-acc8-406c-8d15-9ffdc7355c5d" name="Source Range" type="Data"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5fa73a8e-f525-4d57-a0ff-9df54a1d2d63" name="Destination Range" type="Data"><subsheetid>da83b3dd-0312-4b53-9732-e3f8e29c561f</subsheetid><display x="-195" y="165" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0f1da6ce-caa1-4a5c-b622-70602b8ad49e" name="Select" type="SubSheetInfo"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><narrative>Selects cells of a worksheet.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="30e9f460-bd3e-4273-bb7c-77fedbfe445f" name="End" type="End"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a24031db-2c21-4624-9a0b-6643f3e75247" name="Handle" type="Data"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="aa9504d1-c2d1-49a6-a6f2-cf95da7eeb12" name="Workbook" type="Data"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bcba2fd7-c2e3-4661-a6c4-be512624d70c" name="Worksheet" type="Data"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f78616ed-e974-46dd-ace5-c44a1b800c11" name="Start" type="Start"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance on which the cell to be formatted is contained. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook." stage="Workbook" /><input type="text" name="Worksheet" narrative="The name of the worksheet." stage="Worksheet" /><input type="text" name="Cell Reference" narrative="The reference of cells that is selected." stage="Cell Reference" /></inputs><onsuccess>34677bae-38d3-4518-917f-c883f9c1677d</onsuccess></stage><stage stageid="92300230-c4b8-4530-9378-f98dfd556895" name="Cell Reference" type="Data"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="34677bae-38d3-4518-917f-c883f9c1677d" name="Select Cells" type="Code"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /><input type="text" name="Worksheet" expr="[Worksheet]" /><input type="text" name="Reference" expr="[Cell Reference]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>2cb73eba-be13-4568-a11a-02f3a20b9dfe</onsuccess><code><![CDATA[Dim wb, ws As Object
Dim excel, sheet, range As Object

Try

wb = GetWorkbook(Handle, Workbook)
ws = GetWorksheet(Handle, Workbook, Worksheet)

wb.Activate()
ws.Activate()
excel = ws.Application
sheet = excel.ActiveSheet
range = sheet.Range(Reference)
range.Select()

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	wb = Nothing
	ws = Nothing
	excel = Nothing
	sheet = Nothing
	range = Nothing
End Try]]></code></stage><stage stageid="2cb73eba-be13-4568-a11a-02f3a20b9dfe" name="Success?" type="Decision"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><loginhibit /><display x="15" y="30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>30e9f460-bd3e-4273-bb7c-77fedbfe445f</ontrue><onfalse>7cb606b3-cd0e-46f3-bd05-fd635aa9d2d4</onfalse></stage><stage stageid="7cb606b3-cd0e-46f3-bd05-fd635aa9d2d4" name="Exception" type="Exception"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><display x="120" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to select row: &quot; &amp; [Message]" /></stage><stage stageid="3e5f45b4-d1b1-4dc1-8be0-29a9b4a55c53" name="Success" type="Data"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><display x="-195" y="105" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="34efe5b1-fcdd-4221-a651-006b1110ebbd" name="Message" type="Data"><subsheetid>9147cb85-5c6f-4a47-adcf-ab472d5a0b5a</subsheetid><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8189dfa8-421a-45da-9d7c-26ac377bc514" name="Delete" type="SubSheetInfo"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><narrative>Delete cells from the workbook.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a3f17004-6131-48f2-b0a8-e602f24b599e" name="End" type="End"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><loginhibit /><display x="120" y="195" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="6d0b1914-39fd-4e17-b7b4-55faafd45af7" name="Handle" type="Data"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="75588f1d-b4d2-4c8c-a51f-61c822a68abb" name="Workbook" type="Data"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ad8ce293-a3a3-43ca-9b8f-1d680fbdc03e" name="Start" type="Start"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance that contains the macro. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook." stage="Workbook" /><input type="text" name="Shift (Left or Up)" narrative="The shift type for cells to be deleted." stage="Shift" /></inputs><onsuccess>97daebd3-2794-4944-af67-9698bbaa77b3</onsuccess></stage><stage stageid="57a5ebdd-ad03-4f7b-a358-8ef0172ed1fd" name="Delete Selection" type="Code"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><loginhibit /><display x="120" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /><input type="number" name="Shift Type" expr="[Shift Type]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>6f1da154-330d-490b-b615-df266c6767fa</onsuccess><code><![CDATA[Dim wb, excel, range As Object

Try

wb = GetWorkbook(Handle, Workbook)
excel = wb.Application

range = excel.Selection
range.Delete(Shift:=[Shift_Type])

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	wb = Nothing
	excel = Nothing
	range = Nothing
End Try]]></code></stage><stage stageid="6f1da154-330d-490b-b615-df266c6767fa" name="Success?" type="Decision"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><loginhibit /><display x="120" y="120" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>a3f17004-6131-48f2-b0a8-e602f24b599e</ontrue><onfalse>bb18bdc9-f544-4157-a6ba-e289c8f33c43</onfalse></stage><stage stageid="bb18bdc9-f544-4157-a6ba-e289c8f33c43" name="Exception" type="Exception"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><display x="225" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to delete selection: &quot; &amp; [Message]" /></stage><stage stageid="d0c4907b-2b85-424d-a6ef-8bcfb43d3f72" name="Success" type="Data"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><display x="-195" y="150" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9dbebe22-4f86-499f-8f29-155baf2cc42d" name="Message" type="Data"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><display x="-195" y="180" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2110b138-01f6-47af-befd-7a71637b5844" name="Shift" type="Data"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="97daebd3-2794-4944-af67-9698bbaa77b3" name="Shift Left?" type="Decision"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><loginhibit /><display x="15" y="-30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="Trim(Upper([Shift]))=&quot;LEFT&quot;" /><ontrue>6e608312-7a91-4039-8f0a-90ccaac7d3cc</ontrue><onfalse>8a8e9a33-5eca-485a-adeb-e5a43592d6d4</onfalse></stage><stage stageid="6e608312-7a91-4039-8f0a-90ccaac7d3cc" name="Shift Type" type="Calculation"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><loginhibit /><display x="120" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>57a5ebdd-ad03-4f7b-a358-8ef0172ed1fd</onsuccess><calculation expression="-4159" stage="Shift Type" /></stage><stage stageid="4095b231-4d4f-4c98-b74d-6134fb63b9af" name="Shift Type" type="Data"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><display x="-195" y="120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8a8e9a33-5eca-485a-adeb-e5a43592d6d4" name="Shift Type" type="Calculation"><subsheetid>3d161cf5-0e7a-4ac7-aa8c-f37a1b380e1a</subsheetid><loginhibit /><display x="15" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>57a5ebdd-ad03-4f7b-a358-8ef0172ed1fd</onsuccess><calculation expression="-4162" stage="Shift Type" /></stage><stage stageid="27122991-d4c6-4811-a366-7fd47a11da5c" name="Copy" type="SubSheetInfo"><subsheetid>71ebd060-a411-45fc-8f39-132eb3e5ff79</subsheetid><narrative>Copy cells from the workbook.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="bba0e0d4-6894-469c-a9b8-1f07855dadc9" name="End" type="End"><subsheetid>71ebd060-a411-45fc-8f39-132eb3e5ff79</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="364a6306-d747-4c70-84ae-4128d8938fbc" name="Handle" type="Data"><subsheetid>71ebd060-a411-45fc-8f39-132eb3e5ff79</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f0139001-74d1-4ab8-a517-4329434df1e5" name="Workbook" type="Data"><subsheetid>71ebd060-a411-45fc-8f39-132eb3e5ff79</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="58d750a5-2e0e-4aaa-951a-76aaf6b973da" name="Start" type="Start"><subsheetid>71ebd060-a411-45fc-8f39-132eb3e5ff79</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance that contains the macro. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook." stage="Workbook" /></inputs><onsuccess>d8005fde-9fe5-47f9-a980-e4beae15815a</onsuccess></stage><stage stageid="a8acd5cc-0955-4896-b87a-80091b060926" name="Success?" type="Decision"><subsheetid>71ebd060-a411-45fc-8f39-132eb3e5ff79</subsheetid><loginhibit /><display x="15" y="30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>bba0e0d4-6894-469c-a9b8-1f07855dadc9</ontrue><onfalse>6ceb186e-fea0-48a8-a72d-f104f83699c6</onfalse></stage><stage stageid="6ceb186e-fea0-48a8-a72d-f104f83699c6" name="Exception" type="Exception"><subsheetid>71ebd060-a411-45fc-8f39-132eb3e5ff79</subsheetid><display x="120" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to copy selection: &quot; &amp; [Message]" /></stage><stage stageid="4f25dc7f-bd6f-495d-90e7-0d561dba2662" name="Success" type="Data"><subsheetid>71ebd060-a411-45fc-8f39-132eb3e5ff79</subsheetid><display x="-195" y="105" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8a8da6c3-ceed-4a32-8e4d-473b53a57602" name="Message" type="Data"><subsheetid>71ebd060-a411-45fc-8f39-132eb3e5ff79</subsheetid><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d8005fde-9fe5-47f9-a980-e4beae15815a" name="Copy Selection" type="Code"><subsheetid>71ebd060-a411-45fc-8f39-132eb3e5ff79</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>a8acd5cc-0955-4896-b87a-80091b060926</onsuccess><code><![CDATA[Dim wb, excel, range As Object

Try

wb = GetWorkbook(Handle, Workbook)
excel = wb.Application
range = excel.Selection
range.Copy

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	wb = Nothing
	excel = Nothing
	range = Nothing
End Try]]></code></stage><stage stageid="044c591e-e63e-4f13-80b8-de4217a78b3b" name="Paste" type="SubSheetInfo"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><narrative>Paste text into cells of a workbook.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1ebf6405-9e3a-45f8-be9c-fdd70f254b34" name="End" type="End"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><loginhibit /><display x="120" y="195" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="3f23548e-a9f9-48c6-93c3-fbd8fa4f8d8d" name="Handle" type="Data"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0acf7ad6-162d-4e2d-9a03-a6ebc54eb526" name="Workbook" type="Data"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7d4b5681-cffa-432d-be94-08d4ddf16986" name="Start" type="Start"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance that contains the macro. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook." stage="Workbook" /><input type="flag" name="Values Only" narrative="True or false flag to decide whether to paste the values only." stage="Values Only" /></inputs><onsuccess>0d27a545-71b3-4a27-843b-8ed69b1648ce</onsuccess></stage><stage stageid="360c1bdb-1960-4486-ad05-8ec4485ef0ec" name="Success?" type="Decision"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><loginhibit /><display x="120" y="120" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>1ebf6405-9e3a-45f8-be9c-fdd70f254b34</ontrue><onfalse>4830e942-edaf-4bd2-8922-9cffafc084ad</onfalse></stage><stage stageid="4830e942-edaf-4bd2-8922-9cffafc084ad" name="Exception" type="Exception"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><display x="225" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to paste from clipboard: &quot; &amp; [Message]" /></stage><stage stageid="77b051c2-e570-49a3-8708-b42785a2517f" name="Success" type="Data"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><display x="-195" y="165" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="da93fc46-495b-4511-a724-a1cc7d70cffa" name="Message" type="Data"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><display x="-195" y="195" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="24bf06a1-fd8f-4cd3-bab6-e05552f8bdba" name="Paste Values" type="Code"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><loginhibit /><display x="120" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /><input type="number" name="Paste Option" expr="[Paste Option]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>360c1bdb-1960-4486-ad05-8ec4485ef0ec</onsuccess><code><![CDATA[Dim wb, excel, range As Object

Try

wb = GetWorkbook(Handle, Workbook)
excel = wb.Application

range = excel.Selection
range.PasteSpecial(Paste:=Paste_Option, Operation:=-4142, SkipBlanks:=False, Transpose:=False)

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	wb = Nothing
   range = Nothing
End Try]]></code></stage><stage stageid="ba04d5a5-b0f7-4979-af44-2f0fee5237f9" name="Write To Clipboard" type="SubSheetInfo"><subsheetid>2c59601b-2b70-4c97-a218-0abf1bf7463a</subsheetid><narrative>Writes text to clipboard so that it can be copied.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1587c068-8225-4476-b636-9403f8acd84a" name="Start" type="Start"><subsheetid>2c59601b-2b70-4c97-a218-0abf1bf7463a</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Value" narrative="The text that is to be copied to clipboard." stage="Value" /></inputs><onsuccess>2279ba0c-3963-48f8-b813-4b0f53f47471</onsuccess></stage><stage stageid="a82e0657-86e9-4273-bd0f-2065d5f70254" name="End" type="End"><subsheetid>2c59601b-2b70-4c97-a218-0abf1bf7463a</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="eda7181f-a720-4b63-9d69-86221881d965" name="Value" type="Data"><subsheetid>2c59601b-2b70-4c97-a218-0abf1bf7463a</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2279ba0c-3963-48f8-b813-4b0f53f47471" name="Write To Clipboard" type="Code"><subsheetid>2c59601b-2b70-4c97-a218-0abf1bf7463a</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Value" expr="[Value]" /></inputs><onsuccess>a82e0657-86e9-4273-bd0f-2065d5f70254</onsuccess><code><![CDATA[
SetClipboardText(Value)
]]></code></stage><stage stageid="79b62074-ec0d-49c6-a258-61823cc8a849" name="Values Only" type="Data"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="0d27a545-71b3-4a27-843b-8ed69b1648ce" name="Values Only?" type="Decision"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><loginhibit /><display x="15" y="-30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Values Only]" /><ontrue>5bd5a242-a414-4d49-b093-0eb8d3978f8a</ontrue><onfalse>f98e8dcf-bff1-418a-9963-4878022c7391</onfalse></stage><stage stageid="f98e8dcf-bff1-418a-9963-4878022c7391" name="Paste Option" type="Calculation"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><loginhibit /><display x="120" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>24bf06a1-fd8f-4cd3-bab6-e05552f8bdba</onsuccess><calculation expression="-4104" stage="Paste Option" /></stage><stage stageid="8e80a8c9-867f-46fa-ace9-d251af38eeed" name="Paste Option" type="Data"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5bd5a242-a414-4d49-b093-0eb8d3978f8a" name="Paste Option" type="Calculation"><subsheetid>035d5ed0-2f39-46ca-80c1-b0127418dc9e</subsheetid><loginhibit /><display x="15" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>24bf06a1-fd8f-4cd3-bab6-e05552f8bdba</onsuccess><calculation expression="-4163" stage="Paste Option" /></stage><stage stageid="7f2dfa02-938c-4179-9e22-216057d33f43" name="Cut" type="SubSheetInfo"><subsheetid>5eee765d-c84b-493f-9132-f6a27f296d0e</subsheetid><narrative>Cut cells from the workbook.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f2f20301-ebd9-4fbd-9b94-ca2074e69294" name="End" type="End"><subsheetid>5eee765d-c84b-493f-9132-f6a27f296d0e</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d29233ea-0e94-44a4-864c-f32568e42c4b" name="Handle" type="Data"><subsheetid>5eee765d-c84b-493f-9132-f6a27f296d0e</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="59232dab-20a4-4e84-8a43-e2016ef6a74c" name="Workbook" type="Data"><subsheetid>5eee765d-c84b-493f-9132-f6a27f296d0e</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6d6c212b-fd48-44cf-a931-8c99060d29cc" name="Start" type="Start"><subsheetid>5eee765d-c84b-493f-9132-f6a27f296d0e</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance that contains the macro. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook." stage="Workbook" /></inputs><onsuccess>3dcf0167-85d1-4170-b214-86784cbcab65</onsuccess></stage><stage stageid="581ece97-ebdc-4855-8fdf-45290b4e587d" name="Success?" type="Decision"><subsheetid>5eee765d-c84b-493f-9132-f6a27f296d0e</subsheetid><loginhibit /><display x="15" y="30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>f2f20301-ebd9-4fbd-9b94-ca2074e69294</ontrue><onfalse>797b7b44-cd61-4d3c-8874-82e44868ea1b</onfalse></stage><stage stageid="797b7b44-cd61-4d3c-8874-82e44868ea1b" name="Exception" type="Exception"><subsheetid>5eee765d-c84b-493f-9132-f6a27f296d0e</subsheetid><display x="120" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to cut selection: &quot; &amp; [Message]" /></stage><stage stageid="3556655c-d270-4054-a989-b2f44854a7ba" name="Success" type="Data"><subsheetid>5eee765d-c84b-493f-9132-f6a27f296d0e</subsheetid><display x="-195" y="105" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9e9b9ba3-e800-4df7-bc87-db6b36f846c9" name="Message" type="Data"><subsheetid>5eee765d-c84b-493f-9132-f6a27f296d0e</subsheetid><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3dcf0167-85d1-4170-b214-86784cbcab65" name="Cut Selection" type="Code"><subsheetid>5eee765d-c84b-493f-9132-f6a27f296d0e</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>581ece97-ebdc-4855-8fdf-45290b4e587d</onsuccess><code><![CDATA[Dim wb, excel, range As Object

Try

wb = GetWorkbook(Handle, Workbook)
excel = wb.Application
range = excel.Selection
range.Cut

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	wb = Nothing
	excel = Nothing
	range = Nothing
End Try]]></code></stage><stage stageid="fc13a15a-74aa-47dc-af68-38bea19af981" name="Protect Workbook" type="SubSheetInfo"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><narrative>Protects the workbook so that it is encrypted with a password.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0e32102b-7c0a-4f3e-9fe7-cc267fede407" name="Handle" type="Data"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="03b0377d-35e5-4a7d-b16c-756d690843ee" name="Workbook" type="Data"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b1610a1c-3532-4a88-8732-39cbfb4495f4" name="Start" type="Start"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance that contains the macro. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook." stage="Workbook" /><input type="password" name="Password" narrative="The password of the workbook." stage="Password" /></inputs><onsuccess>e47e5f86-b7d0-409e-bf2a-6673cf28bac7</onsuccess></stage><stage stageid="de93c65e-11ae-4507-b8bf-da3f09910f82" name="Password" type="Data"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>password</datatype><initialvalueenc></initialvalueenc><private /><alwaysinit /></stage><stage stageid="e47e5f86-b7d0-409e-bf2a-6673cf28bac7" name="Protect Workbook" type="Code"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /><input type="password" name="Password" expr="[Password]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>09dd5e11-1dd3-4f18-bbe0-ed52d1f79fb0</onsuccess><code><![CDATA[Dim wb As Object

Try

wb = GetWorkbook(Handle, Workbook)
wb.Protect(Password, True, True)

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	wb = Nothing
End Try]]></code></stage><stage stageid="6a177cf9-5ec0-481d-84e9-c5d72177038d" name="Hide Worksheet" type="SubSheetInfo"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><narrative>Hides worksheet so that is not visible.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0cc70266-582a-410c-9c3a-29ff9dfb795e" name="Handle" type="Data"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4cf25a3a-b4dd-4b80-8339-06b9d63e56e6" name="Workbook" type="Data"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e8889824-2e30-472c-bb9a-4daad82560f3" name="Worksheet" type="Data"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2d9d6921-9f68-4152-be57-8b0df6472eda" name="Start" type="Start"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance that contains the macro. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook." stage="Workbook" /><input type="text" name="Worksheet" narrative="The name of the worksheet." stage="Worksheet" /></inputs><onsuccess>298fe33e-bd86-4109-8540-f1abe8d02eb8</onsuccess></stage><stage stageid="4a51d886-d307-4904-8ce4-98191c734a17" name="End" type="End"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="09dd5e11-1dd3-4f18-bbe0-ed52d1f79fb0" name="Success?" type="Decision"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><loginhibit /><display x="15" y="30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>4a51d886-d307-4904-8ce4-98191c734a17</ontrue><onfalse>fbeb4a74-fc5f-431f-b150-15549afc2a22</onfalse></stage><stage stageid="fbeb4a74-fc5f-431f-b150-15549afc2a22" name="Exception" type="Exception"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><display x="120" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to protect workbook: &quot; &amp; [Message]" /></stage><stage stageid="298fe33e-bd86-4109-8540-f1abe8d02eb8" name="Hide Worksheet" type="Code"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /><input type="text" name="Worksheet" expr="[Worksheet]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>66ad2075-9b87-44be-9c6d-0a702d752f57</onsuccess><code><![CDATA[Dim ws As Object

Try

ws = GetWorkSheet(Handle, Workbook, Worksheet)
ws.Visible = False

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	ws = Nothing
End Try]]></code></stage><stage stageid="c2e5c7e9-93a1-489e-a870-523042f050f1" name="End" type="End"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="66ad2075-9b87-44be-9c6d-0a702d752f57" name="Success?" type="Decision"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><loginhibit /><display x="15" y="30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>c2e5c7e9-93a1-489e-a870-523042f050f1</ontrue><onfalse>7dca362f-2e45-443b-adc7-9075f02fc717</onfalse></stage><stage stageid="7dca362f-2e45-443b-adc7-9075f02fc717" name="Exception" type="Exception"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><display x="120" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to protehide worksheet: &quot; &amp; [Message]" /></stage><stage stageid="c3b30035-3883-4740-9cf0-49e967ad6306" name="Success" type="Data"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><display x="-195" y="75" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ff6900f6-3524-4b24-be71-4d12c2d4c77e" name="Message" type="Data"><subsheetid>c37e9923-b729-471b-80b1-7d44113ca618</subsheetid><display x="-195" y="105" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="cea8af9d-95ea-4c09-9932-adc8cc633db6" name="Success" type="Data"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><display x="-195" y="75" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b7888130-7082-4f05-8864-3f0709675831" name="Message" type="Data"><subsheetid>7316eded-6aed-4d1d-9eeb-64fbbb8e53a0</subsheetid><display x="-195" y="105" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9b9509a6-dfc6-4f25-9474-dba6e8b7ed20" name="Hide Other Worksheets" type="SubSheetInfo"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><narrative>Hide all other worksheets so that they are not visible.</narrative><display x="-480" y="-1020" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a81bb6df-46b8-4641-8531-802be8934741" name="Handle" type="Data"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><display x="-480" y="-945" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f349c5cb-454b-448c-b225-5c474ae4e52d" name="Workbook" type="Data"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><display x="-480" y="-915" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="999117c1-6fa6-4172-9512-78106c277a38" name="Worksheet" type="Data"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><display x="-480" y="-885" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6444d8d9-7f26-4eb5-ab31-c98706e6209a" name="Start" type="Start"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><loginhibit /><display x="-270" y="-1020" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance that contains the macro. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook." stage="Workbook" /><input type="text" name="Worksheet" narrative="The name of the worksheet." stage="Worksheet" /></inputs><onsuccess>c5ca2626-02e2-4413-9476-9958c1b7b717</onsuccess></stage><stage stageid="c5ca2626-02e2-4413-9476-9958c1b7b717" name="Hide Other Worksheets" type="Code"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><loginhibit /><display x="-270" y="-960" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /><input type="text" name="Worksheet" expr="[Worksheet]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>36529e74-e353-4cbd-b6ff-3591c0390efd</onsuccess><code><![CDATA[Dim wb As Object

Try

wb = GetWorkbook(Handle, Workbook)

For Each ws As Object In wb.Worksheets
	ws.Visible = (ws.Name = Worksheet)
Next

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	wb = Nothing
End Try]]></code></stage><stage stageid="52e20387-128e-4f5c-b182-7d28a9005a71" name="End" type="End"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><loginhibit /><display x="-270" y="-810" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="36529e74-e353-4cbd-b6ff-3591c0390efd" name="Success?" type="Decision"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><loginhibit /><display x="-270" y="-885" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>52e20387-128e-4f5c-b182-7d28a9005a71</ontrue><onfalse>c5840684-3348-4ee6-a024-dda79500a851</onfalse></stage><stage stageid="c5840684-3348-4ee6-a024-dda79500a851" name="Exception" type="Exception"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><display x="-165" y="-885" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to hide worksheets: &quot; &amp; [Message]" /></stage><stage stageid="089eef49-c020-4aea-929e-4d1ae4282215" name="Success" type="Data"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><display x="-480" y="-840" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="370e2ccf-3010-44ea-9155-06babd5e856c" name="Message" type="Data"><subsheetid>e62b9c20-62f8-4d28-8f19-de7610e56e1e</subsheetid><display x="-480" y="-810" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4996af5e-0cc1-4e24-aedf-20320350469e" name="Import CSV" type="SubSheetInfo"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><narrative>Import CSV worksheets into a workbook using a path.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b4b14657-a0f4-4c85-9466-5146878dfbe7" name="Handle" type="Data"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bbfe7495-0fef-4c22-a251-88166b8485d4" name="Workbook" type="Data"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3c0e661b-9b74-4d25-9a8b-1da52f957ed2" name="Worksheet" type="Data"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8df3e95e-4a03-4e0a-a649-37fb1d17ff41" name="Start" type="Start"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Destination Handle" narrative="The integer handle identifying the instance that contains the macro. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Destination Workbook" narrative="The name of the workbook that the CSV is imported to." stage="Workbook" /><input type="text" name="Destination Worksheet" narrative="The name of the worksheet that the CSV is imported to." stage="Worksheet" /><input type="text" name="Destination Range" narrative="The destination range of where the CSV will be imported into the worksheet," stage="Range" /><input type="text" name="Source File Path" narrative="The file path of the CSV file to be imported." stage="Path" /><input type="text" name="Source Text Qualifier" narrative="The source text of the CSV to be imported." stage="Qualifier" /></inputs><onsuccess>a09cfa98-b04d-472f-ad84-87e6a0bdb011</onsuccess></stage><stage stageid="7803cce6-3095-4d46-9cd2-793181eb080d" name="Import CSV" type="Code"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><loginhibit /><display x="120" y="135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /><input type="text" name="Worksheet" expr="[Worksheet]" /><input type="text" name="Range" expr="[Range]" /><input type="text" name="Path" expr="[Path]" /><input type="number" name="Qualifier" expr="[Qualifier Code]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>91f84fae-ca36-4b8b-8221-bc3e95cd2ef3</onsuccess><code><![CDATA[Dim dw, ds, dr, qt As Object

Try

dw = GetWorkbook(Handle, Workbook)
ds = GetWorksheet(Handle, Workbook, Worksheet)
dr = ds.Range(Range)
qt = ds.QueryTables.Add(Connection:="TEXT;" & Path, Destination:=dr)

With qt
	.FieldNames = True
	.RowNumbers = False
	.FillAdjacentFormulas = False
	.PreserveFormatting = True
	.RefreshOnFileOpen = False
	.RefreshStyle = 1 'xlInsertDeleteCells
	.SavePassword = False
	.SaveData = True
	.AdjustColumnWidth = True
	.RefreshPeriod = 0
	.TextFilePromptOnRefresh = False
	.TextFilePlatform = 437
	.TextFileStartRow = 1
	.TextFileParseType = 1 'xlDelimited
	.TextFileTextQualifier = Qualifier
	.TextFileConsecutiveDelimiter = False
	.TextFileTabDelimiter = False
	.TextFileSemicolonDelimiter = False
	.TextFileCommaDelimiter = True
	.TextFileSpaceDelimiter = False
	.TextFileTrailingMinusNumbers = True
End With
qt.Refresh(False)

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	dw = Nothing
	ds = Nothing
	dr = Nothing
	qt = Nothing
End Try]]></code></stage><stage stageid="bfe990bf-be29-4c21-ac04-96a798ab1827" name="End" type="End"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><loginhibit /><display x="120" y="285" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="91f84fae-ca36-4b8b-8221-bc3e95cd2ef3" name="Success?" type="Decision"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><loginhibit /><display x="120" y="210" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>bfe990bf-be29-4c21-ac04-96a798ab1827</ontrue><onfalse>6aaf6a41-be76-442d-9c2b-06905c4e0355</onfalse></stage><stage stageid="6aaf6a41-be76-442d-9c2b-06905c4e0355" name="Exception" type="Exception"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><display x="225" y="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to import CSV: &quot; &amp; [Message]" /></stage><stage stageid="af967b8b-4ec8-4202-ac07-6acbf9d12d46" name="Success" type="Data"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><display x="-195" y="210" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5335f808-6164-4249-9a2c-682294b9834c" name="Message" type="Data"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><display x="-195" y="240" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="955e0188-d711-476b-b15b-1362ba3b0ea4" name="Path" type="Data"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="cef84711-b0a0-4f04-a09d-a6e9637ea2cb" name="Qualifier" type="Data"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><display x="-195" y="120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a09cfa98-b04d-472f-ad84-87e6a0bdb011" name="Double Quote Qualifier?" type="Decision"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><loginhibit /><display x="15" y="-30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Qualifier]=&quot;&quot;&quot;&quot;" /><ontrue>b0e18e5b-791a-492a-b6c6-112ed2cdf10f</ontrue><onfalse>6e036392-ff83-4dfa-94fe-ff1ed03cd9bc</onfalse></stage><stage stageid="b0e18e5b-791a-492a-b6c6-112ed2cdf10f" name="Qualifier Code" type="Calculation"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><loginhibit /><display x="120" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>7803cce6-3095-4d46-9cd2-793181eb080d</onsuccess><calculation expression="1" stage="Qualifier Code" /></stage><stage stageid="f9eb7145-ee8c-41cc-8ea2-2417adbcd435" name="Qualifier Code" type="Data"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><display x="-195" y="180" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="fc2b8ffb-c597-4ede-8134-1cc80a2c3293" name="Qualifier Code" type="Calculation"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><loginhibit /><display x="15" y="135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>7803cce6-3095-4d46-9cd2-793181eb080d</onsuccess><calculation expression="-4142" stage="Qualifier Code" /></stage><stage stageid="6e036392-ff83-4dfa-94fe-ff1ed03cd9bc" name="Note2" type="Note"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><loginhibit /><narrative>Assume no text qualifier</narrative><display x="15" y="60" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>fc2b8ffb-c597-4ede-8134-1cc80a2c3293</onsuccess></stage><stage stageid="70744683-2ca9-4e9a-89b9-194945f98e32" name="Range" type="Data"><subsheetid>1487aa65-ac8a-44e9-a6e9-8b16b4be5199</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5c8e00b5-ec48-479b-8abf-6a6658752cb5" name="Get Worksheet Name" type="SubSheetInfo"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><narrative>Gets the name of the worksheet.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="2af2843d-00f3-464f-ab67-305ae6ccf858" name="End" type="End"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><loginhibit /><display x="15" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Worksheet" narrative="The output data - the name of the worksheet." stage="Worksheet" /></outputs></stage><stage stageid="26c465a5-f001-4ff8-ac21-28437489e85f" name="Handle" type="Data"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2de7e6b6-6118-4b3f-ba2b-179ba64d95d8" name="Workbook" type="Data"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5ee8f628-7829-42f7-ac8c-672d78be654f" name="Worksheet" type="Data"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c752debc-3eea-4935-a460-f8eb77039d5d" name="Start" type="Start"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance on which the number of rows is required. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook." stage="Workbook" /><input type="number" name="Worksheet Position" narrative="The position of the worksheet." stage="Position" /></inputs><onsuccess>ba712112-b784-4f87-a7ff-5a8721aca35d</onsuccess></stage><stage stageid="ba712112-b784-4f87-a7ff-5a8721aca35d" name="Get Worksheet" type="Code"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /><input type="number" name="Position" expr="[Position]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /><output type="text" name="Worksheet" stage="Worksheet" /></outputs><onsuccess>39f8ebfd-a1e8-4517-add5-653f475fe8eb</onsuccess><code><![CDATA[Dim wb, ws As Object

Try

wb = GetWorkbook(Handle, Workbook)
ws = wb.Worksheets(Position)
Worksheet = ws.Name

Success = True

Catch e As Exception
   position = -1
	Success = False
	Message = e.Message
Finally
	wb = Nothing
	ws = Nothing
End Try]]></code></stage><stage stageid="2cbe9309-244f-45ae-8716-0d02bf738530" name="Position" type="Data"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="27d60ef1-833c-44f5-b5ab-0aefb2c0581c" name="Success?" type="Decision"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><loginhibit /><display x="15" y="30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>4235fac3-2295-4511-828e-090e9c888d38</ontrue><onfalse>8edc5ff8-0139-409d-ba63-7f23bf726964</onfalse></stage><stage stageid="8edc5ff8-0139-409d-ba63-7f23bf726964" name="Exception" type="Exception"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><display x="120" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to get worksheet position: &quot; &amp; [Message]" /></stage><stage stageid="39f8ebfd-a1e8-4517-add5-653f475fe8eb" name="Success?" type="Decision"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><loginhibit /><display x="15" y="30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>2af2843d-00f3-464f-ab67-305ae6ccf858</ontrue><onfalse>636399b4-ec2b-41a7-ac41-27e98637df4c</onfalse></stage><stage stageid="636399b4-ec2b-41a7-ac41-27e98637df4c" name="Exception" type="Exception"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><display x="120" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to get worksheet name: &quot; &amp; [Message]" /></stage><stage stageid="69b153d1-9bd9-4c51-8b96-d45c1112bbfb" name="Success" type="Data"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><display x="-195" y="120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="464ca930-cf54-4147-8041-1007cc2416b6" name="Message" type="Data"><subsheetid>b39f7ce9-ba76-4a8c-a404-bccf4c9ffe67</subsheetid><display x="-195" y="150" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="def46f81-3f9f-421d-91cf-f12583e956d3" name="Success" type="Data"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><display x="-195" y="120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1195aa37-1cbe-4f02-9d00-c39f3e304cfc" name="Message" type="Data"><subsheetid>510b0ce5-bf46-43a1-86a4-72877f427e6f</subsheetid><display x="-195" y="150" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5222003b-5cb9-4669-bc35-96d41b028249" name="Insert" type="SubSheetInfo"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><narrative>Insert cells into the workbook.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7c868cff-a594-49f6-bde7-fc3ba2cd17c6" name="End" type="End"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><loginhibit /><display x="120" y="195" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="6c34b4fa-4824-48bf-ae2a-b709a25cec17" name="Handle" type="Data"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3dc53e03-3a4f-4ca9-ba70-17573564d976" name="Workbook" type="Data"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="89909450-cca0-4546-bbbc-32cbd4c609bc" name="Start" type="Start"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance that contains the macro. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Workbook" narrative="The name of the workbook." stage="Workbook" /><input type="text" name="Shift (Left or Up)" narrative="The shift type to be used to insert cells." stage="Shift" /></inputs><onsuccess>1f31ede9-3b32-4aaf-9b55-573cb227a850</onsuccess></stage><stage stageid="dc1f9d40-b099-44c3-a2c1-e782413b0914" name="Insert" type="Code"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><loginhibit /><display x="120" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Workbook" expr="[Workbook]" /><input type="number" name="Shift Type" expr="[Shift Type]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>be039ecb-6427-4a80-8a91-9b69561fc2de</onsuccess><code><![CDATA[Dim wb, excel, range As Object

Try

wb = GetWorkbook(Handle, Workbook)
excel = wb.Application

range = excel.Selection
range.Insert(Shift:=[Shift_Type])

Success = True

Catch e As Exception
	Success = False
	Message = e.Message
Finally
	wb = Nothing
	excel = Nothing
	range = Nothing
End Try]]></code></stage><stage stageid="be039ecb-6427-4a80-8a91-9b69561fc2de" name="Success?" type="Decision"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><loginhibit /><display x="120" y="120" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>7c868cff-a594-49f6-bde7-fc3ba2cd17c6</ontrue><onfalse>741cc1d1-3936-4201-ad74-e95993e64b92</onfalse></stage><stage stageid="741cc1d1-3936-4201-ad74-e95993e64b92" name="Exception" type="Exception"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><display x="225" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="" detail="&quot;Failed to delete selection: &quot; &amp; [Message]" /></stage><stage stageid="aac1165a-4574-4834-a68e-18db8cdd0216" name="Success" type="Data"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><display x="-195" y="150" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="52ea365d-8434-45cb-97ba-cd7c741b7c7c" name="Message" type="Data"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><display x="-195" y="180" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="fd2ee59b-4044-4f2c-8439-05e1a9b23c7d" name="Shift" type="Data"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1f31ede9-3b32-4aaf-9b55-573cb227a850" name="Shift Left?" type="Decision"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><loginhibit /><display x="15" y="-30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="Trim(Upper([Shift]))=&quot;LEFT&quot;" /><ontrue>594ef012-6d63-4256-a43c-dd84c172ad15</ontrue><onfalse>21ff25a4-b431-43fb-af46-02fff92627e7</onfalse></stage><stage stageid="594ef012-6d63-4256-a43c-dd84c172ad15" name="Shift Type" type="Calculation"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><loginhibit /><display x="120" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>dc1f9d40-b099-44c3-a2c1-e782413b0914</onsuccess><calculation expression="-4161" stage="Shift Type" /></stage><stage stageid="c07375e4-4e0d-4a0d-b7b2-d1bab9884769" name="Shift Type" type="Data"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><display x="-195" y="120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="21ff25a4-b431-43fb-af46-02fff92627e7" name="Shift Type" type="Calculation"><subsheetid>659749b0-1f00-4e33-956d-6be6172a8739</subsheetid><loginhibit /><display x="15" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>dc1f9d40-b099-44c3-a2c1-e782413b0914</onsuccess><calculation expression="-4121" stage="Shift Type" /></stage><stage stageid="53f2c5f2-ac8f-40c2-ace8-24614c6d3676" name="Run Macro" type="SubSheetInfo"><subsheetid>4229da44-68c0-4b51-9d2c-08be4a9d6727</subsheetid><narrative>Runs the specified macro.

Depending on how the macro has been created the name will be one of the following:

A. Just the macro name
e.g. MyMacro

B. The workbook and macro name
e.g. MyWorkbook.xls!MyMacro

C. The workbook, worksheet and the macro name
e.g. 'MyWorkbook.xls!'MyWorksheet.MyMacro</narrative><display x="-225" y="-15" w="300" h="210" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="da9401ad-8267-4f76-bb0d-02d380427eb5" name="Start" type="Start"><subsheetid>4229da44-68c0-4b51-9d2c-08be4a9d6727</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" narrative="The integer handle identifying the instance that contains the macro. The default of zero indicates the currently active instance." stage="Handle" /><input type="text" name="Macro Name" narrative="The name of the macro to run" stage="Macro Name" /></inputs><onsuccess>a19d33b9-0a8b-4fb1-b333-7fb65c7733ab</onsuccess></stage><stage stageid="0a6413b8-4ce8-4399-b3e2-974e44d812af" name="End" type="End"><subsheetid>4229da44-68c0-4b51-9d2c-08be4a9d6727</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a19d33b9-0a8b-4fb1-b333-7fb65c7733ab" name="Run Macro" type="Code"><subsheetid>4229da44-68c0-4b51-9d2c-08be4a9d6727</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Handle" expr="[Handle]" /><input type="text" name="Macro Name" expr="[Macro Name]" /></inputs><onsuccess>0a6413b8-4ce8-4399-b3e2-974e44d812af</onsuccess><code><![CDATA[GetInstance(Handle).Run(Macro_Name)]]></code></stage><stage stageid="669163d5-5b66-446d-84fc-ddaaccf6ecc8" name="Handle" type="Data"><subsheetid>4229da44-68c0-4b51-9d2c-08be4a9d6727</subsheetid><loginhibit /><display x="165" y="-105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="d95761c1-c5f3-46a0-8b86-7f90e58418cc" name="Macro Name" type="Data"><subsheetid>4229da44-68c0-4b51-9d2c-08be4a9d6727</subsheetid><loginhibit /><display x="165" y="-60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="58d3ca4f-4467-492d-b85a-fd7ab4271110" name="Activate Worksheet" type="SubSheet"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><loginhibit /><display x="135" y="-60" w="150" h="30" /><inputs><input type="number" name="handle" narrative="The integer handle identifying the instance on which the worksheet which should be activated resides. The default of zero indicates the currently active instance." expr="[handle]" /><input type="text" name="Workbook Name" narrative="The name of the workbook in which the sheet exists - The default empty value indicates the currently active workbook on the specified instance." expr="[workbookname]" /><input type="text" name="Worksheet Name" narrative="The name of the sheet which should be activated. The default empty text value indicates that the currently active sheet should be, er, activated, making this a no-op." expr="[worksheetname]" /><input type="flag" name="Create If Missing?" narrative="True to create the sheet if it isn't present on the specified workbook; False to not do so." expr="False" /></inputs><onsuccess>680eac96-2bd0-4d02-a62b-ac7bf684dae9</onsuccess><processid>733c2840-8162-465a-a8f2-7d023087c369</processid></stage><stage stageid="31fdd089-280c-4f33-ba2b-a9b52b556682" name="Open Active Instance" type="Block"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="105" y="-255" w="360" h="375" /><font family="Segoe UI" size="10" style="Regular" color="7FB2E5" /></stage><stage stageid="c478137a-cdb0-4cd8-bb73-fe4c052d6200" name="Timeout" type="Data"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><display x="-210" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>30</initialvalue><private /><alwaysinit /></stage><stage stageid="9474db50-6935-47fa-b862-4aa1a49143f8" name="CheckTimeout" type="Code"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="375" y="-165" w="120" h="30" /><outputs><output type="flag" name="TimeoutOccoured" stage="Timeout Occoured" /></outputs><onsuccess>6af35f22-949f-47dd-8517-78b00d73f8d9</onsuccess><code><![CDATA[TimeoutOccoured = TypeOf mLastException Is TimeoutException
mLastException = Nothing]]></code></stage><stage stageid="6af35f22-949f-47dd-8517-78b00d73f8d9" name="Timeout Occoured?" type="Decision"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="375" y="-120" w="90" h="30" /><decision expression="[Timeout Occoured]" /><ontrue>40a1c81a-4d1f-484f-bcde-c2cc59d83dbd</ontrue><onfalse>59ebf811-1faf-4486-8630-6d2de19027f5</onfalse></stage><stage stageid="40a1c81a-4d1f-484f-bcde-c2cc59d83dbd" name="Anchor1" type="Anchor"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><loginhibit /><display x="570" y="-120" w="10" h="10" /><onsuccess>567674ba-270a-4107-ada5-1dae59125522</onsuccess></stage><stage stageid="3bd76d6f-b60f-4a9d-9293-19a63314f33e" name="Timeout Occoured" type="Data"><subsheetid>ec281dc5-ed57-4b8b-9bf5-212e314657aa</subsheetid><display x="-210" y="105" w="120" h="30" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4fa207ba-9e59-4717-8a0e-f28210974ff9" name="Timeout" type="Data"><subsheetid>6e7cb0ad-5910-4065-aab2-2919726bae39</subsheetid><display x="-195" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>30</initialvalue><private /><alwaysinit /></stage><stage stageid="e87e0c42-73bb-43a9-9fb1-0c07d02391e1" name="Timeout" type="Data"><subsheetid>21a53e34-8128-41cb-ad73-17250758ff23</subsheetid><display x="-255" y="105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>30</initialvalue><private /><alwaysinit /></stage><stage stageid="04901364-93ea-4b62-a8ea-471525e3d12d" name="Timeout" type="Data"><subsheetid>6ccaae8b-c06f-45c8-8772-835218881458</subsheetid><loginhibit /><display x="-465" y="255" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>30</initialvalue><private /><alwaysinit /></stage><stage stageid="c14b670d-b87c-43c9-a54f-7653da70eb83" name="Timeout" type="Data"><subsheetid>2fb01e3f-e275-43bc-83eb-579001da335b</subsheetid><display x="-210" y="150" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>30</initialvalue><private /><alwaysinit /></stage><stage stageid="7cef178b-10af-4ed1-8400-e41a9640bc73" name="Timeout" type="Data"><subsheetid>6ec3006a-6553-4526-b522-32526c4aa3cc</subsheetid><display x="-210" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>30</initialvalue><private /><alwaysinit /></stage><stage stageid="3a73f260-90db-458b-8d72-ef07a38548f1" name="Timeout" type="Data"><subsheetid>9f7a4a91-68c9-4871-bb65-417e96cc4ad1</subsheetid><loginhibit /><display x="-195" y="105" /><datatype>number</datatype><initialvalue>30</initialvalue><private /><alwaysinit /></stage><stage stageid="684b23a1-3d16-4db8-a54b-5925cf13321d" name="Use Header" type="Data"><subsheetid>f92e2a34-0aa8-4ca1-b4ac-5dce2318ec5e</subsheetid><display x="330" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage></process></object>
        <object id="6f9680f1-616c-4884-b58c-42ed51446377" name="Utility - Collection Manipulation" xmlns="http://www.blueprism.co.uk/product/process"><process name="Utility - Collection Manipulation" version="6.6.0.15260" bpversion="6.6.0.15260" narrative="Utility functions for manipulating collections." byrefcollection="true" type="object" runmode="Background"><appdef><element name="Application Root"><id>b30f5d67-5c3c-49c9-8f9b-66d573097498</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions><condition narrative="" /></preconditions><endpoint narrative="" /><subsheet subsheetid="9a74af4c-280a-4e30-bdbb-21295b6256ca" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="53950e2c-2499-41fc-aed2-207a6c7431fd" type="Normal" published="False"><name>Utility Functions Test</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d8e5be7a-93aa-4322-99bf-00edea37bbc2" type="Normal" published="True"><name>Sort Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ffab882f-007c-48a5-8f84-8f5f1bfd4d6a" type="Normal" published="True"><name>Reverse Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="cd8fefb9-4622-4ea7-8287-e64b86d7e513" type="Normal" published="True"><name>Merge Collection</name><view><camerax>-100</camerax><cameray>3</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="76943739-36b9-46bc-8f95-e1b6342bc8a6" type="Normal" published="True"><name>Split Collection</name><view><camerax>0</camerax><cameray>-3</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a0cf6615-20c0-4910-9990-0f79f5f30bca" type="Normal" published="True"><name>Transpose Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a9f3108d-ca87-4551-b567-9c64ef05cf0c" type="Normal" published="True"><name>Filter Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e277cc2b-72b8-47e9-8a1b-e8530eb19a09" type="Normal" published="True"><name>Get Collection Fields</name><view><camerax>42</camerax><cameray>-4</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="4d41bfc8-e552-41ae-9e45-65dc3d1f7276" type="Normal" published="True"><name>Field Exists</name><view><camerax>144</camerax><cameray>-41</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="bcde64eb-f856-4440-a6c0-d83f40f0cf4b" type="Normal" published="True"><name>Rename Collection Fields</name><view><camerax>207</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="198ce3c6-ecbf-4203-a609-b15429defe0e" type="Normal" published="True"><name>Read Collection Field</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="05992810-1be4-4455-84e8-10579308ab87" type="Normal" published="True"><name>Set Collection Field</name><view><camerax>276</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="7a9aa259-fe07-4035-8411-23737559c975" type="Normal" published="True"><name>Collection Contains Field</name><view><camerax>0</camerax><cameray>168</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a" type="Normal" published="True"><name>Collection Contains Value</name><view><camerax>-93</camerax><cameray>-24</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="cdf2a7f1-a351-441a-8d36-bc92af66650a" type="Normal" published="True"><name>Copy Rows</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="51f694a8-5305-4a38-9b41-a98998f2f7ca" type="Normal" published="True"><name>Append Rows to Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a474299b-5c1c-4873-a3af-4dd0d3bd03ff" type="Normal" published="True"><name>Append Field (Text)</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="65451129-b7a2-4c2f-a12d-9086bd314f53" type="Normal" published="True"><name>Append Field (Number)</name><view><camerax>-100</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9" type="Normal" published="True"><name>Rename Field</name><view><camerax>-100</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="1d7b6202-d743-4485-9101-839f4651c406" type="Normal" published="True"><name>Delete Field</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="df662579-558c-4cc9-88df-8c680b67b41d" type="Normal" published="True"><name>Delete Column</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="3a772458-463d-46cf-8451-6cf5b4aeae30" type="Normal" published="True"><name>Remove Null Rows</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="b8e3b975-d485-49a3-b962-864d13a96e05" type="Normal" published="True"><name>Set Column Names From First Row</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="87541f35-d834-4d99-8fd3-16ec994a9990" type="Normal" published="True"><name>Set Column Names From Expected Collection</name><view><camerax>0</camerax><cameray>-62</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d1eee74f-1582-4c3e-96c8-b94f1535d7e1" type="Normal" published="True"><name>Fill Blanks</name><view><camerax>-195</camerax><cameray>-105</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="eb03a051-75a8-4093-a383-6c6fecfbb736" type="Normal" published="True"><name>Remove dots from headers</name><view><camerax>0</camerax><cameray>-43</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="fa6ed646-8ae1-479e-9845-b1dc9ac3b560" type="Normal" published="True"><name>Remove Empty Rows</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="d8c547cc-60d0-459b-876f-90bf696a5757" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>807e7d33-91e2-4241-a85e-ea0718fc487d</onsuccess></stage><stage stageid="807e7d33-91e2-4241-a85e-ea0718fc487d" name="End" type="End"><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1a8c9ebd-54e1-442f-a6c7-e87df3b59232" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><references><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference><reference>Microsoft.VisualBasic.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Data</import><import>System.IO</import><import>System.XML</import><import>System.Diagnostics</import><import>Microsoft.VisualBasic</import><import>System.Data</import><import>system.text.regularexpressions</import><import>Microsoft.VisualBasic</import><import>System.Collections</import><import>System.Reflection</import></imports><language>visualbasic</language><globalcode><![CDATA[


]]></globalcode><code><![CDATA[Public CommonDictionary as New System.Collections.Generic.Dictionary(Of String, String)

Private Iterator as Generic.IEnumerator(Of String)

Function CloneColumn(col As DataColumn) As DataColumn
	Dim tp = col.GetType()
	Return TryCast(
		tp.GetMethod("Clone", BindingFlags.Instance Or BindingFlags.NonPublic).
			Invoke(col, Nothing),
		DataColumn
	)
End Function

Function GetStringValue(row As DataRow, fieldName As String) As String
	Dim col As DataColumn = row.Table.Columns(fieldName)
	Dim val = row(fieldName)
	Select Case True
		Case IsDateColumn(col)
			Return CDate(val).ToString("d") 
		Case IsTimeColumn(col)
			Return CDate(val).ToString("T")
		Case IsDateTimeColumn(col)
			Return CDate(val).ToString("G")
		Case Else
			Return CStr(val)
	End Select
End Function

Function GetBPType(col As DataColumn) As String
	If col Is Nothing Then Return Nothing
	If Not col.ExtendedProperties.ContainsKey("bptype") Then Return Nothing
	Return col.ExtendedProperties("bptype").ToString()
End Function

Function IsDateColumn(col as DataColumn) as Boolean
	Return (GetBPType(col) = "date")
End Function

Function IsTimeColumn(col as DataColumn) as Boolean
	Return (GetBPType(col) = "time")
End Function

Function IsDateTimeColumn(col as DataColumn) as Boolean
	Return (GetBPType(col) = "datetime")
End Function

Public Function GetDataTable(ByVal ColumnNamesCSV As String, ByVal ColumnTypesCSV As String) As DataTable

	Dim objTable As DataTable
	Dim objColumn As DataColumn
	Dim aColumnNames As String() = ColumnNamesCSV.Split(",")
	Dim aColumnTypes As String() = ColumnTypesCSV.Split(",")

	Try
		objTable = New DataTable
		For i As Integer = 0 To aColumnNames.Length - 1
			objColumn = New DataColumn 
			objColumn.DataType = System.Type.GetType(aColumnTypes(i).Trim)
			objColumn.ColumnName = aColumnNames(i).Trim
			objTable.Columns.Add(objColumn)
		Next
		
	Catch e As Exception
		objTable = nothing	
	End Try

	Return objTable

End Function


private function GetBluePrismDAtaType(DotNetType AS Type) As String
   Select Case True
      Case DotNetType.Equals(GetType(Timespan))
         return "timespan"
      Case DotNetType Is GetType(DAteTime)
         return "datetime"
      Case DotNetType Is GetType(Decimal), _
				DotNetType Is GetType(Integer), _
					DotNetType Is GetType(Double), _
						DotNetType Is GetType(Single)
         return "number"
      Case DotNetType Is GetType(System.Drawing.Bitmap)
         return "image"
      Case DotNetType Is GetType(Byte())
         return "binary"
      Case DotNetType Is GetType(Boolean)
         return "flag"
      Case DotNetType Is GetType(System.Data.DataTable)
         return "collection"
      Case Else
         return "text"
   End Select
End Function


Private Function CloneDataRow(R As DataRow, ColumnCount As Integer) As Object()
	Dim RetVal(ColumnCount - 1) As Object
	For I As Integer = 0 to ColumnCount - 1
		RetVal(I) = R(I)
	Next

	Return RetVal
End Function]]></code></stage><stage stageid="0bf7814a-647b-4bcb-b6a6-3d24dfd5b736" name="Clean Up" type="SubSheetInfo"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0c56e2f8-68ce-48a3-97ad-81e1f076e9ce" name="new" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="2271a79e-27e5-4434-b5be-146e02946317" name="new" type="Note"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="36451c72-b274-4817-a153-beb1e8a6e76a" name="Start" type="Start"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>9a8c4505-8606-4a0c-b118-09a6b9932b3b</onsuccess></stage><stage stageid="9a8c4505-8606-4a0c-b118-09a6b9932b3b" name="End" type="End"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1d87c6c0-f260-46fc-99c2-ffcbf6ee0497" name="Sort Collection" type="SubSheetInfo"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><narrative>Sorts a collection according to the specified field.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="785a8eca-82a6-43fe-9f16-1803844d88ce" name="Start" type="Start"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have been sorted." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection" narrative="The collection to sort." stage="Collection In" /><input type="text" name="Sort Field" narrative="The field to sort by." stage="Sort Field" /><input type="flag" name="Ascending Order" narrative="True to sort in ascending order." stage="Ascending Order" /></inputs><onsuccess>fbac0e5c-5410-45f1-98d7-646797398b04</onsuccess></stage><stage stageid="0c95c136-f8cf-49a1-98c0-a4c1e2334eca" name="End" type="End"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Sorted Collection" narrative="The sorted collection." stage="Collection Out" /><output type="flag" name="Success" narrative="True if sorting was successful." stage="Success" /><output type="text" name="Message" narrative="An error message when sorting failed." stage="Message" /></outputs></stage><stage stageid="e8e991cc-351b-4484-9825-b5c1f0d894d1" name="Collection Out" type="Collection"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><loginhibit /><display x="-195" y="135" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="fbac0e5c-5410-45f1-98d7-646797398b04" name="Sort Collection" type="Code"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection" expr="[Collection In]" /><input type="text" name="Sort Field" expr="[Sort Field]" /><input type="flag" name="Ascending" expr="[Ascending Order]" /></inputs><outputs><output type="collection" name="Sorted Collection" stage="Collection Out" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>0c95c136-f8cf-49a1-98c0-a4c1e2334eca</onsuccess><code><![CDATA[Try

 

            If Ascending Then

                        Collection.DefaultView.Sort = Sort_Field & " ASC"

            Else

                        Collection.DefaultView.Sort = Sort_Field & " DESC"

            End If

 

            Sorted_Collection = Collection.DefaultView.ToTable

 

            Success = True

            Message = ""

 

Catch e As Exception

            Success = False

            Message = e.Message

End Try]]></code></stage><stage stageid="6f6e54f2-77b8-4f24-ae2f-46a2143d9815" name="Ascending Order" type="Data"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="2fb49db2-332e-4bdb-a52e-53546b2a25e8" name="Message" type="Data"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><display x="-195" y="210" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8170a296-23ef-4f36-88ea-12b93bc41486" name="Success" type="Data"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><display x="-195" y="180" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d46e7f41-9e7a-4a0a-b1be-d440d57e4020" name="Sort Field" type="Data"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><display x="-180" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="adfd612b-98f8-4902-8526-2bda2e03f814" name="Get Collection Fields" type="SubSheetInfo"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><narrative>Creates a collection with a Name and Datatype field which is then populated using the incoming collections field names and data types.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="73b6f098-584e-441e-8b2d-e231b971bdb2" name="Start" type="Start"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="A new collection will be created containing the collections field data." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" narrative="The collection to get the fields from." stage="Input Collection" /></inputs><onsuccess>39b91b36-f03d-4fa7-9bf2-47470e1d9703</onsuccess></stage><stage stageid="e2308e18-4f98-4f62-9ff6-a4c52222c3aa" name="End" type="End"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Collection Fields" narrative="A collection containing the fields." stage="Fields" /></outputs></stage><stage stageid="39b91b36-f03d-4fa7-9bf2-47470e1d9703" name="Get Collection Fields" type="Code"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="collection" name="Fields" stage="Fields" /></outputs><onsuccess>e2308e18-4f98-4f62-9ff6-a4c52222c3aa</onsuccess><code><![CDATA[Fields = New DataTable()
Fields.Columns.Add("Field Name", GetType(String))
Fields.Columns.Add("Data Type", GetType(String))

For Each Column As DataColumn In Input_Collection.Columns
   Dim DataType As String = GetBluePrismDataType(Column.DataType)
   Fields.Rows.Add(New Object() {Column.ColumnName, DataType})
Next
]]></code></stage><stage stageid="a16b1987-a205-4bf6-8a33-ed2167c201ff" name="Fields" type="Collection"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><display x="135" y="90" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Field Name" type="text" /><field name="Data Type" type="text" /></collectioninfo></stage><stage stageid="15198914-f283-4549-a823-c7b71d71d160" name="Utility Functions Test" type="SubSheetInfo"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="6b30836d-2593-48c6-a021-b6b3e92ad88a" name="Start" type="Start"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>f5830837-58db-473d-b7dc-4651a10f79c6</onsuccess></stage><stage stageid="5a5bf1e7-2072-4226-96ba-ab3d0a656589" name="End" type="End"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f5830837-58db-473d-b7dc-4651a10f79c6" name="Get Collection Fields" type="SubSheet"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><loginhibit /><display x="15" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" expr="[Defined Collection 1]" /></inputs><outputs><output type="collection" name="Collection Fields" stage="Collection Fields" /></outputs><onsuccess>5a5bf1e7-2072-4226-96ba-ab3d0a656589</onsuccess><processid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</processid></stage><stage stageid="d402363f-8a48-4418-b0d9-2bef5037bc67" name="Input Collection" type="Collection"><subsheetid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="e8e6edcb-f2fe-4582-9037-5ddb4ca15572" name="Collection Fields" type="Collection"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><display x="105" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="980dd5f0-a047-4672-9a7a-18632a5826a0" name="Defined Collection 1" type="Collection"><subsheetid>53950e2c-2499-41fc-aed2-207a6c7431fd</subsheetid><loginhibit /><display x="-150" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="My Text Field" type="text" /><field name="My Number Field" type="number" /><field name="My DateTime Field" type="datetime" /><field name="My TimeSpan Field" type="timespan" /><field name="My Flag Field" type="flag" /><field name="My Image Field" type="image" /></collectioninfo><initialvalue><row><field name="My Text Field" type="text" value="Test Text" /><field name="My Number Field" type="number" value="5" /><field name="My DateTime Field" type="datetime" value="2009-07-23 01:46:26Z" /><field name="My TimeSpan Field" type="timespan" value="0.00:03:42" /><field name="My Flag Field" type="flag" value="True" /><field name="My Image Field" type="image" value="" /></row><row><field name="My Text Field" type="text" value="asdf" /><field name="My Number Field" type="number" value="10" /><field name="My DateTime Field" type="datetime" value="" /><field name="My TimeSpan Field" type="timespan" value="0.00:00:00" /><field name="My Flag Field" type="flag" value="False" /><field name="My Image Field" type="image" value="" /></row></initialvalue></stage><stage stageid="0e6f80ff-bfb9-4d47-8e5a-5299a5873467" name="Read Collection Field" type="SubSheetInfo"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><narrative>Reads a field with a given name and at the specified row from the collection.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9d660720-4bed-4ea8-8ad6-56fa0b19cfb4" name="Start" type="Start"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Row Index" narrative="The row index within the collection to read from. The index is from 0 to N-1 (where N is the total number of rows in the collection)." stage="Row Index" /><input type="collection" name="Collection" narrative="The collection to read." stage="Collection" /><input type="text" name="Field Name" narrative="The field within the collection to read." stage="Field Name" /></inputs><onsuccess>c4bf6e49-1d07-4d60-8b44-fd35a2009654</onsuccess></stage><stage stageid="2a6d86a8-8937-4d4b-9da4-32813d06a0bf" name="End" type="End"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Value Read" narrative="The value of the requested field as text." stage="Value Read" /></outputs></stage><stage stageid="d43ae257-4559-4fa8-9b0b-1f49bd80a301" name="Row Index" type="Data"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bd207bc4-8fe0-4f01-94e6-b289cdb60e38" name="Collection" type="Collection"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><display x="225" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="745ce225-df49-4b02-b12c-e9e2068ca6aa" name="Field Name" type="Data"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><display x="150" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c4bf6e49-1d07-4d60-8b44-fd35a2009654" name="Read Field" type="Code"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><loginhibit /><display x="15" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Coll" expr="[Collection]" /><input type="text" name="FieldName" expr="[Field Name]" /><input type="number" name="RowIndex" expr="[Row Index]" /></inputs><outputs><output type="text" name="Value Read" stage="Value Read" /></outputs><onsuccess>2a6d86a8-8937-4d4b-9da4-32813d06a0bf</onsuccess><code><![CDATA[
If RowIndex < 0 OrElse Coll.Rows.Count <= RowIndex Then
	Throw New ApplicationException("The supplied row index falls outside of the valid range.")
End If

If Not Coll.Columns.Contains(FieldName) Then
   Throw New ApplicationException("The collection does not contain a field with the name '" & FieldName & "'")
End If

Value_Read = GetStringValue(Coll.Rows(RowIndex), FieldName)]]></code></stage><stage stageid="43376e9f-73fa-4757-affa-330da5d1e6b1" name="Value Read" type="Data"><subsheetid>198ce3c6-ecbf-4203-a609-b15429defe0e</subsheetid><display x="105" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ee1c02ab-bf62-48df-b0de-79c4f254d5df" name="Set Collection Field" type="SubSheetInfo"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><narrative>Updates a single value in a collection by the given field name and row index.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="4fe6d4f3-e989-4636-b373-9a32fc41d450" name="Start" type="Start"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><loginhibit /><display x="120" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Row Index" narrative="The index of the row in which to set the value. The index is from 0 to N-1 (where N is the total number of rows in the collection)." stage="Row Index" /><input type="collection" name="Collection" narrative="The collection in which to set the value." stage="Collection" /><input type="text" name="Field Name" narrative="The name of the field in which to set the value" stage="Field Name" /><input type="text" name="New Value" narrative="The value as text to set." stage="New Value" /></inputs><onsuccess>c7b9c9ed-85d9-4449-a150-5182797dc6f3</onsuccess></stage><stage stageid="2be33601-0c29-45c7-bc7e-1a5a8d1c19b2" name="End" type="End"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><loginhibit /><display x="120" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Updated Collection" narrative="The collection which now has the value set." stage="Updated Collection" /></outputs></stage><stage stageid="e2d67695-6463-4e93-b5cd-e3b9805bb0cf" name="Row Index" type="Data"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><display x="195" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="26046a1c-efef-4b6b-baa7-1880ae887576" name="Collection" type="Collection"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><display x="330" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="9459f512-1cb5-4884-b551-4dcace90d77f" name="Field Name" type="Data"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><display x="255" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c7b9c9ed-85d9-4449-a150-5182797dc6f3" name="Set Field" type="Code"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><loginhibit /><display x="120" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Coll" expr="[Collection]" /><input type="text" name="FieldName" expr="[Field Name]" /><input type="number" name="RowIndex" expr="[Row Index]" /><input type="text" name="New Value" expr="[New Value]" /></inputs><outputs><output type="collection" name="Updated Collection" stage="Updated Collection" /></outputs><onsuccess>2be33601-0c29-45c7-bc7e-1a5a8d1c19b2</onsuccess><code><![CDATA[
If RowIndex < 0 OrElse Coll.Rows.Count <= RowIndex Then
	Throw New ApplicationException("The supplied row index falls outside of the valid range.")
End If

If Not Coll.Columns.Contains(FieldName) Then
   Throw New ApplicationException("The collection does not contain a field with the name '" & FieldName & "'")
End If

Coll.Rows(RowIndex)(FieldName) = New_Value

Updated_Collection = Coll]]></code></stage><stage stageid="2c198fde-25d6-4009-a434-256fd08044b1" name="New Value" type="Data"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><display x="390" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="532e300d-c8f5-4049-9b1e-490a9a85884c" name="Updated Collection" type="Collection"><subsheetid>05992810-1be4-4455-84e8-10579308ab87</subsheetid><display x="195" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6164801d-51c0-428e-976d-23828f70767d" name="Collection Contains Field" type="SubSheetInfo"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><narrative>Tests a collection to see whether it contains a specific field.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1ed16edd-07a7-459b-abc4-c29fc16117eb" name="Start" type="Start"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="Whether the collection contains the field will have been determined." /></postconditions><display x="15" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" narrative="The collection to check." stage="Input Collection" /><input type="text" name="Field" narrative="The field to see if the collection has." stage="Field" /></inputs><onsuccess>a76de6a5-ad0f-42b0-8cea-1cc827be1d45</onsuccess></stage><stage stageid="15854162-6197-477a-873b-73c9b453d0d3" name="End" type="End"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="15" y="240" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if the collection contains the field." stage="Success" /><output type="text" name="Error Message" narrative="Unused" stage="Error Message" /></outputs></stage><stage stageid="a76de6a5-ad0f-42b0-8cea-1cc827be1d45" name="Get Collection Fields" type="SubSheet"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="collection" name="Collection Fields" stage="Field Names" /></outputs><onsuccess>73ed00ea-d816-4343-8fe2-09924b85491f</onsuccess><processid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</processid></stage><stage stageid="09779833-6862-44cb-a355-04cb35350208" name="Input Collection" type="Collection"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><display x="150" y="-120" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="1343f537-262d-4113-8953-31173a54fdf9" name="Field" type="Data"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><display x="285" y="-120" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="73ed00ea-d816-4343-8fe2-09924b85491f" name="Loop Start Collection Fields" type="LoopStart"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="15" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>11a28026-8164-4066-97bb-6f7cc6a3f6de</onsuccess><groupid>53f9e518-2d0e-4a03-a2ac-5ffa45e0ab8a</groupid><looptype>ForEach</looptype><loopdata>Field Names</loopdata></stage><stage stageid="c2b21dab-e784-43a7-b09a-19e8bf2d5672" name="Loop End Collection Fields" type="LoopEnd"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="15" y="180" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>15854162-6197-477a-873b-73c9b453d0d3</onsuccess><groupid>53f9e518-2d0e-4a03-a2ac-5ffa45e0ab8a</groupid></stage><stage stageid="04208d31-4ee8-45a6-af69-2dd8140cc92a" name="Field Names" type="Collection"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><display x="150" y="-45" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Field Name" type="text" /><field name="Data Type" type="text" /></collectioninfo></stage><stage stageid="d010b7fb-5d33-4636-bea8-2195b0f22738" name="Success" type="Data"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><display x="135" y="240" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="ac2d5cc5-ddee-4785-bf6a-410b0e478722" name="Error Message" type="Data"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><display x="240" y="240" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="11a28026-8164-4066-97bb-6f7cc6a3f6de" name="Match?" type="Decision"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="15" y="105" w="60" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Field Names.Field Name] = Trim([Field])" /><ontrue>95c39a4f-2e55-45cb-a622-5cdec6b2d75b</ontrue><onfalse>c2b21dab-e784-43a7-b09a-19e8bf2d5672</onfalse></stage><stage stageid="6bd78de4-b21e-4741-af66-a88c72496d0f" name="anchor2" type="Anchor"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="-120" y="240" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>15854162-6197-477a-873b-73c9b453d0d3</onsuccess></stage><stage stageid="95c39a4f-2e55-45cb-a622-5cdec6b2d75b" name="Set Success" type="Calculation"><subsheetid>7a9aa259-fe07-4035-8411-23737559c975</subsheetid><loginhibit /><display x="-120" y="105" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>6bd78de4-b21e-4741-af66-a88c72496d0f</onsuccess><calculation expression="True" stage="Success" /></stage><stage stageid="e6748536-1050-482b-86e6-cd57cce3bc6d" name="Copy Rows" type="SubSheetInfo"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><narrative>Copies the rows of the given collection into a new collection.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="46e0886c-ea0a-4778-ad1e-9b7878e04a43" name="Append Rows to Collection" type="SubSheetInfo"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><narrative>Combines two collections into one, provided they share the same set of fields</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d3ec306e-f0c9-4bbc-a4da-a38b21969f5c" name="Reverse Collection" type="SubSheetInfo"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><narrative>Reverses the order of the rows in the collection.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="98b20289-3b73-4776-9912-d679291e392e" name="Reverse Collection" type="Code"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><loginhibit /><display x="15" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="CollectionIn" expr="[Collection In]" /></inputs><outputs><output type="collection" name="CollectionOut" stage="Collection Out" /></outputs><onsuccess>661b2b7b-7862-4db1-b71c-747437b534da</onsuccess><code><![CDATA[If CollectionIn.Columns.Count = 0 Then Throw new ApplicationException("Zero columns in collection")

CollectionOut = CollectionIn.Clone()

For I As integer = CollectionIn.Rows.Count - 1 To 0 Step -1
	Dim Objs(CollectionIn.Columns.Count - 1) As Object
	For J As integer = 0 to CollectionIn.Columns.Count - 1
		Objs(J) = collectionIn.Rows(I)(J)
	Next
	CollectionOut.Rows.Add(Objs)
Next]]></code></stage><stage stageid="48fd9b49-12a4-490d-8741-7cb0e6de6ac2" name="Collection In" type="Collection"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><display x="135" y="-105" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><initialvalue><row><field name="CIS" type="number" value="1" /><field name="Sort Code" type="text" value="123456" /><field name="Account Number" type="text" value="12345678" /><field name="Balance" type="number" value="1" /><field name="Cancelled Items" type="text" value="" /></row><row><field name="CIS" type="number" value="3" /><field name="Sort Code" type="text" value="223456" /><field name="Account Number" type="text" value="22345678" /><field name="Balance" type="number" value="2" /><field name="Cancelled Items" type="text" value="" /></row><row><field name="CIS" type="number" value="2" /><field name="Sort Code" type="text" value="323456" /><field name="Account Number" type="text" value="32345678" /><field name="Balance" type="number" value="3" /><field name="Cancelled Items" type="text" value="" /></row><row><field name="CIS" type="number" value="5" /><field name="Sort Code" type="text" value="423456" /><field name="Account Number" type="text" value="42345678" /><field name="Balance" type="number" value="4" /><field name="Cancelled Items" type="text" value="" /></row><row><field name="CIS" type="number" value="6" /><field name="Sort Code" type="text" value="523456" /><field name="Account Number" type="text" value="52345678" /><field name="Balance" type="number" value="5" /><field name="Cancelled Items" type="text" value="" /></row><row><field name="CIS" type="number" value="4" /><field name="Sort Code" type="text" value="623456" /><field name="Account Number" type="text" value="62345678" /><field name="Balance" type="number" value="6" /><field name="Cancelled Items" type="text" value="" /></row></initialvalue></stage><stage stageid="862d18c4-1bd0-4542-b3e2-8baf8a977af8" name="Start" type="Start"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have been sorted." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection" narrative="The collection to be reversed." stage="Collection In" /></inputs><onsuccess>98b20289-3b73-4776-9912-d679291e392e</onsuccess></stage><stage stageid="661b2b7b-7862-4db1-b71c-747437b534da" name="End" type="End"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Reversed Collection" narrative="The reversed collection." stage="Collection Out" /></outputs></stage><stage stageid="1965b145-70ec-4ee0-a936-3c32f57e587e" name="Collection Out" type="Collection"><subsheetid>ffab882f-007c-48a5-8f84-8f5f1bfd4d6a</subsheetid><loginhibit /><display x="150" y="45" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="ca7dbfca-b97f-43d4-9601-6fa4d4eacc4b" name="Rename Collection Fields" type="SubSheetInfo"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><narrative>Renames the fields of a collection based on the fields of a given name mapping collection.</narrative><display x="-60" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="be8b9084-5d06-424d-8086-89d565e39887" name="Start" type="Start"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection fields will have been renamed." /></postconditions><display x="105" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Main Collection" narrative="The main collection, whose headers are to be modified" stage="Main Collection" /><input type="collection" name="New Headers" narrative="A collection of new headers. This must be a one-row collection matching the fields of the first. The first row will contain the new field names under the corresponding field names" stage="New Headers" /></inputs><onsuccess>2dfc16b3-737a-4ff7-9843-9e66c78b23d4</onsuccess></stage><stage stageid="7eadbd5a-bba1-4128-ac2a-9bbe81d6ec77" name="End" type="End"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><loginhibit /><display x="105" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Amended Collection" stage="Amended Collection" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs></stage><stage stageid="5c64c0b3-6819-410a-be71-587501d42504" name="New Headers" type="Collection"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><display x="375" y="-90" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><initialvalue><row><field name="Column 1" type="text" value="Name" /><field name="Column 2" type="text" value="Age" /></row></initialvalue></stage><stage stageid="2dfc16b3-737a-4ff7-9843-9e66c78b23d4" name="Rename Headers" type="Code"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><loginhibit /><display x="105" y="0" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Main Collection" expr="[Main Collection]" /><input type="collection" name="New Headers" expr="[New Headers]" /></inputs><outputs><output type="collection" name="Amended Collection" stage="Amended Collection" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>7eadbd5a-bba1-4128-ac2a-9bbe81d6ec77</onsuccess><code><![CDATA[If Main_Collection IsNot Nothing AndAlso New_Headers IsNot Nothing Then
	If Main_Collection.Columns.Count = New_Headers.Columns.count Then
		For Each Col1 As DataColumn In Main_Collection.Columns
			If Not New_Headers.Columns.Contains(Col1.ColumnName) Then
				Success = False
				Error_Message = "New Headers collection does not contain the field '" & Col1.ColumnName & "' found in the Main Collection"
				Exit Sub
			End If
		Next

		'We can now assume that fields match
		'and start copying rows
		For Each C As DataColumn In Main_Collection.Columns
			Dim NewName As String = Cstr(New_Headers.Rows(0)(C.ColumnName))
			If String.IsNullOrEmpty(NewName) Then
				Throw New ApplicationException("Blank field names are not acceptable")
			Else
				C.ColumnName = Trim(NewName)
			End If
		Next

		Main_Collection.AcceptChanges()
		Amended_Collection = Main_Collection
		Success = True
	Else
		Success = False
		Error_Message = "Collection field definitions do not match - the number of columns in each is different."
	End If
Else
	Success = False
	Error_Message = "Neither Collection may be null"
End If]]></code></stage><stage stageid="73981b01-1a93-4c6e-a35f-fa6c194f63ec" name="Success" type="Data"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><display x="240" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="73dcc958-035e-40f7-ab25-a8f22d06bf4f" name="Error Message" type="Data"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><display x="180" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0af7f983-37fd-47c4-971a-5c0ca70b60c4" name="Main Collection" type="Collection"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><display x="210" y="-90" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><initialvalue><row><field name="Column 1" type="text" value="asdf" /><field name="Column 2" type="text" value="34" /></row></initialvalue></stage><stage stageid="e86fffbd-3537-4ed9-9e32-20c8f55b6cb6" name="Amended Collection" type="Collection"><subsheetid>bcde64eb-f856-4440-a6c0-d83f40f0cf4b</subsheetid><display x="360" y="120" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6b6aa002-ceed-4ea9-ab37-e3cc338e349c" name="Collection Contains Value" type="SubSheetInfo"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><narrative>Searches for the existence of a value or a regular expression in a specified column in a collection. This will return true and, if a regular expression was provided, the groups defined in that regex for the first matched value it finds in the collection.</narrative><display x="-255" y="-105" w="270" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="29ece439-17ef-4972-aa97-b373f2d68616" name="Start" type="Start"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><preconditions><condition narrative="A collection exists with the specified column name which may or may not contain a particular value" /><condition narrative="The collection being searched has no date or time columns (A code stage restriction)" /><condition narrative="" /><condition narrative="" /></preconditions><postconditions><condition narrative="No change" /></postconditions><narrative>Note that if neither 'Exact Value' nor 'Regex' are supplied, this will always return FALSE / ie. not found. If a match is found, groups will return all of the groups specified in the regular expression when applied to the value found.</narrative><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection" narrative="Required : The collection to search" stage="Collection" /><input type="text" name="Column Name" narrative="Required : The name of the column to search" stage="Column Name" /><input type="text" name="Exact Value" narrative="Optional : The exact value to search for - this is case insensitive" stage="Exact Value" /><input type="text" name="Regex" narrative="Optional : The regular expression to search for - this is case sensitive unless specified otherwise in the regular expression using &quot;(?i)&quot;" stage="Regex" /></inputs><onsuccess>aa1a4d89-5218-4bbe-a743-0d3484968cb6</onsuccess></stage><stage stageid="ebc6a036-6449-4acd-ac3c-bf1c0cdb652a" name="End" type="End"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="-30" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Contains Search Term" narrative="Flag indicating if the collection found the given search term or not" stage="Contains Search Term" /><output type="collection" name="Groups" narrative="The groups defined in the regular expression when it is applied to the found term" stage="Groups" /></outputs></stage><stage stageid="63287049-53dd-4e10-b6fa-809c255a8f63" name="Collection" type="Collection"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-330" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="14def48d-230f-4041-99c7-0af7c0dd5e0f" name="Column Name" type="Data"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-330" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="965f0a82-f3be-4fcf-b43d-33b5a31b45d1" name="Exact Value" type="Data"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-330" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f2df8ab8-a7dc-408c-962c-efe2dd44d403" name="Regex" type="Data"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-330" y="90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6c87975d-a017-4b35-923d-19816f41b5b3" name="Contains Search Term" type="Data"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-180" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="f7c0f14b-16b5-4e13-b3e9-71fd7bf59990" name="Groups" type="Collection"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><display x="-180" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Group" type="text" /></collectioninfo></stage><stage stageid="ca62b1b4-f73d-422a-b21a-ac4cfcc71041" name="Note2" type="Note"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-330" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="86ee4f07-c603-44e1-b307-e53cd7d9eff4" name="Note2" type="Note"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-180" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a408f364-ecb4-4548-9556-57f4a26f3ada" name="Both Search Strings Empty?" type="Decision"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="-30" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="Len([Exact Value]) = 0 AND Len ([Regex]) = 0" /><ontrue>612f50dc-0fcc-4765-800b-e65e5bf3861f</ontrue><onfalse>7cdc88ed-891c-4f88-a51d-2da37bd56d4d</onfalse></stage><stage stageid="aa1a4d89-5218-4bbe-a743-0d3484968cb6" name="Trim Search Strings" type="MultipleCalculation"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="-30" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>a408f364-ecb4-4548-9556-57f4a26f3ada</onsuccess><steps><calculation expression="Trim([Exact Value])" stage="Exact Value" /><calculation expression="Trim([Regex])" stage="Regex" /></steps></stage><stage stageid="612f50dc-0fcc-4765-800b-e65e5bf3861f" name="anchor3" type="Anchor"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="75" y="-30" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>7e121ceb-3f72-4655-8e21-38d3e5be7cec</onsuccess></stage><stage stageid="7e121ceb-3f72-4655-8e21-38d3e5be7cec" name="anchor4" type="Anchor"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="75" y="90" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>ebc6a036-6449-4acd-ac3c-bf1c0cdb652a</onsuccess></stage><stage stageid="7cdc88ed-891c-4f88-a51d-2da37bd56d4d" name="Search Collection" type="Code"><subsheetid>5b8e4ed2-8ba9-4b0f-966e-a0e392f44e7a</subsheetid><loginhibit /><display x="-30" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="coll" expr="[Collection]" /><input type="text" name="colname" expr="[Column Name]" /><input type="text" name="exactVal" expr="[Exact Value]" /><input type="text" name="regexVal" expr="[Regex]" /></inputs><outputs><output type="flag" name="found" stage="Contains Search Term" /><output type="collection" name="groups" stage="Groups" /></outputs><onsuccess>ebc6a036-6449-4acd-ac3c-bf1c0cdb652a</onsuccess><code><![CDATA[If Not Coll.Columns.Contains(colname) Then
  Throw New ApplicationException(String.Format( _
   "The collection does not contain a field " & _
   "with the name '{0}'", colname))
End If

Dim rx as Regex
If Not String.IsNullOrEmpty(exactVal) Then
  rx = New Regex("^" & Regex.Escape(exactVal) & "$", RegexOptions.IgnoreCase)
Else
  ' If ignore case is required it can be inlined using "(?i)..rest of search"
  rx = New Regex(regexVal)
End If

' Initialise output params
found = False
groups = New DataTable()
groups.Columns.Add("Group", GetType(String))

For Each row as DataRow in coll.Rows

  Dim val as String = CStr(row(colname))
  Dim m as Match = rx.Match(val)
  If m.Success Then
    found = True
    For i as Integer = 1 to m.Groups.Count-1
      groups.Rows.Add(New Object() {m.Groups(i).Value})
    Next
    Return
  End If

Next]]></code></stage><stage stageid="365e481a-8567-48cf-babf-40039e151df7" name="Delete Column" type="SubSheetInfo"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><narrative>Deletes a field from a collection.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="4421e0d9-6181-4872-aa85-8ad310427d30" name="Start" type="Start"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collections field will have been removed." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" narrative="The collection from which you want to delete a column from" stage="Input Collection" /><input type="text" name="Column Name" narrative="The column number to delete" stage="Column Name" /></inputs><onsuccess>000581d7-9978-4295-826f-a20472874878</onsuccess></stage><stage stageid="d0f8de6d-03ac-4a92-8658-0998d1849bdf" name="End" type="End"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Output Collection" narrative="A collection with a column removed" stage="Output Collection" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Message" /></outputs></stage><stage stageid="000581d7-9978-4295-826f-a20472874878" name="Remove Column" type="Code"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><loginhibit /><display x="15" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="BP Collection In" expr="[Input Collection]" /><input type="text" name="Column Name" expr="[Column Name]" /></inputs><outputs><output type="collection" name="BP Collection Out" stage="Output Collection" /><output type="text" name="Error Message" stage="Message" /><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>d0f8de6d-03ac-4a92-8658-0998d1849bdf</onsuccess><code><![CDATA[Try
	BP_Collection_Out = BP_Collection_In
	BP_Collection_Out.Columns.Remove(Column_Name)
	Success = True
Catch e as Exception
	Error_Message = e.ToString()
	Success = False
End Try
]]></code></stage><stage stageid="140b41b2-3138-4b5d-b5f3-4bddff6db48f" name="Input Collection" type="Collection"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><display x="120" y="-105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="1ae60809-2da8-468d-8d88-e605b185530b" name="Output Collection" type="Collection"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><display x="120" y="90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="787dae64-5d33-4783-84ff-db2365c12e31" name="Message" type="Data"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><display x="-180" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a3216578-e35c-4bf0-84db-80b9d3fe07e3" name="Success" type="Data"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><display x="-180" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="714ec185-fd95-4265-88e6-54eb452242b3" name="Column Name" type="Data"><subsheetid>df662579-558c-4cc9-88df-8c680b67b41d</subsheetid><display x="210" y="-105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="25782854-2b5d-4f7d-a1f4-671555060370" name="Remove Null Rows" type="SubSheetInfo"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><narrative>Deletes rows in which a given key field is blank.</narrative><display x="-180" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7b68a8ca-8280-464d-acac-807f219d226e" name="Set Column Names From First Row" type="SubSheetInfo"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><narrative>If you have a collection with the column names all in the first row, this will set the column names to the values in that row and then detete the first row.
Handy for collections read using Get Table</narrative><display x="-195" y="-105" w="270" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="966db302-1751-4a8a-bbbf-cbfc8ff28563" name="Start" type="Start"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" narrative="The collection with the column to rename" stage="Input Collection" /></inputs><onsuccess>5732b352-4376-4727-b423-13df1e00f900</onsuccess></stage><stage stageid="80cc4a73-fa55-4504-bf38-941a29fd4499" name="End" type="End"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="15" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Output Collection" narrative="The amended collection" stage="Output Collection" /></outputs></stage><stage stageid="5732b352-4376-4727-b423-13df1e00f900" name="Set Column Name" type="Code"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="collection" name="Output Collection" stage="Output Collection" /></outputs><onsuccess>1129bf72-f0d4-4c3a-8823-68de39f5138b</onsuccess><code><![CDATA[
'Input_Collection.Columns(3).ColumnName="NewColumnName"
'Output_Collection = Input_Collection

Dim iThisColumn as integer = -1
For Each Column As DataColumn In Input_Collection.Columns
   iThisColumn +=1
   Column.ColumnName=CStr(Input_Collection.Rows.Item(0).Item(iThisColumn))
Next
Output_Collection = Input_Collection

'If RowIndex < 0 OrElse Coll.Rows.Count <= RowIndex Then
'	Throw New ApplicationException("The supplied row index falls outside of the valid range.")
'End If

'If Not Coll.Columns.Contains(FieldName) Then
'   Throw New ApplicationException("The collection does not contain a field with the name '" & FieldName & "'")
'End If

'Value_Read = CStr(Coll.Rows(RowIndex)(FieldName))]]></code></stage><stage stageid="83beff52-ce08-4f4c-acdd-39a43fce3528" name="Input Collection" type="Collection"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><display x="120" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="0735b980-7ff2-49c5-a67b-41a6444db630" name="Output Collection" type="Collection"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><display x="120" y="105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="299628df-bec6-4f77-8b4a-c6bc38824e1c" name="Remove First Row" type="Action"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><narrative>First row was actually the header row, can now be deleted</narrative><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Output Collection&quot;" /></inputs><onsuccess>80cc4a73-fa55-4504-bf38-941a29fd4499</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Remove Row" /></stage><stage stageid="1129bf72-f0d4-4c3a-8823-68de39f5138b" name="Output Collection" type="LoopStart"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>299628df-bec6-4f77-8b4a-c6bc38824e1c</onsuccess><groupid>265b5de8-c5fa-44dc-bcd0-64db001c133a</groupid><looptype>ForEach</looptype><loopdata>Output Collection</loopdata></stage><stage stageid="35a49bfb-e611-4681-b332-cadbcfa74fc3" name="Output Collection" type="LoopEnd"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="-60" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>d0febcf9-b538-4995-85c1-02dddff5fb51</onsuccess><groupid>265b5de8-c5fa-44dc-bcd0-64db001c133a</groupid></stage><stage stageid="d0febcf9-b538-4995-85c1-02dddff5fb51" name="anchor1" type="Anchor"><subsheetid>b8e3b975-d485-49a3-b962-864d13a96e05</subsheetid><loginhibit /><display x="-60" y="120" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>80cc4a73-fa55-4504-bf38-941a29fd4499</onsuccess></stage><stage stageid="7b3c5ed5-f585-4240-a2ab-8cb996684c24" name="Set Column Names From Expected Collection" type="SubSheetInfo"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><narrative>Renames the fields of a collection to those of a collection containing expected field names.</narrative><display x="-180" y="-210" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ae4a6ef5-a22c-4292-8471-eb02cdd4b1cf" name="End" type="End"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Output Collection" narrative="The collection with the renamed column" stage="Output Collection" /></outputs></stage><stage stageid="130f8b77-3ec8-46c9-8826-e401399e4c92" name="Rename Column" type="Code"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /><input type="collection" name="Expected Fields/Columns" expr="[Expected Fields/Columns]" /></inputs><outputs><output type="collection" name="Output Collection" stage="Output Collection" /></outputs><onsuccess>ae4a6ef5-a22c-4292-8471-eb02cdd4b1cf</onsuccess><code><![CDATA[Dim iTotalColumns as integer = Expected_Fields_Columns.Rows.Count-1
Dim iThisColumn as integer = -1
For Each Column As DataColumn In Input_Collection.Columns
   If iThisColumn>=iTotalColumns Then Exit For
   iThisColumn +=1 
   Column.ColumnName=CStr(Expected_Fields_Columns.Rows.Item(iThisColumn).Item(0))
Next
Output_Collection = Input_Collection]]></code></stage><stage stageid="9e32e67d-d7f9-46b2-8df2-6fca9a395352" name="Input Collection" type="Collection"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><display x="-180" y="-75" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="c66d8d30-cef9-4cab-8ee8-2acb512a3129" name="Start" type="Start"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection fields will have been renamed." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" narrative="The collection with the column to rename" stage="Input Collection" /><input type="collection" name="Expected Fields/Columns" narrative="The expected column names" stage="Expected Fields/Columns" /></inputs><onsuccess>130f8b77-3ec8-46c9-8826-e401399e4c92</onsuccess></stage><stage stageid="c865f7af-a9f9-4fb9-88da-e04e43b0bac8" name="Note1" type="Note"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-180" y="-120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c29dd25d-3cf7-4435-ba56-6f735329a71a" name="Output Collection" type="Collection"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><display x="-180" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="235be3b3-8a37-4bac-b740-50cfcd6da05f" name="Note1" type="Note"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-180" y="105" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="688d2271-65ed-4be7-84b1-cbfe018c6777" name="Expected Fields/Columns" type="Collection"><subsheetid>87541f35-d834-4d99-8fd3-16ec994a9990</subsheetid><display x="-180" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><alwaysinit /><collectioninfo><field name="Column Name" type="text" /></collectioninfo></stage><stage stageid="df1f7e11-20da-4f67-a68c-bc7c03be861a" name="Fill Blanks" type="SubSheetInfo"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><narrative>Fills a collection that has empty values with empty text.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="7908b17c-920d-4114-9fa0-cd4f161c5185" name="Start" type="Start"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have its empty values filled with empty text." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Blanks" narrative="A collection with blank text fields" stage="Blanks" /></inputs><onsuccess>06913dc6-a17f-4d64-965d-7cb7642f486f</onsuccess></stage><stage stageid="544cc959-75ad-4b6c-a150-ce414ae50424" name="End" type="End"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><loginhibit /><display x="15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="No Blanks" narrative="The collection with empty string instead of blanks" stage="No Blanks" /></outputs></stage><stage stageid="34873761-d9a4-4a71-9c63-993645ca4e22" name="Blanks" type="Collection"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><display x="-195" y="0" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="5cfec416-7db4-4734-9a1f-76d62db9bbd9" name="No Blanks" type="Collection"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><display x="-195" y="105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="06913dc6-a17f-4d64-965d-7cb7642f486f" name="Fill Blanks" type="Code"><subsheetid>d1eee74f-1582-4c3e-96c8-b94f1535d7e1</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Blanks" expr="[Blanks]" /></inputs><outputs><output type="collection" name="No Blanks" stage="No Blanks" /></outputs><onsuccess>544cc959-75ad-4b6c-a150-ce414ae50424</onsuccess><code><![CDATA[try
  for each dr as datarow in blanks.rows
    for each c as datacolumn in blanks.columns
      if isdbnull(dr(c.columnname)) then
        dr(c.columnname) = ""
      end if
    next
  next
  no_blanks = blanks
catch e as exception

end try]]></code></stage><stage stageid="c491f60e-4aa7-4abb-a203-5a78c0b64469" name="End" type="End"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Output Collection" narrative="The given input collection with all the null rows removed" stage="Output Collection" /></outputs></stage><stage stageid="c8499a69-da78-40b1-9e30-3b2b66b78a63" name="Start" type="Start"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The rows with blank keys will have been deleted." /><condition narrative="" /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" narrative="The collection from which you want null rows to be removed" stage="Input Collection" /><input type="text" name="Key Field" narrative="The key field to check, if blank the row will be deleted" stage="Key Field" /></inputs><onsuccess>85077240-20a2-46ad-81ba-a1eca720ae81</onsuccess></stage><stage stageid="e14452d8-589d-478a-ab1b-309897b8560b" name="End" type="End"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Output Collection" narrative="The given input collection with all the null rows removed" stage="Output Collection" /></outputs></stage><stage stageid="13091eb3-458e-46d2-a20e-59eb5eb5d748" name="Input Collection" type="Collection"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="120" y="-105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6ab2855e-0511-49ff-ac26-c731dbf8c432" name="Output Collection" type="Collection"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="120" y="90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="cab44f8f-583a-4529-911c-392030a2dee3" name="Message" type="Data"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="-165" y="15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e1203642-ce03-48bd-ba00-aad2a0dcde1e" name="Success" type="Data"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="-165" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1478eda2-b43b-4609-aef4-ff3ad3c2a708" name="Key Field" type="Data"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="225" y="-105" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="85077240-20a2-46ad-81ba-a1eca720ae81" name="Remove Null rows from collection" type="Code"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><loginhibit /><narrative>can't loop through the core customer details table collection as some of the rows are NULL.</narrative><display x="15" y="-45" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="CCD Table In" expr="[Input Collection]" /><input type="text" name="Key Field" expr="[Key Field]" /></inputs><outputs><output type="collection" name="CCD Table Out" stage="Output Collection" /><output type="text" name="Error Message" stage="Message" /><output type="flag" name="Success" stage="Success" /></outputs><onsuccess>2e050fc0-fed0-49b4-bafc-a33a0aee5ad9</onsuccess><code><![CDATA[Try
	For Each row As DataRow in CCD_Table_In.Select( _
	 String.Format("[{0}] is null or trim([{0}]) = ''", Key_Field))
		row.Delete()
	Next

	CCD_Table_Out = CCD_Table_In
	Success = True

Catch ex as Exception
	Error_Message = ex.ToString()
	Success = False

End Try

]]></code></stage><stage stageid="9e92c3e9-666f-47a3-b5a4-712191368127" name="Remove dots from headers" type="SubSheetInfo"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><narrative>Collections with dots in the field names cannot be properly indexed so this functinon renames the headers so that the fields contain no dots.</narrative><display x="-165" y="-195" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9e9143b5-5aa7-475d-a944-466bfbc2c71d" name="Rename Column1" type="Code"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><loginhibit /><display x="0" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="collection" name="Output Collection" stage="Output Collection" /></outputs><onsuccess>ce865562-7be4-4739-95c5-3b5e05d7901f</onsuccess><code><![CDATA[For Each Column As DataColumn In Input_Collection.Columns
   Column.ColumnName=Microsoft.Visualbasic.Replace(Column.ColumnName,".","")
Next
Output_Collection = Input_Collection]]></code></stage><stage stageid="ce865562-7be4-4739-95c5-3b5e05d7901f" name="End" type="End"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><loginhibit /><display x="0" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Output Collection" narrative="The collection with the renamed column" stage="Output Collection" /></outputs></stage><stage stageid="c2200054-2838-45a0-a8b2-c1da235391b0" name="Input Collection" type="Collection"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><display x="-195" y="-75" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="c865c672-39f2-4b5d-b96c-f44c5f3b9a89" name="Start" type="Start"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have fields with no dots." /></postconditions><display x="0" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" narrative="The collection with the column to rename" stage="Input Collection" /></inputs><onsuccess>9e9143b5-5aa7-475d-a944-466bfbc2c71d</onsuccess></stage><stage stageid="02864eb4-432c-4b37-9199-c28dd7fe654b" name="Note1" type="Note"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-195" y="-120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="99cb4759-fd39-4084-a262-e2ac589fdc28" name="Output Collection" type="Collection"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="c1388967-ebc6-462c-bad7-66359084fab0" name="Note1" type="Note"><subsheetid>eb03a051-75a8-4093-a383-6c6fecfbb736</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-195" y="105" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="4e265aee-0021-418d-8655-61d995e170a0" name="Append Field (Text)" type="SubSheetInfo"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><narrative>Appends a field to a collection and allows you to provide a default value as text fot the field.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c8bd0a3b-3343-43fd-bef7-1414593f62b6" name="Field Name" type="Data"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ddaf3d76-462d-41ac-8cdd-92050ea01b79" name="Append Text" type="Code"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection" expr="[Collection In]" /><input type="text" name="Column" expr="[Field Name]" /><input type="text" name="Value" expr="[Value]" /></inputs><outputs><output type="collection" name="New Collection" stage="Collection Out" /></outputs><onsuccess>072e40e3-3858-4528-aa1b-7b4cfb7861f9</onsuccess><code><![CDATA[
If Not Collection.Columns.Contains(Column) Then
	Collection.Columns.Add(Column, Type.GetType("System.String"))
End If

For Each dr As System.Data.DataRow In Collection.Rows
	dr(Column) = Value
Next

New_Collection = Collection
]]></code></stage><stage stageid="7c2f4495-6f2c-4dc5-845c-58f3036c5ec9" name="Collection Out" type="Collection"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><display x="-195" y="120" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="8493982d-24c5-4d6b-96c0-060ed614f8c3" name="Collection In" type="Collection"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><display x="-195" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6542d3cd-7831-4ebb-93dc-09b64ff85bbf" name="Value" type="Data"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6c1475ad-07b2-4993-abb1-4060046ce8eb" name="Start" type="Start"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have a new field appended to it." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection" narrative="The collection to append a field to." stage="Collection In" /><input type="text" name="Field Name" narrative="The name of the new field." stage="Field Name" /><input type="text" name="Value" narrative="The value to be put in the new field." stage="Value" /></inputs><onsuccess>ddaf3d76-462d-41ac-8cdd-92050ea01b79</onsuccess></stage><stage stageid="072e40e3-3858-4528-aa1b-7b4cfb7861f9" name="End" type="End"><subsheetid>a474299b-5c1c-4873-a3af-4dd0d3bd03ff</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Appended Collection" narrative="The collection with field appended." stage="Collection Out" /></outputs></stage><stage stageid="4c0d7072-e36c-465b-89f0-fbe7e21e95fb" name="Append Field (Number)" type="SubSheetInfo"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><narrative>Appends a field to a collection and allows you to provide a default number value for the field.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="433e0a45-d9b6-48e5-b62f-67815cc1461a" name="Start" type="Start"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have the new field appended to it." /></postconditions><display x="30" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection" narrative="The collection to append a field to." stage="Collection In" /><input type="text" name="Field Name" narrative="The name of the new field." stage="Field Name" /><input type="number" name="Value" narrative="The value to be put in the new field." stage="Value" /></inputs><onsuccess>560df05e-a20c-4c85-addb-accc35d19f0e</onsuccess></stage><stage stageid="5dc78a95-36a2-4324-a366-ccd5f941ea7b" name="End" type="End"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><loginhibit /><display x="30" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Appended Collection" narrative="The collection with field appended." stage="Collection Out" /></outputs></stage><stage stageid="560df05e-a20c-4c85-addb-accc35d19f0e" name="Append Number" type="Code"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><loginhibit /><display x="30" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection" expr="[Collection In]" /><input type="text" name="Column" expr="[Field Name]" /><input type="number" name="Value" expr="[Value]" /></inputs><outputs><output type="collection" name="New Collection" stage="Collection Out" /></outputs><onsuccess>5dc78a95-36a2-4324-a366-ccd5f941ea7b</onsuccess><code><![CDATA[
If Not Collection.Columns.Contains(Column) Then
	Collection.Columns.Add(Column, Type.GetType("System.Decimal"))
End If

For Each dr As System.Data.DataRow In Collection.Rows
	dr(Column) = Value
Next

New_Collection = Collection
]]></code></stage><stage stageid="a8f65fc6-9524-4ba5-ab7c-4bf16b825bb8" name="Collection Out" type="Collection"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><display x="-180" y="120" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="1265e994-416c-4b2d-ab0c-c81e1288f072" name="Field Name" type="Data"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><display x="-180" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4ac81567-c224-4270-a0ef-e57562e06fb5" name="Collection In" type="Collection"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><display x="-180" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="f9a670a2-2e34-4e79-a184-369ddc70c75e" name="Value" type="Data"><subsheetid>65451129-b7a2-4c2f-a12d-9086bd314f53</subsheetid><display x="-180" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5979fe4e-6f4d-4683-8d7f-bb932ec88a2e" name="Rename Field" type="SubSheetInfo"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><narrative>Renames a field within a collection.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="5030c234-e021-4ff1-b9ea-751e186a63a8" name="Start" type="Start"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collections field will be renamed." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection In" narrative="The collection to rename a field in." stage="Collection In" /><input type="text" name="Field Name" narrative="The name of the existing field to rename." stage="Field Name" /><input type="text" name="New Name" narrative="The new name for the field." stage="New Name" /></inputs><onsuccess>278ed0f4-d7d0-4ca7-908e-55569a965852</onsuccess></stage><stage stageid="404be5b2-7ad7-429a-9e8b-b6a561112f47" name="End" type="End"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Collection Out" narrative="The collection with field renamed." stage="Collection Out" /></outputs></stage><stage stageid="67c49160-5821-48b0-82fd-371ecbaea386" name="Collection In" type="Collection"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><display x="-195" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="f0ef8f48-7f60-47fc-89b2-3aa04ef39792" name="Field Name" type="Data"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8c1db25c-d091-4900-8b9e-529d60df0f8f" name="Collection Out" type="Collection"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><display x="-195" y="105" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="278ed0f4-d7d0-4ca7-908e-55569a965852" name="Rename" type="Code"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection In" expr="[Collection In]" /><input type="text" name="Field_Name" expr="[Field Name]" /><input type="text" name="New Name" expr="[New Name]" /></inputs><outputs><output type="collection" name="Collection Out" stage="Collection Out" /></outputs><onsuccess>404be5b2-7ad7-429a-9e8b-b6a561112f47</onsuccess><code><![CDATA[
Collection_Out = Collection_In.Copy

For Each c As DataColumn in Collection_Out.Columns
	If c.ColumnName = Field_Name Then
		c.ColumnName = New_Name
		Exit For
	End If
Next
]]></code></stage><stage stageid="b2e64d6d-9ac8-43b9-aeed-e58e65d8067c" name="New Name" type="Data"><subsheetid>ccc0c027-8c9f-41f6-9ba6-af44eac6a9a9</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><alwaysinit /></stage><stage stageid="c935b0c8-a0cb-4251-9e63-af4ed27f9a91" name="Delete Field" type="SubSheetInfo"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><narrative>Deletes a field from a collection.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a7662efd-3d51-4d9a-adbc-1a2e626613e5" name="Start" type="Start"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collections field will have been removed." /></postconditions><display x="30" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection In" narrative="The collection to delete the field from." stage="Collection In" /><input type="text" name="Field Name" narrative="The field to delete." stage="Field Name" /></inputs><onsuccess>b52dad46-ca6d-4860-82c7-f1d9320f66bc</onsuccess></stage><stage stageid="4e6ae3ea-d232-4ff3-b93b-ab90f6e93c1b" name="End" type="End"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><loginhibit /><display x="30" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Collection Out" narrative="The collection with the field removed." stage="Collection Out" /></outputs></stage><stage stageid="4eb487df-f7e9-4146-a35f-e5e7c6461d01" name="Collection In" type="Collection"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><display x="-180" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="719f7d25-ec64-43bd-9466-c822213aa069" name="Field Name" type="Data"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><display x="-180" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0b32e1ce-deb0-4107-ac7c-c4af81ceedaf" name="Collection Out" type="Collection"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><display x="-180" y="105" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="b52dad46-ca6d-4860-82c7-f1d9320f66bc" name="Delete Column1" type="Code"><subsheetid>1d7b6202-d743-4485-9101-839f4651c406</subsheetid><loginhibit /><display x="30" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection In" expr="[Collection In]" /><input type="text" name="Field_Name" expr="[Field Name]" /></inputs><outputs><output type="collection" name="Collection Out" stage="Collection Out" /></outputs><onsuccess>4e6ae3ea-d232-4ff3-b93b-ab90f6e93c1b</onsuccess><code><![CDATA[
Collection_Out = Collection_In.Copy

For Each c As DataColumn in Collection_Out.Columns
	If c.ColumnName = Field_Name Then
		Collection_Out.Columns.Remove(c)
		Exit For
	End If
Next
]]></code></stage><stage stageid="63e447be-76ae-4566-a7e9-ead3373b7fe6" name="Merge Collection" type="SubSheetInfo"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><narrative>Merges two collections with different structures (and where the field names across both collections are unique) and forms a single collection with a combination  of the two structures and associated data values.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d427bb44-b573-475a-aa7d-176f2803e033" name="Start" type="Start"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><loginhibit /><preconditions><condition narrative="The merge will fail if both collections contain any field names which are identical." /></preconditions><postconditions><condition narrative="The collections will have been merged." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection 1" narrative="The first collection to be merged." stage="Collection 1" /><input type="collection" name="Collection 2" narrative="The second collection to be merged." stage="Collection 2" /></inputs><onsuccess>6459a0e3-6f86-4efa-8b87-a9eb0b9a8460</onsuccess></stage><stage stageid="570e4b26-4aa8-48ac-b435-1ca8fe10f2cd" name="End" type="End"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Collection 3" narrative="The resulting merged collection." stage="Collection 3" /></outputs></stage><stage stageid="6459a0e3-6f86-4efa-8b87-a9eb0b9a8460" name="Merge" type="Code"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="c1" expr="[Collection 1]" /><input type="collection" name="c2" expr="[Collection 2]" /></inputs><outputs><output type="collection" name="c3" stage="Collection 3" /></outputs><onsuccess>570e4b26-4aa8-48ac-b435-1ca8fe10f2cd</onsuccess><code><![CDATA[
For Each c As DataColumn in c2.Columns
	c1.Columns.Add(CloneColumn(c))
Next

For r As Integer = 0 To c1.Rows.Count - 1
	If r < c2.Rows.Count Then
		For Each c As DataColumn in c2.Columns
			c1.Rows(r)(c.ColumnName) = c2.Rows(r)(c.ColumnName)
		Next
	Else
		Exit For
	End If
Next

c3 = c1]]></code></stage><stage stageid="c325b6be-e358-4eab-8e9b-0b74a98490f3" name="Collection 1" type="Collection"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><display x="-195" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="61e7bd9a-18d4-475d-b131-95dc839d1518" name="Collection 2" type="Collection"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><display x="-195" y="45" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="3ff4ed5f-abbc-4668-9ebb-816c8f0884db" name="Collection 3" type="Collection"><subsheetid>cd8fefb9-4622-4ea7-8287-e64b86d7e513</subsheetid><display x="-195" y="120" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="741d8892-31ef-497b-a1ab-dca99ebd1f06" name="Split Collection" type="SubSheetInfo"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><narrative>Splits a collection into two colllections containing the fields as defined by templates.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="61860248-5b8d-41de-8e28-092ca8b989e5" name="Split" type="Code"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="300" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="c1" expr="[Collection 1]" /><input type="collection" name="c2t" expr="[Collection 2 Template]" /><input type="collection" name="c3t" expr="[Collection 3 Template]" /></inputs><outputs><output type="collection" name="c2" stage="Collection 2" /><output type="collection" name="c3" stage="Collection 3" /></outputs><onsuccess>e08e6b18-850a-427c-9eba-5065c9c619dd</onsuccess><code><![CDATA[
c2 = c2t.Clone()

c3 = c3t.Clone()

Dim r2, r3 As DataRow
Dim bAdd2, bAdd3 As Boolean

For Each r1 As DataRow In c1.Rows

	r2 = c2.NewRow()
	r3 = c3.NewRow()
	bAdd2 = False
	bAdd3 = False

	For Each c As DataColumn In c1.Columns

		If c2.Columns.Contains(c.ColumnName) Then
			r2(c.ColumnName) = r1(c.ColumnName)
			bAdd2 = True
		End If
		If c3.Columns.Contains(c.ColumnName) Then
			r3(c.ColumnName) = r1(c.ColumnName)
			bAdd3 = True
		End If

	Next

	If bAdd2 Then
		c2.Rows.Add(r2)
	End If
	If bAdd3 Then
		c3.Rows.Add(r3)
	End If

Next]]></code></stage><stage stageid="d00a67c4-977f-49ab-ac41-225ebdb3ad8d" name="Collection 3 Template" type="Collection"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="105" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="e2ce96fd-e590-46fa-a95d-effcca153782" name="Start" type="Start"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><preconditions><condition narrative="None." /><condition narrative="" /></preconditions><postconditions><condition narrative="Collections will be split." /><condition narrative="" /></postconditions><display x="15" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection 1" stage="Collection 1" /><input type="collection" name="Collection 2 Template" stage="Collection 2 Template" /><input type="collection" name="Collection 3 Template" stage="Collection 3 Template" /></inputs><onsuccess>2c7d51f8-a340-4629-9d93-0526f6ed07cc</onsuccess></stage><stage stageid="e08e6b18-850a-427c-9eba-5065c9c619dd" name="End" type="End"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="105" y="300" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Collection 2" stage="Collection 2" /><output type="collection" name="Collection 3" stage="Collection 3" /></outputs></stage><stage stageid="67449419-0f6c-463b-bf1a-2d94b16c5be3" name="Collection 2" type="Collection"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="285" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="78bbd50d-b3cd-4066-80e3-d4cb236662b8" name="Collection 3" type="Collection"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="345" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="2c7d51f8-a340-4629-9d93-0526f6ed07cc" name="Count Template 2 Rows" type="Action"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Collection 2 Template&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Row Count" /></outputs><onsuccess>2dbb3bb5-1526-4f1c-818d-aa4eb0acc677</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="5a6c9426-a48f-4861-b7fe-b020ea824cc5" name="Row Count" type="Data"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="165" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="2dbb3bb5-1526-4f1c-818d-aa4eb0acc677" name="Rows?" type="Decision"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Row Count]&gt;0" /><ontrue>17c0ae90-3784-40c5-816f-a0dfb4c97eab</ontrue><onfalse>6a04f2d4-b2f3-4afd-b837-ddaf0d40a9d5</onfalse></stage><stage stageid="17c0ae90-3784-40c5-816f-a0dfb4c97eab" name="Count Template 3 Rows" type="Action"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Collection 3 Template&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Row Count" /></outputs><onsuccess>525e699d-df7d-4c61-b5fd-0ae540b94a94</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="525e699d-df7d-4c61-b5fd-0ae540b94a94" name="Rows?" type="Decision"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Row Count]&gt;0" /><ontrue>01cbd6ed-952e-4ae8-8420-496581701364</ontrue><onfalse>c7cd5499-3bd2-49c8-a5e0-2c190b350abe</onfalse></stage><stage stageid="74cfea1c-af9f-4c0b-86aa-ac76097c3940" name="Collection 1" type="Collection"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="2af4b9c5-d3f3-4ecc-9a3a-4b52f1cee481" name="Collection 2 Template" type="Collection"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="-195" y="45" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="c7cd5499-3bd2-49c8-a5e0-2c190b350abe" name="System Exception" type="Exception"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><display x="105" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="System Exception" detail="&quot;Template collection cannot be empty&quot;" /></stage><stage stageid="6a04f2d4-b2f3-4afd-b837-ddaf0d40a9d5" name="anchor1" type="Anchor"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="105" y="0" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>c7cd5499-3bd2-49c8-a5e0-2c190b350abe</onsuccess></stage><stage stageid="01cbd6ed-952e-4ae8-8420-496581701364" name="Count Data Rows" type="Action"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="180" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Collection Name" narrative="The name of the collection to act upon" expr="&quot;Collection 1&quot;" /></inputs><outputs><output type="number" name="Count" narrative="The number of rows counted in the collection" stage="Row Count" /></outputs><onsuccess>69ae2e43-547a-4cef-abc9-a57284282b82</onsuccess><resource object="Blueprism.AutomateProcessCore.clsCollectionActions" action="Count Rows" /></stage><stage stageid="69ae2e43-547a-4cef-abc9-a57284282b82" name="Rows?" type="Decision"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="15" y="240" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Row Count]&gt;0" /><ontrue>61860248-5b8d-41de-8e28-092ca8b989e5</ontrue><onfalse>4cffbd60-ffb8-4da0-aa50-3639bc6ff8ef</onfalse></stage><stage stageid="4cffbd60-ffb8-4da0-aa50-3639bc6ff8ef" name="Assign Outputs" type="Code"><subsheetid>76943739-36b9-46bc-8f95-e1b6342bc8a6</subsheetid><loginhibit /><display x="105" y="240" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="c2t" expr="[Collection 2 Template]" /><input type="collection" name="c3t" expr="[Collection 3 Template]" /></inputs><outputs><output type="collection" name="c2" stage="Collection 2" /><output type="collection" name="c3" stage="Collection 3" /></outputs><onsuccess>e08e6b18-850a-427c-9eba-5065c9c619dd</onsuccess><code><![CDATA[
c3 = c3t

c2 = c2t
]]></code></stage><stage stageid="8140b508-3840-4291-8122-7d9633f50e96" name="Collection In" type="Collection"><subsheetid>d8e5be7a-93aa-4322-99bf-00edea37bbc2</subsheetid><display x="-180" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="cc074354-584f-4eba-ab53-2f96462259a0" name="Filter Collection" type="SubSheetInfo"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><narrative>Filters a collection using the given query.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="4ee491db-1747-4f76-a969-78ebc05942c3" name="Start" type="Start"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will be filtered." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection In" narrative="The collection to filter." stage="Collection In" /><input type="text" name="Filter" narrative="The filter query." stage="Filter" /></inputs><onsuccess>0c063487-d7ee-42db-8059-92687b655e7d</onsuccess></stage><stage stageid="bda88544-a5a8-4bf6-9c9b-c645f76b7fed" name="End" type="End"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Collection Out" narrative="The filtered collection." stage="Collection Out" /></outputs></stage><stage stageid="0c063487-d7ee-42db-8059-92687b655e7d" name="Filter Collection1" type="Code"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection In" expr="[Collection In]" /><input type="text" name="Select Condition" expr="[Filter]" /></inputs><outputs><output type="collection" name="Collection Out" stage="Collection Out" /></outputs><onsuccess>bda88544-a5a8-4bf6-9c9b-c645f76b7fed</onsuccess><code><![CDATA[Dim NewRow As DataRow

Collection_Out = Collection_In.Clone

For Each parentRow As DataRow In Collection_In.Select(Select_Condition)
	NewRow = Collection_Out.NewRow
	For Each c As DataColumn In NewRow.Table.Columns
		NewRow(c.ColumnName) = parentRow(c.ColumnName)
	Next
	Collection_Out.Rows.Add(NewRow)
Next

NewRow = Nothing
Collection_In = Nothing]]></code></stage><stage stageid="ab9df972-dcc0-4384-ae57-8f0207f70978" name="Collection Out" type="Collection"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><display x="-195" y="105" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="ee8d1e79-1554-41d5-9dec-d9cb9153d483" name="Collection In" type="Collection"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><display x="-195" y="-15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="7b601fa9-308d-4e40-8366-62ebe909f792" name="Filter" type="Data"><subsheetid>a9f3108d-ca87-4551-b567-9c64ef05cf0c</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6f60641e-4454-45d1-b678-62b0a6c6b784" name="Start" type="Start"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><loginhibit /><display x="-15" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Start Row" narrative="The row index to start copying from. The index is from 0 to N-1 (where N is the total number of rows in the collection)." stage="Start Row" /><input type="number" name="Number of Rows to Copy" narrative="The number of rows to copy." stage="Number of Rows to Copy" /><input type="collection" name="Source Collection" narrative="The collection to copy." stage="Source Collection" /></inputs><onsuccess>25337bba-f357-42a8-bc61-876a9582d5d0</onsuccess></stage><stage stageid="002b5c58-ec2b-4e02-91e5-68fbeffe2b84" name="End" type="End"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><loginhibit /><display x="-15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Output Collection" narrative="The copied collection." stage="Output Collection" /></outputs></stage><stage stageid="1cd8f0a3-e382-4ad5-8948-7f0dc5cd17cd" name="Start Row" type="Data"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="60" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="abc78fcd-9654-47c6-9aa9-5cd8f505bd60" name="Number of Rows to Copy" type="Data"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="135" y="-120" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="c3aa2821-e68a-4985-9fd7-e0330638a935" name="Source Collection" type="Collection"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="255" y="-120" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="25337bba-f357-42a8-bc61-876a9582d5d0" name="Copy Rows1" type="Code"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><loginhibit /><display x="-15" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Source Collection" expr="[Source Collection]" /><input type="number" name="Start Row" expr="[Start Row]" /><input type="number" name="Number of Rows to Copy" expr="[Number of Rows to Copy]" /></inputs><outputs><output type="collection" name="Output Collection" stage="Output Collection" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>ff821741-f1ec-47ff-bd26-00c56a44a6c7</onsuccess><code><![CDATA[Try
	If Start_Row < 0 Then
		Throw New ApplicationException("Start Row must be at least zero.")
	End If
	Dim LastIndex As Integer = Source_Collection.Rows.Count -1
	If Start_Row > LastIndex Then
		Throw New ApplicationException("Start Row must not point beyond the end of the collection.")
	End If
	If Start_Row + Number_of_Rows_to_Copy -1 > LastIndex Then
		Throw New ApplicationException("The number of requested rows extends beyond the end of the collection (based on a start row of " & Start_Row.ToString() & ").")
	End If

	'Set up the new collection with columns
	Output_Collection = Source_Collection.Clone()

	'copy the requested rows one by one
	For I As integer = Start_Row To Start_Row + Number_of_Rows_to_Copy - 1
		Dim Values(Source_Collection.Columns.Count - 1) As Object
		For J As Integer = 0 To Source_Collection.Columns.Count - 1
			Values(J) = Source_Collection.Rows(I)(J)
		Next
		Output_collection.Rows.Add(Values)
	Next	
	
	Success = True
Catch Ex As Exception
	Success = False
	Error_Message = Ex.ToString()
End Try]]></code></stage><stage stageid="33698fa1-b8d8-467c-bb0d-b8e838d42c69" name="Output Collection" type="Collection"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="-180" y="45" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="4f882206-da67-4422-ac01-a53a5d765354" name="Success" type="Data"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="60" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6551589d-b7f2-48b7-a867-b398647d0180" name="Error Message" type="Data"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="120" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ff821741-f1ec-47ff-bd26-00c56a44a6c7" name="Success?" type="Decision"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><loginhibit /><display x="-15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>002b5c58-ec2b-4e02-91e5-68fbeffe2b84</ontrue><onfalse>fd5c51f5-e900-44ce-a169-84565580d402</onfalse></stage><stage stageid="fd5c51f5-e900-44ce-a169-84565580d402" name="System Exception" type="Exception"><subsheetid>cdf2a7f1-a351-441a-8d36-bc92af66650a</subsheetid><display x="90" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="System Exception" detail="[Error Message]" /></stage><stage stageid="c6165073-bfc9-495f-98e5-62a224f52226" name="Start" type="Start"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collections will be combined." /></postconditions><display x="15" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Main Collection" narrative="The collection to append to." stage="Main Collection" /><input type="collection" name="Collection to Append" narrative="The collection to append." stage="Collection to Append" /></inputs><onsuccess>77e19cde-e0fa-40aa-8bea-05c4743275c2</onsuccess></stage><stage stageid="5d1a3d8d-2e99-49b5-9863-6a866e2e03dd" name="End" type="End"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><loginhibit /><display x="15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Combined Collection" narrative="The combined collection." stage="Combined Collection" /></outputs></stage><stage stageid="e3a95b76-e1ba-4bf1-92c1-653ae937120a" name="Main Collection" type="Collection"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="90" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="320afdfe-675f-44a8-b563-5cf2cf3212d3" name="Collection to Append" type="Collection"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="150" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="77e19cde-e0fa-40aa-8bea-05c4743275c2" name="Combine Collections" type="Code"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Main Collection" expr="[Main Collection]" /><input type="collection" name="Collection to Append" expr="[Collection to Append]" /></inputs><outputs><output type="collection" name="Combined Collection" stage="Combined Collection" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>35415fae-0f6d-4f78-b7b9-b39a6e3095ff</onsuccess><code><![CDATA[Success = False

If Main_Collection.Columns.Count > 0 AndAlso Main_Collection.Columns.Count <> Collection_to_Append.Columns.Count Then
	Error_Message = "Field definitions do not match - the number of columns in each is different."
	Exit Sub
End If

For Each Col1 As DataColumn In Main_Collection.Columns

	If Not Collection_to_Append.Columns.Contains(Col1.ColumnName) Then
		Error_Message = "The Main Collection does not contain '" & Col1.ColumnName & "'"
		Exit Sub
	End If

	If Collection_to_Append.Columns(Col1.ColumnName).DataType.Name <> Col1.DataType.Name Then
		Error_Message = "The data type of '" & Col1.ColumnName & "' do not match."
		Exit Sub
	End If

Next

If Main_Collection.Columns.Count = 0 Then
	Combined_Collection = Collection_to_Append
Else
	'We can now assume that fields match and start copying rows
	For Each R As DataRow in Collection_to_Append.Rows
		Main_Collection.ImportRow(R)
	Next
	Combined_Collection = Main_Collection
End If

Success = True]]></code></stage><stage stageid="d0521477-9847-4a70-834b-9c1d315bd817" name="Combined Collection" type="Collection"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="-90" y="75" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="35415fae-0f6d-4f78-b7b9-b39a6e3095ff" name="Success?" type="Decision"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><loginhibit /><display x="15" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>5d1a3d8d-2e99-49b5-9863-6a866e2e03dd</ontrue><onfalse>e4269f55-7633-4d19-9ebf-299956a4a5ec</onfalse></stage><stage stageid="e4269f55-7633-4d19-9ebf-299956a4a5ec" name="System Exception" type="Exception"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="120" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="System Exception" detail="[Error Message]" /></stage><stage stageid="7923c865-f484-411d-815a-24fe9832f941" name="Success" type="Data"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="90" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="710fce6c-64f2-4e2d-8c89-9c2c41b9e9cb" name="Error Message" type="Data"><subsheetid>51f694a8-5305-4a38-9b41-a98998f2f7ca</subsheetid><display x="150" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bdd84939-c1c2-4ec3-9ec2-f19a6b55f056" name="Remove Empty Rows" type="SubSheetInfo"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><narrative>Removes empty rows from a collection.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="46ac86fc-42a2-49f4-a2be-86a452176e2b" name="Start" type="Start"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will have empty rows removed." /></postconditions><display x="-15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection In" narrative="The collection to remove empty rows from" stage="Collection In" /></inputs><onsuccess>6c450e6a-55ae-4382-a419-e4c6d59fc580</onsuccess></stage><stage stageid="0e663c5b-fb8a-4f15-999d-feb951956864" name="End" type="End"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><loginhibit /><display x="-15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Collection Out" narrative="The collection with the empty rows removed" stage="Collection Out" /></outputs></stage><stage stageid="613bed47-0c41-4155-93a3-5b31823f6048" name="Collection In" type="Collection"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><display x="60" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="af6c216c-aac3-4b4e-b7cb-bbf0a7863c49" name="Collection Out" type="Collection"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><display x="60" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="6c450e6a-55ae-4382-a419-e4c6d59fc580" name="Remove empty rows" type="Code"><subsheetid>fa6ed646-8ae1-479e-9845-b1dc9ac3b560</subsheetid><loginhibit /><display x="-15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection In" expr="[Collection In]" /></inputs><outputs><output type="collection" name="Collection Out" stage="Collection Out" /></outputs><onsuccess>0e663c5b-fb8a-4f15-999d-feb951956864</onsuccess><code><![CDATA[
Dim bRemove as Boolean
Dim iRow as integer
' Loop through each row
For iRow = Collection_In.Rows.Count - 1 to 0 step -1
'For each Row as DataRow in Collection_In.Rows
	bRemove=True
	' Loop through every column for this row
	For each Column as DataColumn in Collection_In.Columns
		if Trim(Collection_In.Rows(iRow)(Column.ColumnName).ToString()) & "" <> "" then
			bRemove=False
			exit for
		end if
	Next

	if bRemove=True then
		Collection_In.Rows.Remove(Collection_In.Rows(iRow))
	end if
Next

Collection_Out = Collection_In.Copy]]></code></stage><stage stageid="28f98de9-8408-4312-9e37-37197c2d8822" name="Transpose Collection" type="SubSheetInfo"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><narrative>Creates a new collection with the fields Name and Value and for each row in the original collection creates an entry for each column.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="26ce26e2-1a34-4a20-97d8-34ab15954720" name="Start" type="Start"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The collection will be transposed." /></postconditions><display x="30" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection" narrative="The collection to transpose." stage="Collection In" /></inputs><onsuccess>c3e45cac-9a76-4b70-a119-ffed9ceeaeac</onsuccess></stage><stage stageid="c9852e45-8999-4b73-a581-4a3f66b95b3a" name="End" type="End"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><loginhibit /><display x="30" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Appended Collection" narrative="The transposed collection." stage="Collection Out" /></outputs></stage><stage stageid="c3e45cac-9a76-4b70-a119-ffed9ceeaeac" name="Transpose" type="Code"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><loginhibit /><display x="30" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Collection" expr="[Collection In]" /></inputs><outputs><output type="collection" name="New Collection" stage="Collection Out" /></outputs><onsuccess>c9852e45-8999-4b73-a581-4a3f66b95b3a</onsuccess><code><![CDATA[
New_Collection = GetDataTable("Name,Value", "System.String,System.String")
Dim New_Row As System.Data.DataRow

For Each r As System.Data.DataRow In Collection.Rows
	For Each c As System.Data.DataColumn In Collection.Columns
		New_Row = New_Collection.NewRow()
		New_Row("Name") = c.ColumnName
		New_Row("Value") = GetStringValue(r, c.ColumnName)
		New_Collection.Rows.Add(New_Row)
	Next
Next
]]></code></stage><stage stageid="d2f68cb8-90cf-4414-8554-daf4fa4c9f29" name="Collection Out" type="Collection"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><display x="-180" y="60" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="99b09a03-6901-47ee-af4d-d43bfcf3bb42" name="Collection In" type="Collection"><subsheetid>a0cf6615-20c0-4910-9990-0f79f5f30bca</subsheetid><display x="-180" y="0" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="90d519f8-3075-478e-a49f-b681d1ddd033" name="Field Exists" type="SubSheetInfo"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><narrative>Finds out whether the collection contatins a given field.</narrative><display x="-135" y="-120" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="8605b0b2-ff16-473b-ba5d-1956390f48bd" name="Start" type="Start"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><display x="75" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" narrative="The collection to check." stage="Input Collection" /><input type="text" name="Field" narrative="The field to check for." stage="Field" /></inputs><onsuccess>da5abfb8-f52a-4a03-8f9f-ec5e42dd4566</onsuccess></stage><stage stageid="26b8ca01-8895-483f-93ef-66df5bbb0a34" name="End" type="End"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="75" y="255" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Exists" narrative="True if the collection contains the field." stage="Exists" /></outputs></stage><stage stageid="da5abfb8-f52a-4a03-8f9f-ec5e42dd4566" name="Get Collection Fields" type="SubSheet"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="75" y="-30" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="collection" name="Collection Fields" stage="Field Names" /></outputs><onsuccess>470c6c27-3ed4-43b7-8c01-3fc7415ec55e</onsuccess><processid>e277cc2b-72b8-47e9-8a1b-e8530eb19a09</processid></stage><stage stageid="a910c0ad-5130-4073-8f3a-8cf76bc7d74e" name="Input Collection" type="Collection"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><display x="-135" y="15" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="66e1609e-c3e7-4e35-82df-90254a0d842f" name="Field" type="Data"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><display x="-135" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="470c6c27-3ed4-43b7-8c01-3fc7415ec55e" name="Field Names" type="LoopStart"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="75" y="45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>eb7af2be-1265-40b6-8ea7-89fdda2b0ab1</onsuccess><groupid>755a928d-1109-4393-b44a-e265a1395a22</groupid><looptype>ForEach</looptype><loopdata>Field Names</loopdata></stage><stage stageid="54fa6a7b-f874-43d4-ac4a-4c16f28d1a9f" name="Field Names" type="LoopEnd"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="75" y="195" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>26b8ca01-8895-483f-93ef-66df5bbb0a34</onsuccess><groupid>755a928d-1109-4393-b44a-e265a1395a22</groupid></stage><stage stageid="15f784c0-4879-4a2e-ab6f-c44f5c384d85" name="Field Names" type="Collection"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><display x="-135" y="120" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Field Name" type="text" /><field name="Data Type" type="text" /></collectioninfo></stage><stage stageid="905724f1-237f-4641-9511-289841ec3498" name="Exists" type="Data"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><display x="-135" y="255" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="eb7af2be-1265-40b6-8ea7-89fdda2b0ab1" name="Match?" type="Decision"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="75" y="120" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Field Names.Field Name] = Trim([Field])" /><ontrue>c4532590-c3c0-4014-98f4-bc3e1f30e5df</ontrue><onfalse>54fa6a7b-f874-43d4-ac4a-4c16f28d1a9f</onfalse></stage><stage stageid="d656772f-8ec9-4848-8f30-a4bda4f01837" name="anchor2" type="Anchor"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="210" y="255" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>26b8ca01-8895-483f-93ef-66df5bbb0a34</onsuccess></stage><stage stageid="c4532590-c3c0-4014-98f4-bc3e1f30e5df" name="Exists" type="Calculation"><subsheetid>4d41bfc8-e552-41ae-9e45-65dc3d1f7276</subsheetid><loginhibit /><display x="210" y="120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>d656772f-8ec9-4848-8f30-a4bda4f01837</onsuccess><calculation expression="True" stage="Exists" /></stage><stage stageid="2e050fc0-fed0-49b4-bafc-a33a0aee5ad9" name="Success?" type="Decision"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><loginhibit /><display x="15" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success]" /><ontrue>c491f60e-4aa7-4abb-a203-5a78c0b64469</ontrue><onfalse>510a1b6e-59d7-40a0-8886-483ef66093e9</onfalse></stage><stage stageid="510a1b6e-59d7-40a0-8886-483ef66093e9" name="FAIL" type="Exception"><subsheetid>3a772458-463d-46cf-8451-6cf5b4aeae30</subsheetid><display x="120" y="15" w="30" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="UtilityException" detail="&quot;Error occurred removing null rows: &quot; &amp; [Message]" /></stage></process></object>
        <object id="3a5f7760-1621-4a03-bd1e-c7477b5a6de4" name="Utility - File Management" xmlns="http://www.blueprism.co.uk/product/process"><process name="Utility - File Management" version="6.6.0.15260" bpversion="6.6.0.15260" narrative="Utility methods for interacting with the file System." byrefcollection="true" type="object" runmode="Background"><appdef><element name="Application Root"><id>b30f5d67-5c3c-49c9-8f9b-66d573097498</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="9a74af4c-280a-4e30-bdbb-21295b6256ca" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>149</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="1e3c209b-a109-46a0-9ff0-e2dc6b8791fb" type="Normal" published="True"><name>Configure</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="8043916d-2ef9-45b8-ab66-f4c20ef1b8e3" type="Normal" published="False"><name>Raise Exception If Appropriate</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea" type="Normal" published="True"><name>Download File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="3a12dbad-57fd-45a4-b859-62df514a34d3" type="Normal" published="True"><name>Get Files</name><view><camerax>106</camerax><cameray>16</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0bafee17-a81a-40f0-9b6b-80b78142dd87" type="Normal" published="True"><name>Get Folders</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="60b8a01d-1f74-4169-b192-5e363a7b5e61" type="Normal" published="True"><name>File Exists</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="20e6a636-d89b-4c08-b90d-8852894005a4" type="Normal" published="True"><name>Directory Exists</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="1ff30a41-e177-40c5-a756-a6b466004f32" type="Normal" published="True"><name>Create Directory</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d68f192f-eeb7-420e-b156-9636503b6082" type="Normal" published="True"><name>Delete Directory</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8" type="Normal" published="True"><name>Sub Directory Exists</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="b3050915-ad2e-446e-a1d6-99d11506f55e" type="Normal" published="True"><name>Split Path</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="c80dea92-57e8-4e2e-8df4-f3ee6ceeb717" type="Normal" published="True"><name>Combine Path</name><view><camerax>202</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ed509af2-4b4a-447d-8196-18105ed12739" type="Normal" published="True"><name>Delete Files</name><view><camerax>106</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="70940cba-8680-4eb9-8066-9e383fc5b39b" type="Normal" published="True"><name>Delete File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e9dd304c-7d26-40f5-b193-eef36f0a370c" type="Normal" published="True"><name>Copy File</name><view><camerax>49</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="85156833-c61c-4c78-916f-0b75a9a83e8d" type="Normal" published="True"><name>Move File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="7ca00106-fe4e-46c0-bffc-0dda1561434f" type="Normal" published="True"><name>Get File Size</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d2530b0d-5530-4692-8a60-1f91d1c5a9c9" type="Normal" published="True"><name>Append to Text File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="8eb61369-ddab-4205-9a55-81054c2e4afb" type="Normal" published="True"><name>Read All Text from File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="6a9cff0d-c7c5-440a-bd8d-0007e15eae4d" type="Normal" published="True"><name>Read Lines From File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="602b7aad-2626-40ba-8c4b-1ec926ae9098" type="Normal" published="True"><name>Write Text File</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="842c79f8-aa64-4781-ad18-3982e21f0fd1" type="Normal" published="True"><name>Write Binary Data</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="f7fa43ec-67e2-4acb-8d13-ced3c5027761" type="Normal" published="True"><name>Get CSV Text As Collection</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="40c6e605-9948-429a-ac84-d2810bca75fc" type="Normal" published="True"><name>Get Special Folder Path</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="d8c547cc-60d0-459b-876f-90bf696a5757" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>807e7d33-91e2-4241-a85e-ea0718fc487d</onsuccess></stage><stage stageid="807e7d33-91e2-4241-a85e-ea0718fc487d" name="End" type="End"><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1a8c9ebd-54e1-442f-a6c7-e87df3b59232" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><references><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Data</import><import>System.IO</import><import>System.XML</import><import>System.Diagnostics</import><import>Microsoft.VisualBasic</import><import>System.Data</import><import>system.text.regularexpressions</import><import>System.Data.OleDB</import></imports><language>visualbasic</language><globalcode><![CDATA[
]]></globalcode><code><![CDATA[Public Function GetDataTable(ByVal ColumnNamesCSV As String, ByVal ColumnTypesCSV As String) As DataTable

	Dim objTable As DataTable
	Dim objColumn As DataColumn
	Dim aColumnNames As String() = ColumnNamesCSV.Split(",")
	Dim aColumnTypes As String() = ColumnTypesCSV.Split(",")

	Try
		objTable = New DataTable
		For i As Integer = 0 To aColumnNames.Length - 1
			objColumn = New DataColumn 
			objColumn.DataType = System.Type.GetType(aColumnTypes(i).Trim)
			If objColumn.DataType = GetType(DateTime) Then
				objColumn.DateTimeMode = DataSetDateTime.Utc
			End If
			objColumn.ColumnName = aColumnNames(i).Trim
			objTable.Columns.Add(objColumn)
		Next
		
	Catch e As Exception
		objTable = nothing	
	End Try

	Return objTable

End Function

]]></code></stage><stage stageid="0bf7814a-647b-4bcb-b6a6-3d24dfd5b736" name="Clean Up" type="SubSheetInfo"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0c56e2f8-68ce-48a3-97ad-81e1f076e9ce" name="new" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="07048754-58c7-4201-9869-e206f1d6c32a" name="Get Files" type="SubSheetInfo"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><narrative>Gets all files in the specified folder matching the supplied file type pattern string.

Patterns - A comma-separated list of file patterns identifying the type(s) of files sought. Eg "*.jpg, *.png" retrieves all jpg and png files. The pattern "*.*" will return all files. It does not matter whether you leave a space between each pattern, or not. Where a comma is required in a file pattern it should be escaped out using the backslash character, e.g. a pattern of "*\,November.xlsx" will return all files that end with ",November.xlsx"</narrative><display x="-195" y="-105" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="8448350e-b6a9-4a15-a3d0-501c4967c0f9" name="Start" type="Start"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="All matching files will be returned." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Folder" narrative="The folder in which to look for files" stage="Folder" /><input type="text" name="Patterns CSV" narrative="The comma seperated list of wildcard patterns" stage="Patterns CSV" /></inputs><onsuccess>acbbbddf-8b42-4353-8b0a-83eaeb216a63</onsuccess></stage><stage stageid="acbbbddf-8b42-4353-8b0a-83eaeb216a63" name="Get Files" type="Code"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Folder" expr="[Folder]" /><input type="text" name="Patterns CSV" expr="[Patterns CSV]" /></inputs><outputs><output type="collection" name="Files" stage="Files" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>9cdf0f78-05d1-44d4-80a0-9f78ca0b22ae</onsuccess><code><![CDATA[
Dim objTable As DataTable
Dim objRow As DataRow
Dim aFiles As FileInfo()
Dim aPatterns As String()
Dim oDirectory As New DirectoryInfo(Folder)

Try

	'Create a data table to output as a collection
	objTable = GetDataTable( _
		"Path," _
		& "Folder," _
		& "Name," _
		& "Extension," _
		& "Created," _
		& "Last Accessed," _
		& "Last Written," _
		& "Read Only," _
		& "Bytes", _
		"System.String," _
		& "System.String," _
		& "System.String," _
		& "System.String," _
		& "System.DateTime," _
		& "System.DateTime," _
		& "System.DateTime," _
		& "System.Boolean," _
		& "System.Double")
		
	Patterns_CSV = Patterns_CSV.replace("\,", "?")
	aPatterns = Patterns_CSV.split(",")

	For each sPattern As String in aPatterns
		sPattern = sPattern.replace("?", ",")
		aFiles = oDirectory.GetFiles(sPattern.Trim)
		For each oFile as FileInfo in aFiles
			objRow = objTable.NewRow()
			objRow("Path") = oFile.FullName
			objRow("Folder") = oFile.DirectoryName
			objRow("Name") = oFile.Name
			objRow("Extension") = oFile.Extension
			objRow("Created") = oFile.CreationTimeUtc
			objRow("Last Accessed") = oFile.LastAccessTimeUtc
			objRow("Last Written") = oFile.LastWriteTimeUtc
			objRow("Read Only") = oFile.IsReadOnly
			objRow("Bytes") = oFile.Length

			objTable.Rows.Add(objRow)
		Next
	Next

	objTable = objTable.DefaultView.ToTable(True, _
		"Path", _
		"Folder", _
		"Name", _
		"Extension", _
		"Created", _
		"Last Accessed", _
		"Last Written", _
		"Read Only", _
		"Bytes")

	Files = objTable
	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="913867cd-7535-4857-b6b9-1b1ead2bc67f" name="Folder" type="Data"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><display x="-195" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\temp</initialvalue><private /><alwaysinit /></stage><stage stageid="624240c2-02c8-48c3-9040-e9388fddf1b1" name="Patterns CSV" type="Data"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><display x="-195" y="15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">*.jpg</initialvalue><private /><alwaysinit /></stage><stage stageid="95f234d2-8c1a-466c-b8a6-fb7dc34de936" name="Files" type="Collection"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><display x="-195" y="75" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="3764ae17-85d7-4ebb-99b5-502b95d7abd6" name="End" type="End"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="A message if unsuccessful" stage="Message" /><output type="collection" name="Files" narrative="The collection of files found" stage="Files" /></outputs></stage><stage stageid="8e80cc1d-27ed-43d9-985e-90d828191fb7" name="Success" type="Data"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="950111b1-7b05-4076-a673-b07166b76cdb" name="Message" type="Data"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><display x="-195" y="165" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="32964141-871e-474a-a1f8-eea0b10c5df2" name="Delete Files" type="SubSheetInfo"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><narrative>Deletes all files in the specified folder, matching the supplied file extension pattern.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="82b919fe-64b2-4c2b-8173-5706f671c5ce" name="End" type="End"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><loginhibit /><display x="15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ea337dc4-4fd9-4d31-8cc6-23da41cd5665" name="Start" type="Start"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><loginhibit /><preconditions><condition narrative="The named folder must exist." /></preconditions><postconditions><condition narrative="All files within the named folder which match the supplied pattern will have been deleted." /></postconditions><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Folder" narrative="The path from which to delete the files" stage="Folder" /><input type="text" name="Pattern" narrative="The wildcard pattern of files to delete" stage="Pattern" /></inputs><onsuccess>202c81a6-fd90-46ed-9eee-73c24863b69b</onsuccess></stage><stage stageid="202c81a6-fd90-46ed-9eee-73c24863b69b" name="Delete Files" type="Code"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><loginhibit /><display x="15" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Folder" expr="[Folder]" /><input type="text" name="Pattern" expr="[Pattern]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>d0021635-222d-46f1-93ad-a7435640cf9f</onsuccess><code><![CDATA[Dim aFiles As String()

Try

	aFiles = Directory.GetFiles(Folder, Pattern)

	For each f as String in aFiles
		File.Delete(f)
	Next

	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try
]]></code></stage><stage stageid="119002ff-ee61-4f32-b096-f3953ad107e1" name="Folder" type="Data"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><display x="-195" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\temp\Blue Prism</initialvalue><private /><alwaysinit /></stage><stage stageid="121b4fd7-a9da-4498-a8d5-6a0ab2dae758" name="Pattern" type="Data"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><display x="-195" y="15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">*.TIF</initialvalue><private /><alwaysinit /></stage><stage stageid="623ad5b5-f965-4f97-9d46-435717e70b25" name="Success" type="Data"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><display x="-195" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="77c8238b-c415-496f-87c3-50033ec4d2a5" name="Message" type="Data"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7891b89f-2307-4444-8b6e-17e25e53501f" name="Append to Text File" type="SubSheetInfo"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><narrative>Appends some text to the specified file.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="83010bd2-019e-4b04-af0b-b401efe8d128" name="Start" type="Start"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><preconditions><condition narrative="There must be sufficient disk space to accommodate the new data. The destination file need not exist already. If it does not exist then it will be created." /></preconditions><postconditions><condition narrative="The supplied text will have been appended." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" narrative="The full path of the text file to append to" stage="File Name" /><input type="text" name="Text" narrative="The text to append to the file" stage="Text" /></inputs><onsuccess>eeb7f0eb-73fc-4849-96a9-35f410bbde67</onsuccess></stage><stage stageid="39862014-df78-414b-9ccd-5c0d392aa282" name="End" type="End"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="f9d3e8a1-7f67-4991-b9f1-e8ec160de075" name="Success" type="Data"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><display x="-195" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="2ef09390-e450-4d10-a32b-4448a65b0aaf" name="Message" type="Data"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><display x="-195" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4e77fcf2-8d12-4f3b-acf3-e15dccb8e90a" name="Text" type="Data"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><display x="-195" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f599b6ac-5574-438b-8617-8821d9800cf7" name="File Name" type="Data"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="eeb7f0eb-73fc-4849-96a9-35f410bbde67" name="Append" type="Code"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" expr="[File Name]" /><input type="text" name="Text" expr="[Text]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>1e441202-3878-4eb6-b156-6f517be6de00</onsuccess><code><![CDATA[Try

	Dim sw As StreamWriter

	If File.Exists(File_Name) = False Then
		sw = File.CreateText(File_Name)
	Else
		sw = File.AppendText(File_Name)
	End If

	sw.WriteLine(Text)
	sw.Flush()
	sw.Close()
	
	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="6428e7b4-8ed6-4930-bc8f-636cc71e955a" name="Read All Text from File" type="SubSheetInfo"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><narrative>Reads the entire contents of a file as text.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a783ee6f-6425-4420-9b9f-759c781f3544" name="Start" type="Start"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><preconditions><condition narrative="The file must exist." /></preconditions><postconditions><condition narrative="The full text of the file will be read." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" narrative="The full path the file to read the text from" stage="File Name" /></inputs><onsuccess>8107f164-7ef3-4164-8a2c-500055c7b374</onsuccess></stage><stage stageid="0a76495e-bc0d-4cea-bae0-85da1e15c74f" name="End" type="End"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /><output type="text" name="Text" narrative="The text of the file" stage="Text" /></outputs></stage><stage stageid="995662eb-baf3-436e-a2c1-2cc3ccfcf8fb" name="Success" type="Data"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><display x="-195" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="ee454760-e4c3-44cc-b071-30cdafbe8355" name="Message" type="Data"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><display x="-195" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2dbbbe6e-0b94-4d90-940a-c99f9671b774" name="Text" type="Data"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><display x="-195" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="265e14ba-8649-477d-9d21-092a9bc9ad2d" name="File Name" type="Data"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8107f164-7ef3-4164-8a2c-500055c7b374" name="Read Text" type="Code"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" expr="[File Name]" /></inputs><outputs><output type="text" name="Text" stage="Text" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>7419fb71-5c79-4fb6-9e59-b9fbc1d63e45</onsuccess><code><![CDATA[Try
   If File.Exists(File_Name) Then
   	Dim sr As New StreamReader(File_Name)
   	Text = sr.ReadToEnd
   	sr.Close()
   	Success = True
   	Message = ""
   Else
      Throw New ApplicationException("The file at " & File_Name & " does not exist")
   End If
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="a3f9a500-e2f0-4f48-9bb2-38ad1a4592b9" name="Write Text File" type="SubSheetInfo"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><narrative>Writes text to a file. Any existing text in the file (if it exists) will be replaced.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="3f408f78-c150-49f6-9f52-a3fb59ce307e" name="Start" type="Start"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><preconditions><condition narrative="There must be sufficient disk space to accommodate the new data." /></preconditions><postconditions><condition narrative="The supplied text will have been written to the destination file." /></postconditions><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" narrative="The full path to the file to write the text to" stage="File Name" /><input type="text" name="Text" narrative="The text to write to the file" stage="Text" /></inputs><onsuccess>7d5efe35-64fc-48a0-b5a7-a5b787e90578</onsuccess></stage><stage stageid="1aab3a10-a813-470b-97c8-57938a0d0024" name="End" type="End"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><display x="-30" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="e85add3f-f65a-47dd-8be7-5ee764878dee" name="Success" type="Data"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><display x="-195" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="3ba21666-440e-40ea-80e4-bb02ff535775" name="Message" type="Data"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><display x="-195" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="951ed278-f157-450e-90d0-06cc330e358c" name="Text" type="Data"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><display x="-195" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="20ca70ee-ce56-4594-90ca-a03ba1934f47" name="File Name" type="Data"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7d5efe35-64fc-48a0-b5a7-a5b787e90578" name="Write" type="Code"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><display x="-30" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" expr="[File Name]" /><input type="text" name="Text" expr="[Text]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>9219c3c4-effd-4dfc-9020-8dafd054ea8f</onsuccess><code><![CDATA[Try
	File.WriteAllText(File_Name, Text)
	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="7dfd4754-e49a-447b-b9c3-c36266dfa2e8" name="File Exists" type="SubSheetInfo"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><narrative>Determines whether the specified file exsts. The full path must be specified.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="da1de8a5-b06c-4fc0-b316-2fec1a802056" name="End" type="End"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><loginhibit /><display x="-60" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Exists" narrative="True if the file exists" stage="Exists" /></outputs></stage><stage stageid="6b0d4683-2748-485e-88ed-cdf57c76992d" name="Start" type="Start"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The existence of the file of interest will have been determined." /></postconditions><display x="-60" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" narrative="The name of the file to check" stage="File Name" /></inputs><onsuccess>7cc66b68-5ab8-4f99-95fa-fde9dbfa38ed</onsuccess></stage><stage stageid="f92a43a8-74e6-4f49-bf65-dc7663017f2b" name="File Name" type="Data"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="7cc66b68-5ab8-4f99-95fa-fde9dbfa38ed" name="File Exists" type="Code"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><loginhibit /><display x="-60" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" expr="[File Name]" /></inputs><outputs><output type="flag" name="Exists" stage="Exists" /></outputs><onsuccess>da1de8a5-b06c-4fc0-b316-2fec1a802056</onsuccess><code><![CDATA[Try
	Exists = File.Exists(File_Name)
Catch
	Exists = False
End Try]]></code></stage><stage stageid="817167f9-bb73-4622-9254-e249dff5369f" name="Exists" type="Data"><subsheetid>60b8a01d-1f74-4169-b192-5e363a7b5e61</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="2271a79e-27e5-4434-b5be-146e02946317" name="new" type="Note"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="c50578e4-df15-4b21-8a4c-469dae40724d" name="Copy File" type="SubSheetInfo"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><narrative>Copies a file to the named destination.</narrative><display x="-195" y="-135" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="30f8df38-bbc1-4b94-916b-ce06a40b630c" name="Start" type="Start"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><preconditions><condition narrative="The file to be copied must exist. The full destination path must be specified. There must be sufficient free disk space to complete the operation." /></preconditions><postconditions><condition narrative="The file will have been copied to the specified destination." /><condition narrative="" /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Path" narrative="The full path to the file to be copied" stage="File Path" /><input type="text" name="Destination Path" narrative="The path of the directory to copy the file to" stage="Destination Path" /></inputs><onsuccess>8de7d816-2984-4b8f-a1f0-dfdf25b3f108</onsuccess></stage><stage stageid="53e1058f-89a5-4172-b9b5-89530de8ef51" name="Success" type="Data"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><display x="-195" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="471fd171-54c1-4c9b-aa1d-6f471b939942" name="Message" type="Data"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><display x="-195" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8de7d816-2984-4b8f-a1f0-dfdf25b3f108" name="Copy" type="Code"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Path" expr="[File Path]" /><input type="text" name="Destination" expr="[Destination Path]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>acf72cc7-cf73-466f-8c22-9fb633ed3c24</onsuccess><code><![CDATA[Try

	Dim sSourceFolder As String = Mid(File_Path, 1, File_Path.LastIndexOf("\") + 1)
	Dim sSourceFileName As String = Mid(File_Path, File_Path.LastIndexOf("\") + 2)
 
	Dim sDestinationFolder As String
	Dim sDestinationFile As String
	If Directory.Exists(Destination) Then
		sDestinationFolder = Destination
		If Not sDestinationFolder.EndsWith("\") Then
			sDestinationFolder &= "\"
		End If
		sDestinationFile = ""
	Else
		sDestinationFolder = ""
		sDestinationFile = Destination
	End If
 
	Dim objDirectoryInfo As DirectoryInfo = New DirectoryInfo(sSourceFolder)
	Dim aFiles As FileInfo() = objDirectoryInfo.GetFiles(sSourceFileName)

	If aFiles Is Nothing OrElse aFiles.Length <= 0 Then
		Success = False
		Message = "No files found"
		Return
	End If

	For Each oFile As FileInfo In aFiles
		If sDestinationFolder = "" Then
			oFile.CopyTo(sDestinationFile, True)
		Else
			oFile.CopyTo(sDestinationFolder & oFile.Name, True)
		End If
	Next

	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="f12e4bba-1185-469f-aea9-0b8954cbed77" name="File Path" type="Data"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="30982d9d-8e54-4d64-af7e-2a7df861c94f" name="Destination Path" type="Data"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><display x="-195" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6d608807-5c80-49f5-a177-05a15f6d0ff7" name="Get File Size" type="SubSheetInfo"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><narrative>Gets the size of the specified file.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d07f9435-79c9-4cd5-b803-1cde78f5262c" name="End" type="End"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><loginhibit /><display x="15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="Size" narrative="The size of the file in bytes" stage="Bytes" /></outputs></stage><stage stageid="d573bf14-6cce-4455-ae05-908d9a527dcb" name="Start" type="Start"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><loginhibit /><preconditions><condition narrative="The specified file must exist." /></preconditions><postconditions><condition narrative="The file size will have been determined." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Path" narrative="Full path to the file to get the file size" stage="File Path" /></inputs><onsuccess>6543595a-59fb-4304-b9f3-1acf662a1237</onsuccess></stage><stage stageid="0c8b0631-90f5-4646-b0cf-8fab74f80999" name="File Path" type="Data"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6543595a-59fb-4304-b9f3-1acf662a1237" name="Get Byte Count" type="Code"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Path" expr="[File Path]" /></inputs><outputs><output type="number" name="Bytes" stage="Bytes" /></outputs><onsuccess>d07f9435-79c9-4cd5-b803-1cde78f5262c</onsuccess><code><![CDATA[Try

	Bytes = File.ReadAllBytes(File_Path).Length

Catch e As Exception
	Bytes = 0
End Try]]></code></stage><stage stageid="3eb7673c-2193-4d7f-ac06-85b1da9ce046" name="Bytes" type="Data"><subsheetid>7ca00106-fe4e-46c0-bffc-0dda1561434f</subsheetid><display x="-195" y="15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="36451c72-b274-4817-a153-beb1e8a6e76a" name="Start" type="Start"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>9a8c4505-8606-4a0c-b118-09a6b9932b3b</onsuccess></stage><stage stageid="9a8c4505-8606-4a0c-b118-09a6b9932b3b" name="End" type="End"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="d1f13191-1583-4a03-865c-3f0758139ca3" name="Delete File" type="SubSheetInfo"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><narrative>Deletes a single file from the file system.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="31d32d9a-4f5c-4793-afc7-d84f096922b9" name="Start" type="Start"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><loginhibit /><preconditions><condition narrative="The file to be deleted must exist." /></preconditions><postconditions><condition narrative="The named file will have been deleted." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" narrative="The full path to the file to delete" stage="File Name" /></inputs><onsuccess>b6262d8e-0c7b-459d-b177-37ae4d226ddf</onsuccess></stage><stage stageid="cd763cbc-81c0-42b1-9d9d-b2b7d325235d" name="File Name" type="Data"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b6262d8e-0c7b-459d-b177-37ae4d226ddf" name="Delete File" type="Code"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Name" expr="[File Name]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>249acd28-3283-498f-aca8-76c67cb2295c</onsuccess><code><![CDATA[Try
   If Not File.Exists(File_Name) Then
      Throw New ApplicationException("The specified file at " & File_Name & " does not exist.")
   Else
	   File.Delete(File_Name)
	   Success = True
   End If
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="1cd4abb9-4dc3-494c-86a7-d85877a1827a" name="Success" type="Data"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="bc5b5c19-fe76-4278-95d2-f89c3588893c" name="Message" type="Data"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a7bae4fd-01fc-4447-8cf4-fbfd04353f72" name="End" type="End"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="576295b9-757e-4588-948e-34aac5140c29" name="End" type="End"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="cef63c98-a65d-4862-9d1d-ff02fbfc92f5" name="Get Folders" type="SubSheetInfo"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><narrative>Gets a collection of all subfolders in the specified file system folder.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="f90df4f3-71ee-4470-b90b-1e8a0513cad8" name="Start" type="Start"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><loginhibit /><preconditions><condition narrative="The named folder must exist." /></preconditions><postconditions><condition narrative="All sub-folders will be returned, if any exist." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Folder" narrative="The folder in which to look for sub-folders" stage="Folder" /></inputs><onsuccess>ff503eb2-2cb7-4dbb-90fe-2ab47a5e4a43</onsuccess></stage><stage stageid="ff503eb2-2cb7-4dbb-90fe-2ab47a5e4a43" name="Get Folders" type="Code"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Folder" expr="[Folder]" /></inputs><outputs><output type="collection" name="Folders" stage="Folders" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>3dde4f26-00a8-4e1a-af12-b8a14178d89c</onsuccess><code><![CDATA[
Dim objTable As DataTable
Dim objRow As DataRow
Dim aFolders As DirectoryInfo()
Dim oDirectory As New DirectoryInfo(Folder)

Try

	'Create a data table to output as a collection
	objTable = GetDataTable( _
		"Path," _
		& "Name," _
		& "Created," _
		& "Last Accessed," _
		& "Last Written", _
		"System.String," _
		& "System.String," _
		& "System.DateTime," _
		& "System.DateTime," _
		& "System.DateTime")
		
	aFolders = oDirectory.GetDirectories()
	For each oFolder as DirectoryInfo in aFolders
		objRow = objTable.NewRow()
		objRow("Path") = oFolder.FullName
		objRow("Name") = oFolder.Name
		objRow("Created") = oFolder.CreationTimeUtc
		objRow("Last Accessed") = oFolder.LastAccessTimeUtc
		objRow("Last Written") = oFolder.LastWriteTimeUtc

		objTable.Rows.Add(objRow)
	Next

	Folders = objTable
	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="f72d7f92-f944-412b-8890-737f3be3b0a1" name="Folder" type="Data"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><display x="-195" y="-15" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\</initialvalue><private /><alwaysinit /></stage><stage stageid="1384f5ee-e382-4900-9900-e2e2eb7a9a78" name="Folders" type="Collection"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><display x="-195" y="75" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="aa67216d-b83f-4c14-9f71-5ec6df626c08" name="End" type="End"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /><output type="collection" name="Folders" narrative="A collection of the sub-folders found within the folder" stage="Folders" /></outputs></stage><stage stageid="759f9ebb-96f6-432b-a21e-6673b71cac22" name="Success" type="Data"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><display x="-195" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5afbf383-4ea5-42f7-a298-d02bf6dc267a" name="Message" type="Data"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><display x="-195" y="165" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="076db864-0743-4339-b606-174f056c63f9" name="Move File" type="SubSheetInfo"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><narrative>Moves the specified file to a new location.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="8c383fb0-b58b-44cd-8dec-c5934289e107" name="Start" type="Start"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><preconditions><condition narrative="The file to be moved must exist. There must be sufficient disk space to move the file." /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Path" narrative="The full path to the file to move" stage="File Path" /><input type="text" name="Destination Path" narrative="The path to the folder to move the file to" stage="Destination Path" /></inputs><onsuccess>8cb5b945-a1c1-451f-b39e-fba3e2b5ab1b</onsuccess></stage><stage stageid="2c8abe9a-1466-4283-999a-c5c7838a0e27" name="End" type="End"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="a980280c-98cd-41d0-8a54-734c9bfacc5c" name="Success" type="Data"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><display x="-195" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="779e3dfa-a01e-47f9-98c4-9ac10fcd5a11" name="Message" type="Data"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><display x="-195" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="8cb5b945-a1c1-451f-b39e-fba3e2b5ab1b" name="Move" type="Code"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Path" expr="[File Path]" /><input type="text" name="Destination" expr="[Destination Path]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>acbc8cd8-d4ad-4eae-a7c3-ebbac1d3f4c7</onsuccess><code><![CDATA[Try

	Dim sSourceFolder As String = Mid(File_Path, 1, File_Path.LastIndexOf("\") + 1)
	Dim sSourceFileName As String = Mid(File_Path, File_Path.LastIndexOf("\") + 2)
 
	Dim sDestinationFolder As String
	Dim sDestinationFile As String
	If Directory.Exists(Destination) Then
		sDestinationFolder = Destination
		If Not sDestinationFolder.EndsWith("\") Then
			sDestinationFolder &= "\"
		End If
		sDestinationFile = ""
	Else
		sDestinationFolder = ""
		sDestinationFile = Destination
	End If
 
	Dim objDirectoryInfo As DirectoryInfo = New DirectoryInfo(sSourceFolder)
	Dim aFiles As FileInfo() = objDirectoryInfo.GetFiles(sSourceFileName)

	If aFiles Is Nothing OrElse aFiles.Length <= 0 Then
		Success = False
		Message = "No files found"
		Return
	End If

	For Each oFile As FileInfo In aFiles
		If sDestinationFolder = "" Then
			oFile.MoveTo(sDestinationFile)
		Else
			oFile.MoveTo(sDestinationFolder & oFile.Name)
		End If
	Next

	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="ba83bbd5-0c51-49b0-ac63-de9e754aab48" name="File Path" type="Data"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><display x="-195" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="57b074ac-98b9-40d1-a342-36dc0a514f77" name="Destination Path" type="Data"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><display x="-195" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c83a23da-bc05-4aa4-8a8e-6c09524e2baf" name="Split Path" type="SubSheetInfo"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><narrative>Splits a file path into its component parts - the filename and the folder path. The trailing backslash is omitted from the directory part.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="6c655f85-fb96-448d-be05-5f6c833e1882" name="Start" type="Start"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><loginhibit /><preconditions><condition narrative="The specified path must correspond to a file which exists on disk." /></preconditions><postconditions><condition narrative="The path will have been separated." /></postconditions><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Path" narrative="The path to split" stage="File Path" /></inputs><onsuccess>138061d1-d866-403d-af52-37ea509c7e78</onsuccess></stage><stage stageid="138061d1-d866-403d-af52-37ea509c7e78" name="Split Path" type="Code"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><loginhibit /><display x="90" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Path" expr="[File Path]" /></inputs><outputs><output type="text" name="Folder" stage="Folder" /><output type="text" name="File Name" stage="File Name" /></outputs><onsuccess>0e35cb6c-257d-40a6-ba20-d661c3ad83fe</onsuccess><code><![CDATA[
Folder = Path.GetDirectoryName(File_Path)
File_Name = Path.GetFileName(File_Path)
]]></code></stage><stage stageid="69bae4e1-98fe-460c-807d-30657ae18ebf" name="File Name" type="Data"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><display x="-120" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="de3608a3-9cb7-41c3-ae88-da3dad92053e" name="Folder" type="Data"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><display x="-120" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e0497cae-7418-46ec-a442-ac21369c7a2f" name="File Path" type="Data"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><display x="-120" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="0e35cb6c-257d-40a6-ba20-d661c3ad83fe" name="End" type="End"><subsheetid>b3050915-ad2e-446e-a1d6-99d11506f55e</subsheetid><loginhibit /><display x="90" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="File Name" narrative="The filename" stage="File Name" /><output type="text" name="Folder" narrative="The folder" stage="Folder" /></outputs></stage><stage stageid="3068b898-6d19-4469-8efd-f355853fda4e" name="Directory Exists" type="SubSheetInfo"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><narrative>Determines whether the specified directory exsts. The full path must be specified.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="14e7b70b-4620-4b05-a9f8-5c31396209bd" name="Start" type="Start"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><loginhibit /><display x="-60" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Directory Name" narrative="The directory to check exists" stage="Directory Name" /></inputs><onsuccess>50ef1149-8307-4080-9028-d6bec6eafd78</onsuccess></stage><stage stageid="4f5a5ea1-9bcf-4b0d-b58b-fb6b18580e44" name="End" type="End"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><loginhibit /><display x="-60" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Exists" narrative="True if the directory exists" stage="Exists" /></outputs></stage><stage stageid="50ef1149-8307-4080-9028-d6bec6eafd78" name="Directory Exists" type="Code"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><loginhibit /><display x="-60" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Directory Name" expr="[Directory Name]" /></inputs><outputs><output type="flag" name="Exists" stage="Exists" /></outputs><onsuccess>4f5a5ea1-9bcf-4b0d-b58b-fb6b18580e44</onsuccess><code><![CDATA[Try
	Exists = Directory.Exists(Directory_Name)
Catch
	Exists = False
End Try]]></code></stage><stage stageid="89cff60a-371d-476b-bc55-f0e56150ef45" name="Exists" type="Data"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><display x="30" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a9da119d-dbd9-4320-90e1-ca33fae50a91" name="Directory Name" type="Data"><subsheetid>20e6a636-d89b-4c08-b90d-8852894005a4</subsheetid><display x="30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a1f89739-7f1c-4179-82ea-b123ecfc2854" name="Write Binary Data" type="SubSheetInfo"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><narrative>Writes binary data to a file. Any existing data in the file (if it exists) will be replaced.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="067fe5ce-ad15-436e-92fa-11e920e00501" name="Start" type="Start"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="binary" name="Binary Data" narrative="The data to write to the file" stage="Binary Data" /><input type="text" name="File Name" narrative="The full path of the file to write to" stage="FileName" /></inputs><onsuccess>48430903-e8af-4e4a-8544-8b04afc3478b</onsuccess></stage><stage stageid="83dc26e0-402d-403d-a18c-0d3ca147ba6d" name="Binary Data" type="Data"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>binary</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="48430903-e8af-4e4a-8544-8b04afc3478b" name="Write Binary Data" type="Code"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="binary" name="Binary Data" expr="[Binary Data]" /><input type="text" name="FileName" expr="[FileName]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /></outputs><onsuccess>aed480e9-2938-4d36-b400-a3bd2580921a</onsuccess><code><![CDATA[Try
	File.WriteAllBytes(FileName, Binary_Data)
	Success = True
	Message = ""
Catch e As Exception
	Success = False
	Message = e.Message
End Try]]></code></stage><stage stageid="709d1a16-f19e-4504-ae79-4a48d1e058c7" name="End" type="End"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Message" /></outputs></stage><stage stageid="43cbdbc2-6fdc-4080-b257-af95daad3fe4" name="Success" type="Data"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="-120" y="45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="0aebe753-5358-4cf3-982a-a9f0a9870be7" name="Message" type="Data"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="-120" y="75" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5e035935-d499-4706-8ba0-78fdee0a782f" name="FileName" type="Data"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><display x="-60" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c7604000-e2fb-4a03-b8b4-caac4c6b9f9b" name="Combine Path" type="SubSheetInfo"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><narrative>Takes a file and folder and combines them into a full path.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="71908284-0a93-418a-9205-32dc4780032c" name="Start" type="Start"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><postconditions><condition narrative="The path will have been combined." /></postconditions><display x="120" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Folder" narrative="The folder to combine" stage="Folder" /><input type="text" name="File Name" narrative="The file to combine" stage="File Name" /></inputs><onsuccess>39d35633-fc08-4dd1-a13a-1bfc9a0a9bd1</onsuccess></stage><stage stageid="39d35633-fc08-4dd1-a13a-1bfc9a0a9bd1" name="Combine Path" type="Code"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><loginhibit /><display x="120" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Folder" expr="[Folder]" /><input type="text" name="File Name" expr="[File Name]" /></inputs><outputs><output type="text" name="Path" stage="Path" /></outputs><onsuccess>b4d82bcb-e011-4728-a3ec-4c052dcebaaf</onsuccess><code><![CDATA[
Path = IO.Path.Combine(Folder, File_Name)
]]></code></stage><stage stageid="dca04a3f-b696-45b1-95c8-63dce520abe3" name="File Name" type="Data"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><display x="-90" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e27e592f-8a2e-4df9-9453-1cdc8621051b" name="Folder" type="Data"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><display x="-90" y="30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b4d82bcb-e011-4728-a3ec-4c052dcebaaf" name="End" type="End"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><loginhibit /><display x="120" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Path" narrative="The combined full path" stage="Path" /></outputs></stage><stage stageid="ef4fc19c-8897-431e-8688-11a52561113f" name="Path" type="Data"><subsheetid>c80dea92-57e8-4e2e-8df4-f3ee6ceeb717</subsheetid><display x="195" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a664d6c1-8951-4309-95b7-b7ae2edced0d" name="Create Directory" type="SubSheetInfo"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><narrative>Creates a directory under the given path.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="82e63828-72ff-4705-8c88-89c3316aa73e" name="Start" type="Start"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Directory Path" narrative="The path in which to create the directory" stage="Directory Path" /><input type="flag" name="Error If Already Exists" narrative="True to generate an error if the directory already exists" stage="Error If Already Exists" /></inputs><onsuccess>98af3f34-4ec7-49c5-a6cc-1cf6192b0e05</onsuccess></stage><stage stageid="e061382f-4149-485b-9668-f2fc0ca334bd" name="End" type="End"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><loginhibit /><display x="15" y="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Error Message" /></outputs></stage><stage stageid="800212c5-6bfb-4df9-b501-39f55906a7b2" name="Directory Path" type="Data"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><display x="120" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e00501ce-6aa6-4616-9bf2-3904d515656c" name="Error If Already Exists" type="Data"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><display x="180" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="98af3f34-4ec7-49c5-a6cc-1cf6192b0e05" name="Create Directory" type="Code"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><loginhibit /><display x="15" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Directory Path" expr="[Directory Path]" /><input type="flag" name="ErrorIfAlreadyExists" expr="[Error If Already Exists]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>060a1fdb-6243-40f1-96e0-1c0b54382bfa</onsuccess><code><![CDATA[Try
   If Not Directory.Exists(Directory_Path) Then
   	Directory.CreateDirectory(Directory_Path)
   Else
      If ErrorIfAlreadyExists Then Throw New ApplicationException("Directory already exists")
   End If

	Success = True
Catch Ex as Exception
	Success = False
	Error_Message = Ex.ToString()
End Try]]></code></stage><stage stageid="3b33d39b-1c7c-4664-ab8b-859aa2e15836" name="Success" type="Data"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><display x="120" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="9cbff7ae-931b-479f-b70f-7773ddda315c" name="Error Message" type="Data"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><display x="180" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="20cbacd9-1e17-4fc0-85de-64615b1f3d18" name="Delete Directory" type="SubSheetInfo"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><narrative>Deletes a directory and if Recursive is True will delete all subdirectories if present</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="df3458a7-2e7e-451c-b27a-efc3737c22a4" name="Start" type="Start"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><loginhibit /><display x="-45" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Directory Path" narrative="The path of the directory to delete" stage="Directory Path" /><input type="flag" name="Error If Not Exists" narrative="Set True to raise an error if the path does not exist" stage="Error If Not Exists" /><input type="flag" name="Recursive" narrative="Set True to delete all sub-directories of the path aswell" stage="Recursive" /></inputs><onsuccess>ef40ac3e-3a06-4ca9-a3be-daae97b8c700</onsuccess></stage><stage stageid="09677c01-2e36-4330-ae33-defa66a1e7b1" name="End" type="End"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><loginhibit /><display x="-45" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True if successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Error Message" /></outputs></stage><stage stageid="3afa3efd-a788-4410-a16c-5e2ecfc599d8" name="Directory Path" type="Data"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><display x="75" y="-135" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ef40ac3e-3a06-4ca9-a3be-daae97b8c700" name="Delete Directory" type="Code"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><loginhibit /><display x="-45" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Directory Path" expr="[Directory Path]" /><input type="flag" name="Recursive" expr="[Recursive]" /><input type="flag" name="ErrorIfNotExists" expr="[Error If Not Exists]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>8db31208-966a-494a-9315-8a4add93c64c</onsuccess><code><![CDATA[Try
   If Directory.Exists(Directory_Path) Then

		Dim SubDirectories As Boolean
		SubDirectories = False

		Dim SubdirectoryEntries As String() 
		SubdirectoryEntries = Directory.GetDirectories(Directory_Path) 
		
		If SubdirectoryEntries.Length > 0 Then SubDirectories = True

		If SubDirectories And Not Recursive Then Throw New ApplicationException("Directory has sub directories and will not be deleted")
   	
		Directory.Delete(Directory_Path, Recursive) 
   
Else
      If ErrorIfNotExists Then Throw New ApplicationException("Directory does not exist")
   End If

	Success = True


Catch UAEx as UnauthorizedAccessException
	Success = False
	Error_Message = "The caller does not have the required permission to delete this directory or sub directories"

Catch ANEx as ArgumentNullException
	Success = False
	Error_Message = "Please check Directory Path parameter is not null"

Catch AEx as ArgumentException
	Success = False
	Error_Message = "Please check Directory Path parameter is a valid string"

Catch PTLEx as PathTooLongException
	Success = False
	Error_Message = "The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters."

Catch Ex as Exception
	Success = False
	Error_Message = Ex.ToString()

End Try]]></code></stage><stage stageid="1ea4ba58-4e52-4229-9f95-9f91c0fda672" name="Success" type="Data"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><display x="105" y="-75" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="cd89d345-b43b-43b1-a112-d69cd7b07387" name="Error Message" type="Data"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><display x="240" y="-45" w="180" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="498faab3-e919-4560-a284-8303f82f3c54" name="Recursive" type="Data"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><display x="180" y="-135" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="c7f09a8a-5e8c-4bd8-ae1c-03c88a61bc8b" name="Error If Not Exists" type="Data"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><display x="285" y="-135" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="1a001ca1-2f75-4d52-8668-8537da4738b3" name="Sub Directory Exists" type="SubSheetInfo"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><narrative>Checks if a directory contains sub directories</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9d21f26b-5ccc-4f2f-b6f3-3443cb23a95f" name="Start" type="Start"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><loginhibit /><display x="-15" y="-150" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Directory Path" narrative="The path of the directory to check for sub directories" stage="Directory Path" /></inputs><onsuccess>9bd1eb97-f903-4b5b-bdb0-9aa7d84feead</onsuccess></stage><stage stageid="167ee595-8609-4b40-9cbb-70394613201b" name="End" type="End"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><loginhibit /><display x="-15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Exists" narrative="True if sub directories exist" stage="Exists" /><output type="flag" name="Success" narrative="True if the check was successful" stage="Success" /><output type="text" name="Message" narrative="An error message if unsuccessful" stage="Error Message" /></outputs></stage><stage stageid="9bd1eb97-f903-4b5b-bdb0-9aa7d84feead" name="Get Sub Directories" type="Code"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><loginhibit /><display x="-15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Directory Path" expr="[Directory Path]" /></inputs><outputs><output type="flag" name="Exists" stage="Exists" /><output type="flag" name="Success" stage="Success" /><output type="text" name="Error Message" stage="Error Message" /></outputs><onsuccess>33ba9e06-b05b-4e51-baa6-7f6c9165c558</onsuccess><code><![CDATA[Try
   
Exists = False
If Directory.Exists(Directory_Path) Then
   	Dim subdirectoryEntries As String() 
		
		subdirectoryEntries = Directory.GetDirectories(Directory_Path) 
		
		If subdirectoryEntries.Length > 0 Then Exists = True

   Else
      Throw New ApplicationException("Directory does not exist")
   End If

	Success = True
Catch Ex as Exception
	Success = False
	Error_Message = Ex.ToString()
End Try
]]></code></stage><stage stageid="50a0102e-8884-426d-b94f-ed07f6b9eb46" name="Exists" type="Data"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><display x="225" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c52a3808-5f20-4498-a5a6-6e8bd391e41c" name="Directory Path" type="Data"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><display x="225" y="-105" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\TEMP\Test Directory\A\c</initialvalue><private /><alwaysinit /></stage><stage stageid="227470b6-fe82-4351-a497-6094c99e4193" name="Success" type="Data"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><display x="330" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="586142aa-051e-4ec9-8b60-fe063eb60b77" name="Error Message" type="Data"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><display x="450" y="-15" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="12caee97-e82e-461c-8b22-dabe4248d7a8" name="Get CSV Text As Collection" type="SubSheetInfo"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><narrative>Turns a comma seperated values file into a collection</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="939139f9-83c3-4076-85ca-1daa3e637601" name="Start" type="Start"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><loginhibit /><display x="-15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="CSV File Path" narrative="The full path to the CSV file" stage="CSV Location" /><input type="flag" name="First Line Is Header" narrative="Set True if you want to treat the first line as a header" stage="First Line Is Header" /></inputs><onsuccess>dd7efc8a-65d0-432e-a205-643037779b8d</onsuccess></stage><stage stageid="c85955cf-695f-4e82-acdb-72332a337fc7" name="End" type="End"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><loginhibit /><display x="-15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="CSV Values" narrative="The collection populated with the values of the CSV file" stage="CSV Values" /></outputs></stage><stage stageid="96016690-fb73-49d3-bcfc-56b25dd9d3db" name="CSV Location" type="Data"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><display x="60" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">C:\BluePrism\Medalytix\iGrading\Test_Suite\ImagesIndex.csv</initialvalue><private /><alwaysinit /></stage><stage stageid="dd7efc8a-65d0-432e-a205-643037779b8d" name="Parse CSV" type="Code"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><loginhibit /><display x="-15" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="CSV Location" expr="[CSV Location]" /><input type="flag" name="First_Line_Is_Header" expr="[First Line Is Header]" /></inputs><outputs><output type="collection" name="Values" stage="CSV Values" /></outputs><onsuccess>c85955cf-695f-4e82-acdb-72332a337fc7</onsuccess><code><![CDATA[Dim HDRString As String = "No"
If First_Line_Is_Header Then HDRSTring = "Yes"


Dim Folder as String = nothing
Dim FileName As String = Nothing
Split_Path(CSV_Location, Folder, Filename)

Dim cn As New OleDbConnection("Provider=Microsoft.Jet.OLEDB.4.0; Data Source=" & Folder & ";Extended Properties=""Text;HDR=" & HDRString & ";FMT=Delimited""")
Dim da As New OleDbDataAdapter()
Dim ds As New DataSet()
Dim cd As New OleDbCommand("SELECT * FROM [" & Filename & "]", cn)

cn.Open()
da.SelectCommand = cd
ds.Clear()
da.Fill(ds, "CSV")
Values = ds.Tables(0)
cn.Close()]]></code></stage><stage stageid="5fe33334-21a0-4751-931d-92622545fe5d" name="CSV Values" type="Collection"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><display x="75" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="1dc002ef-16ce-4e9b-9eed-1c4c8a375f11" name="First Line Is Header" type="Data"><subsheetid>f7fa43ec-67e2-4acb-8d13-ced3c5027761</subsheetid><display x="120" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>True</initialvalue><private /><alwaysinit /></stage><stage stageid="e1836bd9-a0bc-45e9-9f62-2835fb1f6144" name="Get Special Folder Path" type="SubSheetInfo"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><narrative>Gets the path of a special folder.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="984cc49d-2710-42f2-85cc-b02b1af6ff97" name="Start" type="Start"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><loginhibit /><display x="-30" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Special Folder Name" narrative="The name of the special folder. Supported values include ApplicationData, DesktopDirectory, MyDocuments, ProgramFiles. The values correspond to the .NET Environment.SpecialFolder enumeration." stage="Special Folder Name" /></inputs><onsuccess>548052a7-4e77-4da0-a80e-07ce9d38ecba</onsuccess></stage><stage stageid="f77e4b56-0c20-4361-b1ac-7fbae4cebd0a" name="End" type="End"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><loginhibit /><display x="-30" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Folder Path" narrative="The corresponding path of the requested special folder" stage="Folder Path" /></outputs></stage><stage stageid="1eb8ae16-c4b3-4a26-9476-974fec0fb4c4" name="Special Folder Name" type="Data"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><display x="75" y="-135" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">InternetCache</initialvalue><private /><alwaysinit /></stage><stage stageid="548052a7-4e77-4da0-a80e-07ce9d38ecba" name="Get Folder Path" type="Code"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><loginhibit /><display x="-30" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Special Folder" expr="[Special Folder Name]" /></inputs><outputs><output type="text" name="Folder Path" stage="Folder Path" /></outputs><onsuccess>f77e4b56-0c20-4361-b1ac-7fbae4cebd0a</onsuccess><code><![CDATA[Dim EnumVal as Environment.SpecialFolder
Try
	EnumVal = Ctype(System.Enum.Parse(GetType(Environment.SpecialFolder), Special_Folder), Environment.SpecialFolder)
Catch Ex As Exception
	Throw New ApplicationException("Value '" & Special_Folder & "' is not recognised as a special folder")
End Try

Folder_Path = Environment.GetFolderPath(EnumVal)]]></code></stage><stage stageid="394a43a7-79f9-4edb-887f-d051122fa5f0" name="Folder Path" type="Data"><subsheetid>40c6e605-9948-429a-ac84-d2810bca75fc</subsheetid><display x="75" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f9a81b69-65ad-4194-8361-a2e49aab6c2c" name="Download File" type="SubSheetInfo"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><narrative>Downloads a file from a web URL and saves it in a folder on disk.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ce6133ff-352a-4e74-b9a9-a2bb5d8c8858" name="Start" type="Start"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><loginhibit /><preconditions><condition narrative="None." /></preconditions><display x="0" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Source URL" narrative="The URL of the file that is to be downloaded" stage="Source URL" /><input type="text" name="Destination Path" narrative="The location of the folder where the file is to be saved" stage="Destination Path" /></inputs><onsuccess>a9bb95cf-84c0-42b2-9fac-e36252a56808</onsuccess></stage><stage stageid="00124bb2-c920-40c3-92e1-efb49b029dc0" name="End" type="End"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><loginhibit /><display x="0" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="5b30cabb-184c-427b-860e-a315e03763ba" name="Destination Path" type="Data"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1ee09d3b-a12d-48c7-89a2-7a947d431ac5" name="Source URL" type="Data"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a9bb95cf-84c0-42b2-9fac-e36252a56808" name="Download File" type="Code"><subsheetid>d7b21a3e-52ee-4632-b2e4-88c0e1ff0dea</subsheetid><loginhibit /><display x="0" y="-90" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Url" expr="[Source URL]" /><input type="text" name="Path" expr="[Destination Path]" /></inputs><onsuccess>00124bb2-c920-40c3-92e1-efb49b029dc0</onsuccess><code><![CDATA[Using wc As New System.Net.WebClient()
	wc.DownloadFile(Url, Path)
End Using]]></code></stage><stage stageid="744e3f22-df5c-4d9e-984b-eceb276cbb95" name="Read Lines From File" type="SubSheetInfo"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><narrative>Reads a range of lines fom a text file</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="09ef75fb-7cbe-4b43-900b-bd0112866589" name="File Path" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b3721f65-c0fd-4187-9e61-da35cecde126" name="Start Line" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="3444d260-8bd2-44b4-91c8-1f4dc3a07e1d" name="End Line" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="de2f0517-71e7-4bfa-b20b-0f6049ee064d" name="EOF" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="225" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e19c2d2b-f05b-48b3-a6c0-e6c368a0720b" name="Success" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-195" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="2814638b-191d-44de-9e9d-e38ce3a2bdb5" name="Message" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-195" y="120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="677752c3-298c-4ea1-abaf-244b239d65d0" name="Lines" type="Collection"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="180" w="150" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="e5bbb949-f610-4f45-bcb7-10a0fc6b123d" name="Line Count" type="Data"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><display x="-195" y="255" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="bf17d04b-65f1-4bf3-a12c-7121e3c2a075" name="Start" type="Start"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><preconditions><condition narrative="The text file exists and the user has appropriate privileges to allow reading it" /><condition narrative="The Start Line argument is less than or equal to the End Line argument" /></preconditions><postconditions><condition narrative="The lines between and including Start Line and End Line are returned" /><condition narrative="EOF will indicate if the end of the file was reached before End Line was reached" /></postconditions><display x="-15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Path" narrative="The file to read" stage="File Path" /><input type="number" name="Start Line" narrative="The first line to read" stage="Start Line" /><input type="number" name="End Line" narrative="The last line to read" stage="End Line" /></inputs><onsuccess>4942f615-9ff9-497d-b3ff-dd697860c232</onsuccess></stage><stage stageid="76661ec7-b5b7-4cf5-9b34-27ca45c70b40" name="Read Lines" type="Code"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-15" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="File Path" expr="[File Path]" /><input type="number" name="Start Line" expr="[Start Line]" /><input type="number" name="End Line" expr="[End Line]" /></inputs><outputs><output type="flag" name="Success" stage="Success" /><output type="text" name="Message" stage="Message" /><output type="collection" name="Lines" stage="Lines" /><output type="number" name="Line Count" stage="Line Count" /><output type="flag" name="EOF" stage="EOF" /></outputs><onsuccess>7d20fad4-4b50-4841-94e9-5f38571de063</onsuccess><code><![CDATA[' Assume success
Success = True
Message = ""

Try
	Lines = New DataTable()
	Lines.Columns.Add("Line", GetType(String))

	Using sr As New StreamReader(File_Path)

		EOF = False
		Start_Line = Math.Max(1, Start_Line)

		Dim line as String
		Dim lineNo As Integer = 0
		Do
			line = sr.ReadLine()
			lineNo += 1

			If line Is Nothing Then EOF = True : Exit Do
			If lineNo >= Start_Line Then Lines.Rows.Add(line)
			If lineNo = End_Line Then Exit Do

		Loop Until line Is Nothing
		Line_Count = Lines.Rows.Count

	End Using

Catch ex As Exception
	Success = False
	Message = ex.Message

End Try
]]></code></stage><stage stageid="bcb21a17-13b7-404f-b11f-16d75385411f" name="End" type="End"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-15" y="45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Success" narrative="True is the read was successful" stage="Success" /><output type="text" name="Message" narrative="The exception detail if the read was unsuccessful" stage="Message" /><output type="collection" name="Lines" narrative="The lines read - the collection contains a single text column 'Line'" stage="Lines" /><output type="number" name="Line Count" narrative="The number of lines read" stage="Line Count" /><output type="flag" name="End of File" narrative="True if the end of the file was reached before the 'End Line' was reached" stage="EOF" /></outputs></stage><stage stageid="4942f615-9ff9-497d-b3ff-dd697860c232" name="Start Line &gt; End Line?" type="Decision"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-15" y="-90" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Start Line] &gt; [End Line]" /><ontrue>fb13e8fc-442c-4cbb-87c1-b4ec596ee962</ontrue><onfalse>76661ec7-b5b7-4cf5-9b34-27ca45c70b40</onfalse></stage><stage stageid="fb13e8fc-442c-4cbb-87c1-b4ec596ee962" name="Semi-Exception" type="MultipleCalculation"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="105" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>362c841e-8d1e-4972-b0b5-710b7bdb1f27</onsuccess><steps><calculation expression="False" stage="Success" /><calculation expression="&quot;Start Line (&quot; &amp; [Start Line] &amp; &quot;) cannot be later than End Line (&quot; &amp; [End Line] &amp; &quot;)&quot;" stage="Message" /></steps></stage><stage stageid="362c841e-8d1e-4972-b0b5-710b7bdb1f27" name="anchor1" type="Anchor"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="105" y="0" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>7d20fad4-4b50-4841-94e9-5f38571de063</onsuccess></stage><stage stageid="d049bf7c-ac22-489e-bf3d-f62d1b4b744a" name="Configure" type="SubSheetInfo"><subsheetid>1e3c209b-a109-46a0-9ff0-e2dc6b8791fb</subsheetid><narrative>Configures this instance of the utility VBO. Calling it with no parameters will cause the configuration to be reset to default values.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1f64d939-b1af-4604-a33c-d730215d51aa" name="Start" type="Start"><subsheetid>1e3c209b-a109-46a0-9ff0-e2dc6b8791fb</subsheetid><loginhibit /><display x="15" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Raise exception on any failure" narrative="Flag indicating if failure should cause an exception to be raised rather than a return of a success output value" stage="Raise exception on any failure" /></inputs><onsuccess>63f0aaf5-553d-43fd-b40d-6b3196b7c075</onsuccess></stage><stage stageid="63f0aaf5-553d-43fd-b40d-6b3196b7c075" name="End" type="End"><subsheetid>1e3c209b-a109-46a0-9ff0-e2dc6b8791fb</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="9e00cf6f-bf06-484e-bcc5-5c0ea5f2dcf1" name="Raise exception on any failure" type="Data"><subsheetid>1e3c209b-a109-46a0-9ff0-e2dc6b8791fb</subsheetid><display x="-195" y="-30" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><alwaysinit /></stage><stage stageid="e8d8821c-ea33-4e7e-a499-9095f71ab91f" name="Raise Exception If Appropriate" type="SubSheetInfo"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="360a869a-24fc-4d19-abbe-b1444dd28c58" name="Start" type="Start"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" stage="Success" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" stage="Error Message" /></inputs><onsuccess>f72ef338-2cee-4c45-8a9a-31011244644f</onsuccess></stage><stage stageid="94d641fc-9887-40ca-8919-8613e5fafda0" name="End" type="End"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="af41ccc8-b3bd-4925-84ba-5df075402e08" name="Success" type="Data"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><display x="-195" y="-30" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="fd0e1bfa-b960-4e5e-b8e5-9a24adfd36e1" name="Error Message" type="Data"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><display x="-195" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="f72ef338-2cee-4c45-8a9a-31011244644f" name="Should Raise Exception?" type="Decision"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><loginhibit /><display x="15" y="-60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Success] = False AND [Raise exception on any failure]" /><ontrue>f42fee03-c39b-416a-b55f-3d69a9ebe812</ontrue><onfalse>94d641fc-9887-40ca-8919-8613e5fafda0</onfalse></stage><stage stageid="f42fee03-c39b-416a-b55f-3d69a9ebe812" name="FAIL" type="Exception"><subsheetid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</subsheetid><display x="90" y="-60" w="30" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><exception type="Action Failed" detail="[Error Message]" /></stage><stage stageid="9cdf0f78-05d1-44d4-80a0-9f78ca0b22ae" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>3a12dbad-57fd-45a4-b859-62df514a34d3</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>3764ae17-85d7-4ebb-99b5-502b95d7abd6</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="3dde4f26-00a8-4e1a-af12-b8a14178d89c" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>0bafee17-a81a-40f0-9b6b-80b78142dd87</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>aa67216d-b83f-4c14-9f71-5ec6df626c08</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="060a1fdb-6243-40f1-96e0-1c0b54382bfa" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>1ff30a41-e177-40c5-a756-a6b466004f32</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Error Message]" /></inputs><onsuccess>e061382f-4149-485b-9668-f2fc0ca334bd</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="8db31208-966a-494a-9315-8a4add93c64c" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>d68f192f-eeb7-420e-b156-9636503b6082</subsheetid><loginhibit /><display x="-45" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Error Message]" /></inputs><onsuccess>09677c01-2e36-4330-ae33-defa66a1e7b1</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="33ba9e06-b05b-4e51-baa6-7f6c9165c558" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>0bad9bbd-7a9f-4791-b6a8-ff5a2c4c39b8</subsheetid><loginhibit /><display x="-15" y="-60" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Error Message]" /></inputs><onsuccess>167ee595-8609-4b40-9cbb-70394613201b</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="d0021635-222d-46f1-93ad-a7435640cf9f" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>ed509af2-4b4a-447d-8196-18105ed12739</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>82b919fe-64b2-4c2b-8173-5706f671c5ce</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="249acd28-3283-498f-aca8-76c67cb2295c" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>70940cba-8680-4eb9-8066-9e383fc5b39b</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>576295b9-757e-4588-948e-34aac5140c29</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="acf72cc7-cf73-466f-8c22-9fb633ed3c24" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>e9dd304c-7d26-40f5-b193-eef36f0a370c</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>a7bae4fd-01fc-4447-8cf4-fbfd04353f72</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="acbc8cd8-d4ad-4eae-a7c3-ebbac1d3f4c7" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>85156833-c61c-4c78-916f-0b75a9a83e8d</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>2c8abe9a-1466-4283-999a-c5c7838a0e27</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="1e441202-3878-4eb6-b156-6f517be6de00" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>d2530b0d-5530-4692-8a60-1f91d1c5a9c9</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>39862014-df78-414b-9ccd-5c0d392aa282</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="7419fb71-5c79-4fb6-9e59-b9fbc1d63e45" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>8eb61369-ddab-4205-9a55-81054c2e4afb</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>0a76495e-bc0d-4cea-bae0-85da1e15c74f</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="7d20fad4-4b50-4841-94e9-5f38571de063" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>6a9cff0d-c7c5-440a-bd8d-0007e15eae4d</subsheetid><loginhibit /><display x="-15" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>bcb21a17-13b7-404f-b11f-16d75385411f</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="9219c3c4-effd-4dfc-9020-8dafd054ea8f" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>602b7aad-2626-40ba-8c4b-1ec926ae9098</subsheetid><loginhibit /><display x="-30" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>1aab3a10-a813-470b-97c8-57938a0d0024</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage><stage stageid="aed480e9-2938-4d36-b400-a3bd2580921a" name="Raise Exception If Appropriate" type="SubSheet"><subsheetid>842c79f8-aa64-4781-ad18-3982e21f0fd1</subsheetid><loginhibit /><display x="15" y="-15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="flag" name="Success" narrative="Flag indicating success or otherwise" expr="[Success]" /><input type="text" name="Error Message" narrative="The message detailing the lack of success, empty if the current state indicates success" expr="[Message]" /></inputs><onsuccess>709d1a16-f19e-4504-ae79-4a48d1e058c7</onsuccess><processid>8043916d-2ef9-45b8-ab66-f4c20ef1b8e3</processid></stage></process></object>
        <object id="1b13f5b8-01d1-441e-bd7f-54884a24d71f" name="Utility - Strings" xmlns="http://www.blueprism.co.uk/product/process"><process name="Utility - Strings" version="6.6.0.15260" bpversion="6.6.0.15260" narrative="Utility functions for manipulating text." byrefcollection="true" type="object" runmode="Background"><appdef><element name="Application Root"><id>b30f5d67-5c3c-49c9-8f9b-66d573097498</id><type>Application</type><basetype>Application</basetype><datatype>unknown</datatype><diagnose>False</diagnose></element></appdef><view><camerax>60</camerax><cameray>-35</cameray><zoom version="2">1.25</zoom></view><preconditions /><endpoint narrative="" /><subsheet subsheetid="9a74af4c-280a-4e30-bdbb-21295b6256ca" type="CleanUp" published="True"><name>Clean Up</name><view><camerax>0</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="65117a41-f7ff-4f3f-abd1-7a3cbe18cfda" type="Normal" published="True"><name>Remove Non-word Characters</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="d8fea7a8-24d9-41c8-9397-a3839e6ffdc1" type="Normal" published="True"><name>Generate New GUID</name><view><camerax>0</camerax><cameray>-84</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e70e8f13-02df-4b14-bb74-6fd5c4c95928" type="Normal" published="True"><name>Delete Characters</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="6a710d42-8f41-45d0-9e74-1eddf74c0e75" type="Normal" published="True"><name>Split Lines by Length</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e6bab90c-ddfd-48c0-af38-804fe4f770ed" type="Normal" published="True"><name>Split Lines</name><view><camerax>0</camerax><cameray>-6</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a5871062-5ad2-4950-afbc-cb5b1b7a7f0b" type="Normal" published="True"><name>Split Text</name><view><camerax>0</camerax><cameray>-56</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a2c09338-7850-4daf-a545-8972d333b826" type="Normal" published="True"><name>Join Text</name><view><camerax>65</camerax><cameray>75</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a854bb6a-4399-4e51-8fc3-64f9e1d4f896" type="Normal" published="True"><name>Join Lines</name><view><camerax>152</camerax><cameray>42</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="fcddf4bf-83af-4431-88db-cc2c88390cec" type="Normal" published="True"><name>Get Newline Character</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="06780f7c-9622-4d84-9db3-bb56a2ff9f36" type="Normal" published="True"><name>Extract Regex Values</name><view><camerax>70</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="a6b6398e-c21a-4c4e-9742-65ccad8370d9" type="Normal" published="True"><name>Test Regex Match</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="5110b353-010b-4874-97bd-8b7621c24384" type="Normal" published="True"><name>Format Number</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="ef8de52d-842b-45f0-8f1b-619bc97d4bbc" type="Normal" published="True"><name>PadLeft</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="818441a5-ffec-4841-b0ea-00712caf63aa" type="Normal" published="True"><name>Get XML Elements</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="e8af11f7-dfd4-4c86-9935-e83828b9e711" type="Normal" published="True"><name>Get XML Attribute</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="f9add4d4-31de-4c0f-a109-0b51fa576a23" type="Normal" published="True"><name>Get Collection as CSV</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="f5b26213-5463-4b2d-b10f-b188876b436f" type="Normal" published="True"><name>Get CSV As Collection</name><view><camerax>248</camerax><cameray>-87</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="040cc29a-27ac-402c-8a66-328554dd4bc0" type="Normal" published="True"><name>Escape Sendkeys String</name><view><camerax>0</camerax><cameray>5</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="527ca986-a03f-4231-880e-5b1c244b035e" type="Normal" published="True"><name>Compare Font Text</name><view><camerax>150</camerax><cameray>139</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="0244396a-1d3d-4892-b6cb-461468f4c7e1" type="Normal" published="True"><name>InStr</name><view><camerax>0</camerax><cameray>-2</cameray><zoom version="2">1.25</zoom></view></subsheet><subsheet subsheetid="9ab28c01-86eb-458d-b8d9-74f98926d266" type="Normal" published="True"><name>InStrRev</name><view><camerax>0</camerax><cameray>0</cameray><zoom version="2">1.25</zoom></view></subsheet><stage stageid="d8c547cc-60d0-459b-876f-90bf696a5757" name="Start" type="Start"><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>807e7d33-91e2-4241-a85e-ea0718fc487d</onsuccess></stage><stage stageid="807e7d33-91e2-4241-a85e-ea0718fc487d" name="End" type="End"><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1a8c9ebd-54e1-442f-a6c7-e87df3b59232" name="Stage1" type="ProcessInfo"><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><references><reference>System.Data.dll</reference><reference>System.Xml.dll</reference><reference>System.Drawing.dll</reference></references><imports><import>System</import><import>System.Drawing</import><import>System.Data</import><import>System.IO</import><import>System.XML</import><import>System.Diagnostics</import><import>Microsoft.VisualBasic</import><import>System.Data</import><import>system.text.regularexpressions</import><import>System.Text</import><import>System.Collections.Generic</import><import>Microsoft.VisualBasic.FileIO</import></imports><language>visualbasic</language><globalcode><![CDATA[


]]></globalcode><code><![CDATA[Public Function GetDataTable(ByVal ColumnNamesCSV As String, ByVal ColumnTypesCSV As String) As DataTable

	Dim objTable As DataTable
	Dim objColumn As DataColumn
	Dim aColumnNames As String() = ColumnNamesCSV.Split(",")
	Dim aColumnTypes As String() = ColumnTypesCSV.Split(",")

	Try
		objTable = New DataTable
		For i As Integer = 0 To aColumnNames.Length - 1
			objColumn = New DataColumn 
			objColumn.DataType = System.Type.GetType(aColumnTypes(i).Trim)
			objColumn.ColumnName = aColumnNames(i).Trim
			objTable.Columns.Add(objColumn)
		Next
		
	Catch e As Exception
		objTable = nothing	
	End Try

	Return objTable

End Function

Private Function SplitStringInto( _
 ByVal fldName As String, _
 ByVal txt As String, _
 ByVal ParamArray splitters() As String) As DataTable
	Dim dt As New DataTable()
	dt.Columns.Add(fldName, GetType(String))

	For Each s As String In txt.Split(splitters, StringSplitOptions.None)
		dt.Rows.Add(New Object() {s})
	Next

	Return dt
End Function

Public Shared Function ParseCsvToList(ByVal csv As String) As List(Of String())
	Dim result = New List(Of String())()

	Using sr As New StringReader(csv)
		Using lineParser As New TextFieldParser(sr)
			lineParser.TextFieldType = FieldType.Delimited
			lineParser.SetDelimiters(",")
			While Not lineParser.EndOfData

				Dim fields As String() = lineParser.ReadFields()
				result.Add(fields)
			End While
		End Using
	End Using

	Return result
End Function


''' -----------------------------------------------------------------------------
''' <summary>
''' Serialises a datatable to the supplied stream.
''' </summary>
''' <param name="Writer">The stream writr to which the datatable should
''' be serialised. Eg this may correspond to a file stream.</param>
''' <param name="Table">The datatable to be serialised.</param>
''' <param name="IncludeHeaderRow">When true, the column headers will
''' be wrtten out on the first row.</param>
''' -----------------------------------------------------------------------------
Public Shared Sub WriteDataTable(ByVal Writer As StringBuilder, ByVal Table As DataTable, ByVal IncludeHeaderRow As Boolean)
	If IncludeHeaderRow Then
		For i As Integer = 0 To Table.Columns.Count - 1
			WriteItem(Writer, Table.Columns(i).ColumnName)
			If i < Table.Columns.Count - 1 Then
				Writer.Append(",")
			Else
				Writer.Append(vbCrLf)
			End If
		Next
	End If

	For Each Row As DataRow In Table.Rows
		For i As Integer = 0 To Table.Columns.Count - 1
			WriteItem(Writer, Row(i).ToString)
			If i < Table.Columns.Count - 1 Then
				Writer.Append(",")
			Else
				Writer.Append(vbCrLf)
			End If
		Next
	Next
End Sub



''' -----------------------------------------------------------------------------
''' <summary>
''' Writes a csv data cell, escaping quotes and new lines where necessary.
''' </summary>
''' <param name="Writer">The writer to which the item should be written.</param>
''' <param name="Value">The value to be written.</param>
''' -----------------------------------------------------------------------------
Private Shared Sub WriteItem(ByVal Writer As StringBuilder, ByVal Value As String)
	If Value.IndexOfAny(("""," & vbCrLf).ToCharArray) > -1 Then
		Writer.Append("""" & Value.Replace("""", """""") & """")
	Else
		Writer.Append(Value)
	End If
End Sub


'Splits text into lines of approximately equal length, looking for
'gaps between words as splitting points in order to avoid ugly
'line splitting in the middle of words. Useful for mainframe memos
'where a long message needs to be broken into lines of up to 80
'characters.
'
Private Shared Function SplitTextByLengthEngine(Texttosplit As String, MaxLineLength As Integer) As List(of String)
	Dim RetVal as New List(Of String)
	MaxLineLength =  Math.Min(MaxLineLength, TexttoSplit.Length)

	'We look for the last space within (MaxLineLength + 1) and then work backwards
	'(always by at least one) to find the last non-space character. We can then
	'chop at this point, assuming such exists. Otherwise we just chop at the
	'requested line length accepting we will be splitting a word.
	Dim LastIndex as integer = TexttoSplit.Substring(0, Math.Min(MaxLineLength + 1, TextToSplit.Length)).LastIndexOf(" ")

	If TextToSplit.Length <= MaxLineLength OrElse LastIndex = -1 Then
		RetVal.Add(TexttoSplit.Substring(0, MaxLineLength))
		Dim RemainingText As String = TexttoSplit.SubString(MaxLineLength,TextToSplit.Length - MaxLineLength).Trim()
		If RemainingText.Length > 0 Then RetVal.AddRange(SplitTextByLengthEngine(RemainingText, MaxLineLength))
	Else
		'Track backwards to find previous non-space character
		Dim Index As Integer = LastIndex - 1
		While Index >= 0 Andalso TextToSplit.SubString(Index, 1) = " "
			Index -=1
		End While
		If Index >= 0 Then
			RetVal.Add(TextToSplit.SubString(0, Index + 1))
			Dim RemainingText As String = TexttoSplit.SubString(Index + 1, TextToSplit.Length - (Index + 1)).Trim()
			If RemainingText.Length > 0 Then RetVal.AddRange(SplitTextByLengthEngine(RemainingText, MaxLineLength))
		Else
			'Must all be spaces. We assume this are to be ignored
		End If
	End If

	Return RetVal
End Function

]]></code></stage><stage stageid="0bf7814a-647b-4bcb-b6a6-3d24dfd5b736" name="Clean Up" type="SubSheetInfo"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b6df3b6c-090d-4126-a16c-8caa889b0646" name="Generate New GUID" type="SubSheetInfo"><subsheetid>d8fea7a8-24d9-41c8-9397-a3839e6ffdc1</subsheetid><narrative>Generates a new globally unique identifier as text.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="0c56e2f8-68ce-48a3-97ad-81e1f076e9ce" name="new" type="Note"><narrative>Initialise Page

This is an optional page where you might choose to perform some initialisation tasks after your business object is loaded.

The initialise action will be called automatically immediately after loading your business object.

You will not be able to call this action from a business process, nor will it be called at any other time than after the creation of the object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="be35a29d-2b71-42e1-9ca7-4534046d5dfc" name="Start" type="Start"><subsheetid>d8fea7a8-24d9-41c8-9397-a3839e6ffdc1</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>bd80e756-d12c-4dc7-9d64-bbde733f60b7</onsuccess></stage><stage stageid="bd80e756-d12c-4dc7-9d64-bbde733f60b7" name="Get GUID" type="Code"><subsheetid>d8fea7a8-24d9-41c8-9397-a3839e6ffdc1</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="id" stage="GUID" /></outputs><onsuccess>4930704e-00c1-456a-8aad-02220fd81c99</onsuccess><code><![CDATA[dim g as new Guid
id = guid.newguid.tostring]]></code></stage><stage stageid="695dad7d-b634-454c-9171-baf489698067" name="GUID" type="Data"><subsheetid>d8fea7a8-24d9-41c8-9397-a3839e6ffdc1</subsheetid><display x="-60" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4930704e-00c1-456a-8aad-02220fd81c99" name="End1" type="End"><subsheetid>d8fea7a8-24d9-41c8-9397-a3839e6ffdc1</subsheetid><loginhibit /><display x="15" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="GUID" narrative="The new guid" stage="GUID" /></outputs></stage><stage stageid="2271a79e-27e5-4434-b5be-146e02946317" name="new" type="Note"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><narrative>Clean Up Page

This is an optional page where you might choose to perform some finalisation (or "cleanup") tasks as your business object is closed down.

The cleanup action will be called automatically immediately after closing your business object at the end of a business process.

You will not be able to call this action from a business process, nor will it be called at any other time than before the disposal of the business object.</narrative><display x="-180" y="60" w="180" h="230" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="36451c72-b274-4817-a153-beb1e8a6e76a" name="Start" type="Start"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>9a8c4505-8606-4a0c-b118-09a6b9932b3b</onsuccess></stage><stage stageid="9a8c4505-8606-4a0c-b118-09a6b9932b3b" name="End" type="End"><subsheetid>9a74af4c-280a-4e30-bdbb-21295b6256ca</subsheetid><loginhibit /><display x="30" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="a130f3e8-fad5-413c-a068-75ac20600244" name="Remove Non-word Characters" type="SubSheetInfo"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><narrative>Trims non word characters from the begining and end of the text. Non word characters are any character that is NOT in the ranges a-z A-Z _ and 0-9</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="dd85470c-e10b-4f0b-b729-c006136517eb" name="Start" type="Start"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text" narrative="The text to remove the non word characters from" stage="Text" /></inputs><onsuccess>a2426b0a-eab8-4571-a6d9-fa89c49559be</onsuccess></stage><stage stageid="3eae8050-c325-49f6-9e3f-ee12400ca5d4" name="End" type="End"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Trimmed Text" narrative="The text with the non word characters removed" stage="Trimmed Text" /></outputs></stage><stage stageid="a2426b0a-eab8-4571-a6d9-fa89c49559be" name="Trim" type="Code"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text" expr="[Text]" /></inputs><outputs><output type="text" name="Trimmed Text" stage="Trimmed Text" /></outputs><onsuccess>3eae8050-c325-49f6-9e3f-ee12400ca5d4</onsuccess><code><![CDATA[
dim r as new regex("^\W*|\W*$")
Trimmed_Text = r.replace(text, "")
]]></code></stage><stage stageid="1f3570bd-8411-4e92-8fd3-1dd418411570" name="Text" type="Data"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">    qwerqwer    </initialvalue><private /><alwaysinit /></stage><stage stageid="0967c44a-1a53-49a7-8bb4-e1f6733a41b0" name="Trimmed Text" type="Data"><subsheetid>65117a41-f7ff-4f3f-abd1-7a3cbe18cfda</subsheetid><display x="90" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="00a08897-25f2-48e0-aa88-e40bb27b94e7" name="Split Lines" type="SubSheetInfo"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><narrative>Splits multiple line text into a collection text values with a single row per line.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="5f6c9d2f-247d-42a7-bc18-8b4283b21c80" name="Start" type="Start"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text to Split" narrative="The text to split" stage="Text to Split" /></inputs><onsuccess>ee14a8f3-9fd3-4342-abcf-3cbe1d57431a</onsuccess></stage><stage stageid="370a75cf-d54f-438d-b7b1-0f931038d7a2" name="End" type="End"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Split Values" narrative="The resulting collection containing the split values" stage="Split Values" /></outputs></stage><stage stageid="b655e5fa-2cb9-487a-b4e8-8faf44531e8d" name="Text to Split" type="Data"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="ee14a8f3-9fd3-4342-abcf-3cbe1d57431a" name="Split" type="Code"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><loginhibit /><display x="15" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text to Split" expr="[Text to Split]" /></inputs><outputs><output type="collection" name="Split Values" stage="Split Values" /></outputs><onsuccess>370a75cf-d54f-438d-b7b1-0f931038d7a2</onsuccess><code><![CDATA[Split_Values = SplitStringInto("Value", _
 Text_to_Split, vbCrLf, vbLf, vbCr)]]></code></stage><stage stageid="5c6c7749-e4c1-45ef-9fb7-a7b7ca77214d" name="Split Values" type="Collection"><subsheetid>e6bab90c-ddfd-48c0-af38-804fe4f770ed</subsheetid><display x="120" y="90" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Value" type="text" /></collectioninfo></stage><stage stageid="99d3d4f8-598b-44be-9744-5142537aff99" name="Split Text" type="SubSheetInfo"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><narrative>Splits text with a given delimiter into a collection of text values.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="97069dc2-f2a1-4f61-a3f6-e26e88d1da58" name="Start" type="Start"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><loginhibit /><display x="120" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text to Split" narrative="The text to split" stage="Text to Split" /><input type="text" name="Split Char" narrative="The split delimiter" stage="Split Char" /><input type="text" name="Collection Field Name" narrative="The name of the field for the resulting collection" stage="Collection Field Name" /></inputs><onsuccess>d1694d87-2fff-467b-9a07-5f5dd570bd41</onsuccess></stage><stage stageid="2972f0ee-292a-4bb0-bed5-c9a19f8945f6" name="End" type="End"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><loginhibit /><display x="120" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Split Values" narrative="The resulting collection containing the split values" stage="Split Values" /></outputs></stage><stage stageid="33bff0c5-22b9-4ab3-ac0a-c352221a4f79" name="Text to Split" type="Data"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><display x="195" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d1694d87-2fff-467b-9a07-5f5dd570bd41" name="Split Text" type="Code"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><loginhibit /><display x="120" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text to Split" expr="[Text to Split]" /><input type="text" name="Split Char" expr="[Split Char]" /><input type="text" name="Collection Field Name" expr="[Collection Field Name]" /></inputs><outputs><output type="collection" name="Split Values" stage="Split Values" /></outputs><onsuccess>2972f0ee-292a-4bb0-bed5-c9a19f8945f6</onsuccess><code><![CDATA[Split_Values = SplitStringInto( _
 Collection_Field_Name, _
 Text_to_Split, Split_Char)]]></code></stage><stage stageid="17ffca42-be51-4343-90e3-035d29366b7f" name="Split Values" type="Collection"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><display x="225" y="90" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="05ba6aed-e91b-4383-9001-69b78a2e474d" name="Split Char" type="Data"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><display x="255" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="20afce2f-59e1-4fc1-896c-ab71d2f871b2" name="Collection Field Name" type="Data"><subsheetid>a5871062-5ad2-4950-afbc-cb5b1b7a7f0b</subsheetid><display x="45" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="786d2d47-37c8-4324-8e43-8fc75f0eca95" name="Join Text" type="SubSheetInfo"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><narrative>Joins values from a collection into a single line of text using a given delimiter between values.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="ccd8aec8-19c3-4d48-a184-a8895ed1ebbf" name="Start" type="Start"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Values" narrative="The text values collection to join" stage="Values" /><input type="text" name="Join Character" narrative="The delimeter between text values" stage="Join Character" /><input type="flag" name="Trim Values" narrative="Set true to apply trimming to the values" stage="Trim Values" /></inputs><onsuccess>b05ea94b-f0d1-4047-b854-04877801ef0b</onsuccess></stage><stage stageid="7dbff5b3-7cd4-406a-9650-265fb88988ef" name="End" type="End"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="285" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Joined Text" narrative="The resulting joined text" stage="Joined Text" /></outputs></stage><stage stageid="13059fce-ee5a-4fbc-a76c-efc5db5d1240" name="Values" type="Collection"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Item Value" type="text" /></collectioninfo></stage><stage stageid="b0cf2931-5486-4779-b457-e8af03062df8" name="Join Character" type="Data"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><display x="150" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="019a4343-9b5c-4400-8b76-5efbf2156032" name="Join Lines" type="SubSheetInfo"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><narrative>Joins values from a collection into multiline text.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="6f376101-4dd4-43b4-85a0-19dd1090df02" name="Start" type="Start"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><loginhibit /><display x="15" y="-75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Values" narrative="The text values collection to join" stage="Values" /><input type="flag" name="Trim Lines" narrative="Set true to apply trimming to the lines" stage="Trim Lines" /></inputs><onsuccess>816591dd-a42d-436b-9fd0-4ca095d78e29</onsuccess></stage><stage stageid="f2d9cbef-9cdb-4daa-bbb6-5d3dc0548c2e" name="Values" type="Collection"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><display x="90" y="-75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="579d0466-882d-47ce-a2c3-d4a7f25eaa8c" name="Joined Text" type="Data"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><display x="90" y="285" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="724a0223-71bd-48d0-bcca-f4d554fcf91b" name="End" type="End"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><loginhibit /><display x="15" y="135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Joined Text" narrative="The resulting joined text" stage="Joined Text" /></outputs></stage><stage stageid="8bcc24ca-f588-4c3c-b09b-fe08b425b5db" name="Joined Text" type="Data"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><display x="90" y="135" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="e3b84350-20a1-442e-bebb-0232a5b73299" name="Join Text" type="SubSheet"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Values" expr="[Values]" /><input type="text" name="Join Character" expr="[Join Character]" /><input type="flag" name="Trim Values" expr="[Trim Lines]" /></inputs><outputs><output type="text" name="Joined Text" stage="Joined Text" /></outputs><onsuccess>724a0223-71bd-48d0-bcca-f4d554fcf91b</onsuccess><processid>a2c09338-7850-4daf-a545-8972d333b826</processid></stage><stage stageid="816591dd-a42d-436b-9fd0-4ca095d78e29" name="Get Carriage Return" type="Code"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><loginhibit /><display x="15" y="0" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Join Character" stage="Join Character" /></outputs><onsuccess>e3b84350-20a1-442e-bebb-0232a5b73299</onsuccess><code><![CDATA[Join_Character = vbcrlf]]></code></stage><stage stageid="9a8e3b40-f136-4397-b62b-4a69cd010c37" name="Join Character" type="Data"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><display x="105" y="0" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="13a0e17b-9b82-4dd6-8e3a-313890d8caf3" name="For Each Value" type="LoopStart"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="15" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>e4c0da52-0523-4109-b705-3fadd035597b</onsuccess><groupid>fffab271-8052-4aaf-9a1e-1402d77939ea</groupid><looptype>ForEach</looptype><loopdata>Values</loopdata></stage><stage stageid="98f2416b-599a-42d1-a76f-d41ea3e23572" name="Next Value" type="LoopEnd"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="195" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>7dbff5b3-7cd4-406a-9650-265fb88988ef</onsuccess><groupid>fffab271-8052-4aaf-9a1e-1402d77939ea</groupid></stage><stage stageid="b05ea94b-f0d1-4047-b854-04877801ef0b" name="Reset Output" type="Calculation"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>13a0e17b-9b82-4dd6-8e3a-313890d8caf3</onsuccess><calculation expression="&quot;&quot;" stage="Joined Text" /></stage><stage stageid="49168356-8449-4cb3-9798-0796b15b77a3" name="Append Value" type="Calculation"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="150" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>98f2416b-599a-42d1-a76f-d41ea3e23572</onsuccess><calculation expression="[Joined Text] &amp; [Values.Item Value] &amp; [Join Character]" stage="Joined Text" /></stage><stage stageid="54cf1a89-b26c-4916-ab45-8f1e80b9b86f" name="Trim Lines" type="Data"><subsheetid>a854bb6a-4399-4e51-8fc3-64f9e1d4f896</subsheetid><display x="150" y="-75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6aa04814-e2fd-4630-b391-bfe892ddc8df" name="Trim Values" type="Data"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><display x="210" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="e4c0da52-0523-4109-b705-3fadd035597b" name="Trim?" type="Decision"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="[Trim Values]" /><ontrue>91ef5da4-e47e-4442-98ec-d46cbd8d8692</ontrue><onfalse>49168356-8449-4cb3-9798-0796b15b77a3</onfalse></stage><stage stageid="91ef5da4-e47e-4442-98ec-d46cbd8d8692" name="Do Trim" type="Calculation"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="105" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>10ac89cc-d24c-4622-ad92-34ebe2365083</onsuccess><calculation expression="Trim([Values.Item Value])" stage="Values.Item Value" /></stage><stage stageid="10ac89cc-d24c-4622-ad92-34ebe2365083" name="anchor1" type="Anchor"><subsheetid>a2c09338-7850-4daf-a545-8972d333b826</subsheetid><loginhibit /><display x="105" y="150" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>49168356-8449-4cb3-9798-0796b15b77a3</onsuccess></stage><stage stageid="b837f601-57e9-4136-8dee-db8ca9ebf15f" name="Format Number" type="SubSheetInfo"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><narrative>Formats a number into comma-delimited triplets, as appropriate. Eg 123456.789 becomes 123,456.789</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="df1e573a-3e89-43a8-8e6a-61f1840b3869" name="Start" type="Start"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><loginhibit /><preconditions><condition narrative="None" /></preconditions><postconditions><condition narrative="The number will have been formatted." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Input Number" narrative="The number to format" stage="Input Number" /></inputs><onsuccess>df4ce97f-4b9c-4087-a9bf-c6e35eba156b</onsuccess></stage><stage stageid="dd89bdff-2f14-4268-98f4-7ef3747a5233" name="End" type="End"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Formatted Currency Numbers" narrative="The resulting formatted number" stage="Formatted Currency Value" /></outputs></stage><stage stageid="b0f25370-1f87-4edd-b03a-0a3ac16537fb" name="Input Number" type="Data"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>987654123456.789</initialvalue><private /><alwaysinit /></stage><stage stageid="df4ce97f-4b9c-4087-a9bf-c6e35eba156b" name="Format" type="Code"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><loginhibit /><display x="15" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="number" name="Input" expr="[Input Number]" /></inputs><outputs><output type="text" name="Output" stage="Formatted Currency Value" /></outputs><onsuccess>dd89bdff-2f14-4268-98f4-7ef3747a5233</onsuccess><code><![CDATA[Output = Input.ToString("N")]]></code></stage><stage stageid="a6d6d631-89c5-4460-9771-6a15a0e1d7d5" name="Formatted Currency Value" type="Data"><subsheetid>5110b353-010b-4874-97bd-8b7621c24384</subsheetid><display x="90" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="b3013d63-9017-4dd9-bcf6-5e0d09ab372f" name="PadLeft" type="SubSheetInfo"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><narrative>Ensures that a string (usually a number) is of fixed width, by padding with a special character on the left.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="af05cd75-42db-4c09-875d-3fedfc3ca0a2" name="Start" type="Start"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><preconditions><condition narrative="None" /></preconditions><postconditions><condition narrative="The supplied text will have been padded to be at least the number of desired characters." /></postconditions><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Input String" narrative="The string to pad" stage="Input String" /><input type="number" name="Target Width" narrative="The total number of characters required after padding" stage="Target Width" /><input type="text" name="Padding Character" narrative="The character to pad with" stage="Padding Character" /></inputs><onsuccess>6527cdd9-47d7-4784-bd96-e63afa4ec955</onsuccess></stage><stage stageid="f432b972-ae44-4485-943b-87848fd43487" name="End" type="End"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="15" y="165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Padded String" narrative="The resultant padded string" stage="Input String" /></outputs></stage><stage stageid="888a814c-a03d-43f0-b6d6-30501b8b3250" name="Input String" type="Data"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">123</initialvalue><private /><alwaysinit /></stage><stage stageid="ea8d90c7-c341-4859-919c-4ecc076162eb" name="Target Width" type="Data"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><display x="150" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>5</initialvalue><private /><alwaysinit /></stage><stage stageid="56c037f3-4ff0-4923-974c-e925c84e69c8" name="Padding Character" type="Data"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><display x="210" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6527cdd9-47d7-4784-bd96-e63afa4ec955" name="Blank Padding Character?" type="Decision"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="15" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="Len([Padding Character]) = 0" /><ontrue>26f66718-649a-4472-965d-0e1e125e7473</ontrue><onfalse>b6b30eec-0ee3-4316-a9af-d0a55d5ec137</onfalse></stage><stage stageid="26f66718-649a-4472-965d-0e1e125e7473" name="Use Space for Padding" type="Calculation"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="135" y="-45" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>6acfdd2b-9298-4841-9111-003fc203edd0</onsuccess><calculation expression="&quot; &quot;" stage="Padding Character" /></stage><stage stageid="6acfdd2b-9298-4841-9111-003fc203edd0" name="anchor2" type="Anchor"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="135" y="0" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>b6b30eec-0ee3-4316-a9af-d0a55d5ec137</onsuccess></stage><stage stageid="b6b30eec-0ee3-4316-a9af-d0a55d5ec137" name="anchor3" type="Anchor"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="15" y="0" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>e13c9c2d-2cbe-4262-828c-6307a805d9c1</onsuccess></stage><stage stageid="e13c9c2d-2cbe-4262-828c-6307a805d9c1" name="Long Enough?" type="Decision"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="Len([Input String]) &gt;= [Target Width]" /><ontrue>f432b972-ae44-4485-943b-87848fd43487</ontrue><onfalse>87af11ea-fa7e-45cf-b02a-fd6edeae0b85</onfalse></stage><stage stageid="87af11ea-fa7e-45cf-b02a-fd6edeae0b85" name="Insert Padding" type="Calculation"><subsheetid>ef8de52d-842b-45f0-8f1b-619bc97d4bbc</subsheetid><loginhibit /><display x="135" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>6acfdd2b-9298-4841-9111-003fc203edd0</onsuccess><calculation expression="[Padding Character] &amp; [Input String]" stage="Input String" /></stage><stage stageid="92edef27-4b78-40dd-97bd-e5a4f9169214" name="Get XML Elements" type="SubSheetInfo"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><narrative>Gets a collection of xml elements with a given name from an xml document.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="04bec0f1-e8bb-4c30-a5d1-b7eee243e6f9" name="Start" type="Start"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="135" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="XML" narrative="The xml to get elements from" stage="XML" /><input type="text" name="Element Name" narrative="The name of the xml elements to get" stage="Element Name" /></inputs><onsuccess>17f4a862-c7e3-44c3-a373-5b325fdaab8a</onsuccess></stage><stage stageid="e4b99f55-7171-46d6-992b-db797e99b1ed" name="End" type="End"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="135" y="165" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Elements" narrative="The collection of xml elements that match the given name and for each element its outer xml" stage="Elements" /></outputs></stage><stage stageid="31472749-70ee-477e-a042-fcf5a25a4099" name="XML" type="Data"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><display x="-75" y="60" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">&lt;?xml version="1.0" encoding="utf-8" ?&gt; &lt;PotentialGrading&gt;  &lt;ServiceIdentifier&gt;ABC&lt;/ServiceIdentifier&gt;  &lt;Episode ID="a97fe424-0d1f-4e7c-9e9a-9b3c9e03d594"&gt;   &lt;Patient DateOfBirth="18/02/1970" Gender="M" PartPostcode="YO51" EthnicOrigin="W" Country="United Kingdom"    Region="North Yorkshire" RegisteredBlind="0" RegisteredPartiallySighted="1" HealthProvider="PCT"    Insurance="Cheap as Chips Insurance"&gt;The patient ID goes here&lt;/Patient&gt;   &lt;Screening Date="2007/09/06" GradingCodeSet="NGC" ImageCount="4"&gt;    &lt;Item Code="Examiner Classification" Value="1" /&gt;    &lt;Item Code="Eye Screening Urgency" Value="2" /&gt;    &lt;Item Code="Opthalmologist Care" Value="2" /&gt;    &lt;Item Code="Technical Gradability Code" Value="1" /&gt;    &lt;Item Code="01 Visual Acuity Pinhole" Value="0" Laterality="right" /&gt;    &lt;Item Code="01 Visual Acuity Pinhole" Value="0" Laterality="left" /&gt;    &lt;Item Code="02 Visual Acuity Spectacles" Value="0" Laterality="right" /&gt;    &lt;Item Code="02 Visual Acuity Spectacles" Value="0" Laterality="left" /&gt;    &lt;Item Code="03 Visual Acuity Standard" Value="1" Laterality="right" /&gt;    &lt;Item Code="03 Visual Acuity Standard" Value="1" Laterality="left" /&gt;    &lt;Item Code="04 Visual Acuity" Value="" Laterality="right"&gt;Free text entry&lt;/Item&gt;    &lt;Item Code="04 Visual Acuity" Value="" Laterality="left"&gt;Free text entry&lt;/Item&gt;    &lt;Item Code="06 Dilation" Value="1" Laterality="right" /&gt;    &lt;Item Code="06 Dilation" Value="1" Laterality="left" /&gt;    &lt;Image Length="104644" CameraID="Camera1" CameraModelID="CameraModel1" CaptureDateTime="2007/09/06T01:54:59"     Eye="L"&gt;1121017(5)L.jpg&lt;/Image&gt;    &lt;Image Length="107565" CameraID="Camera2" CameraModelID="CameraModel2" CaptureDateTime="2007/09/06T01:54:59"     Eye="L"&gt;1121017(6)L.jpg&lt;/Image&gt;    &lt;Image Length="107441" CameraID="Camera3" CameraModelID="CameraModel3" CaptureDateTime="2007/09/06T01:54:59"     Eye="R"&gt;1121017(5)R.jpg&lt;/Image&gt;    &lt;Image Length="112472" CameraID="Camera4" CameraModelID="CameraModel4" CaptureDateTime="2007/09/06T01:54:59"     Eye="R"&gt;1121017(6)R.jpg&lt;/Image&gt;   &lt;/Screening&gt;   &lt;Notes&gt;Free text notes go here&lt;/Notes&gt;  &lt;/Episode&gt; &lt;/PotentialGrading&gt; </initialvalue><private /><alwaysinit /></stage><stage stageid="68a0eeb2-9377-4b12-8f31-5ae52e7109e4" name="Element Name" type="Data"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><display x="-75" y="90" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">Image</initialvalue><private /><alwaysinit /></stage><stage stageid="7b46fe82-142a-411b-bf80-b2f0047952da" name="Get Elements" type="Code"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="135" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="XML" expr="[XML]" /><input type="text" name="Element" expr="[Element Name]" /></inputs><outputs><output type="collection" name="Elements" stage="Elements" /></outputs><onsuccess>e4b99f55-7171-46d6-992b-db797e99b1ed</onsuccess><code><![CDATA[
dim table as datatable = GetDataTable("XML", "System.String")
dim row as datarow
dim doc as new xmldocument
dim list as xmlnodelist

doc.loadxml(xml)
list = doc.getelementsbytagname(element)

for each n as xmlnode in list
	row = table.newrow()
	row("XML") = n.outerxml
	table.rows.Add(row)
next

Elements = table
]]></code></stage><stage stageid="d693d2fb-a196-4ddc-b2e9-b41cbe618fc3" name="Elements" type="Collection"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><display x="-75" y="165" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="17f4a862-c7e3-44c3-a373-5b325fdaab8a" name="Blank XML?" type="Decision"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="135" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><decision expression="Len(Trim([XML])) = 0" /><ontrue>6eb4f747-35c0-4e57-acbf-be93ac0a1bbb</ontrue><onfalse>7b46fe82-142a-411b-bf80-b2f0047952da</onfalse></stage><stage stageid="6eb4f747-35c0-4e57-acbf-be93ac0a1bbb" name="anchor1" type="Anchor"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="240" y="-30" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>a460ec9b-8afb-4b37-8ae0-7545448b025d</onsuccess></stage><stage stageid="a460ec9b-8afb-4b37-8ae0-7545448b025d" name="anchor2" type="Anchor"><subsheetid>818441a5-ffec-4841-b0ea-00712caf63aa</subsheetid><loginhibit /><display x="240" y="165" w="10" h="10" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>e4b99f55-7171-46d6-992b-db797e99b1ed</onsuccess></stage><stage stageid="97b59270-9eda-4994-9fce-24d8b5d856a4" name="Get XML Attribute" type="SubSheetInfo"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><narrative>Gets the value of an xml attribute with a given name from an xml document fragment.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="802dd6e8-6b25-42b9-9af6-931049d4062a" name="Start" type="Start"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><loginhibit /><display x="120" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="XML" narrative="The xml document to get attributes from" stage="XML" /><input type="text" name="Attribute Name" narrative="The name of the xml attribute to get" stage="Attribute Name" /></inputs><onsuccess>76737597-b716-4a52-8cbc-dfe9b5ad1f0c</onsuccess></stage><stage stageid="bc64fcfd-4386-47ec-b799-19c5454d8374" name="End" type="End"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><loginhibit /><display x="120" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Value" narrative="The text value of the requested attribute" stage="Attribute Value" /></outputs></stage><stage stageid="18f2ae57-8ed9-457b-8763-82dedb14a5e0" name="XML" type="Data"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><display x="-90" y="75" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">&lt;iGrading&gt;&lt;Response transactionID="de3dc0b1-6b22-4b67-a13a-d42fff6188b9" status="Success" method="SubmitPotentialGradingWithImages" description="" /&gt;&lt;/iGrading&gt;</initialvalue><private /><alwaysinit /></stage><stage stageid="1941e7f9-164d-4aa2-b06e-cb3a579a30e4" name="Attribute Name" type="Data"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><display x="-90" y="105" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">method</initialvalue><private /><alwaysinit /></stage><stage stageid="c9ec2a39-8f5d-42cc-856f-33bdb2c16477" name="Attribute Value" type="Data"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><display x="-90" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="76737597-b716-4a52-8cbc-dfe9b5ad1f0c" name="Get Attribute" type="Code"><subsheetid>e8af11f7-dfd4-4c86-9935-e83828b9e711</subsheetid><loginhibit /><display x="120" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="XML" expr="[XML]" /><input type="text" name="Attribute" expr="[Attribute Name]" /></inputs><outputs><output type="text" name="Value" stage="Attribute Value" /></outputs><onsuccess>bc64fcfd-4386-47ec-b799-19c5454d8374</onsuccess><code><![CDATA[
dim i as integer = XML.indexof(Attribute)

if i > 0 then
	i += Attribute.length + 2
	value = XML.substring(i)
	value = value.substring(0, value.indexof(""""))
else
	value = ""
end if]]></code></stage><stage stageid="ebd306f5-f0a3-46cf-8a04-9bde5bf5cc3d" name="Get Collection as CSV" type="SubSheetInfo"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><narrative>Turns a collection into a list of comma seperated values.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1e2d9aba-666e-457b-adb8-c5991d17ba24" name="Start" type="Start"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" narrative="The collection to be converted to CSV" stage="Input Collection" /></inputs><onsuccess>e5946197-de00-4008-9491-d0ab28eaf2ee</onsuccess></stage><stage stageid="a619ae29-9260-47d3-b15c-f47342810991" name="End" type="End"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Collection CSV" narrative="The CSV representation of the Input Collection" stage="Output CSV" /></outputs></stage><stage stageid="18eea322-16ab-4d30-a555-5ac6638b468f" name="Input Collection" type="Collection"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><display x="120" y="-105" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="e5946197-de00-4008-9491-d0ab28eaf2ee" name="Serialise to CSV" type="Code"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><loginhibit /><display x="15" y="0" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="collection" name="Input Collection" expr="[Input Collection]" /></inputs><outputs><output type="text" name="Output CSV" stage="Output CSV" /></outputs><onsuccess>a619ae29-9260-47d3-b15c-f47342810991</onsuccess><code><![CDATA[
Dim SB As New StringBuilder
WriteDataTable(SB, Input_Collection, True)
Output_CSV = SB.ToString()]]></code></stage><stage stageid="9e68e0db-adac-4a32-bd92-c7d5bfe31468" name="Output CSV" type="Data"><subsheetid>f9add4d4-31de-4c0f-a109-0b51fa576a23</subsheetid><display x="90" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="47ea7760-3b58-442b-8271-c90d3c08f114" name="Split Lines by Length" type="SubSheetInfo"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><narrative>Splits text into lines of a given length using word boundries to find the split point.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="51996cc8-b76e-4de1-899a-66c678dbe1f3" name="Start" type="Start"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><loginhibit /><display x="0" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text to Split" narrative="The single line of text that needs to be split" stage="Text to Split" /><input type="number" name="Maximum Line Length" narrative="The maximum length of the line" stage="Maximum Line Length" /><input type="flag" name="Split Strictly by Length" narrative="Set true if the line should be split at character boundries instead of words" stage="Split Strictly by Length" /></inputs><onsuccess>0fd3f2cd-7fff-49c7-b4d9-4cfc3476793a</onsuccess></stage><stage stageid="52e75580-936a-4647-a154-e984ab8d199a" name="End" type="End"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><loginhibit /><display x="0" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="Line Count" stage="Line Count" /><output type="collection" name="Split Lines" stage="Split Lines" /></outputs></stage><stage stageid="0fd3f2cd-7fff-49c7-b4d9-4cfc3476793a" name="Split Lines By Length" type="Code"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><loginhibit /><display x="0" y="-45" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text to Split" expr="[Text to Split]" /><input type="number" name="Maximum Line Length" expr="[Maximum Line Length]" /><input type="flag" name="Strict Split" expr="[Split Strictly by Length]" /></inputs><outputs><output type="collection" name="Split Lines" stage="Split Lines" /><output type="number" name="Line Count" stage="Line Count" /></outputs><onsuccess>52e75580-936a-4647-a154-e984ab8d199a</onsuccess><code><![CDATA[Dim Values as List(Of String) = Nothing
If Strict_Split Then
      Values = New List(Of String)
      While Text_to_Split.Length > 0
            Dim NewLine As String = Text_to_Split.SubString(0, Math.Min(Maximum_Line_Length, Text_to_Split.Length))
            NewLine = NewLine.Trim()
            Values.Add(NewLine)

            If Text_to_Split.Length > NewLine.Length Then
                  Text_to_Split = Text_to_Split.SubString(NewLine.Length, Text_to_Split.Length - NewLine.Length)
            Else
                  Text_to_Split = ""
            End If
            Text_to_Split = Text_to_Split.Trim()
      End While
Else
      Values = SplitTextByLengthEngine(Text_to_Split, Maximum_Line_length)
End If

Split_Lines = New DataTable()
Split_Lines.Columns.Add("Line Text", GetType(String))
For Each s as String in Values
      Split_Lines.Rows.Add(New Object() {s})
Next

Line_Count = Values.Count]]></code></stage><stage stageid="c20b3e81-de90-46c1-a347-f094034ff28c" name="Text to Split" type="Data"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><display x="75" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">aaaa bbbb cccc dddd eeee ffff gggg hhhh iiii jjjj kkkk llll mmmm nnnn oooo pppp</initialvalue><private /><alwaysinit /></stage><stage stageid="e329d1c6-7a17-4af0-aa33-d6fb517adb68" name="Split Lines" type="Collection"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><display x="135" y="45" w="120" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Line Text" type="text" /></collectioninfo></stage><stage stageid="50f47d4a-73f4-46d2-93e1-24a2470d2df9" name="Maximum Line Length" type="Data"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><display x="150" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>6</initialvalue><private /><alwaysinit /></stage><stage stageid="d1f11813-b465-4a95-9194-630fb1424d37" name="Line Count" type="Data"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><display x="90" y="-60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="89c59225-5fb8-45a8-9fb8-a102420ddbc5" name="Split Strictly by Length" type="Data"><subsheetid>6a710d42-8f41-45d0-9e74-1eddf74c0e75</subsheetid><display x="225" y="-135" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="8d911bb3-c87f-4748-b226-9d2faaf45c95" name="Get CSV As Collection" type="SubSheetInfo"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><narrative>Turns a list of comma seperated values into a collection.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="90168461-d901-4bf7-886d-42176fe2fe34" name="Start" type="Start"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="150" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="CSV" narrative="The CSV to be converted into a collection" stage="CSV" /><input type="flag" name="First Row Is Header" narrative="Indicates whether the first row of the CSV file should be treated as headers" stage="First Row Is Header" /><input type="collection" name="Schema" narrative="Optional. A collection of column names. If left blank the column names will be taken from the first row. " stage="Schema" /></inputs><onsuccess>33e5caa5-61ec-4ef6-9ae8-01466a277896</onsuccess></stage><stage stageid="f06f6c62-eada-49b0-bf89-fdbb436e13fe" name="End" type="End"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="150" y="15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Output Collection" narrative="The collection converted from CSV" stage="Output Collection" /></outputs></stage><stage stageid="d5778bd8-695a-4c5e-8e8a-3764ae34f57f" name="CSV" type="Data"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="225" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c5b7df42-71fd-41f6-af35-62ed6f68caa0" name="Output Collection" type="Collection"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="45" y="15" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="617f911a-8f73-4ce5-b428-f1441214c602" name="First Row Is Header" type="Data"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="285" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue>False</initialvalue><private /><alwaysinit /></stage><stage stageid="ff699bd2-cd5a-4996-927a-e579b22b0313" name="Schema" type="Collection"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><narrative>The columns must appear in the same order as they appear in the CSV file</narrative><display x="390" y="-105" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Column Name" type="text" /></collectioninfo></stage><stage stageid="e1587123-3967-4743-b475-5499f8c41803" name="Get Newline Character" type="SubSheetInfo"><subsheetid>fcddf4bf-83af-4431-88db-cc2c88390cec</subsheetid><narrative>Gets the text representing the two newline characters used under windows (Carriage return followed by Line feed)</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b09f1e76-fb7c-4ef1-9a47-db4a1377d056" name="Start" type="Start"><subsheetid>fcddf4bf-83af-4431-88db-cc2c88390cec</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>af411d25-0e83-4e28-b4f3-30f43beb9b88</onsuccess></stage><stage stageid="bee4d44f-957c-415f-be9c-614e97d6f255" name="End" type="End"><subsheetid>fcddf4bf-83af-4431-88db-cc2c88390cec</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Newline Character" narrative="The new line text" stage="Newline Character" /></outputs></stage><stage stageid="af411d25-0e83-4e28-b4f3-30f43beb9b88" name="Get Newline Character" type="Code"><subsheetid>fcddf4bf-83af-4431-88db-cc2c88390cec</subsheetid><loginhibit /><display x="15" y="0" w="90" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Newline Character" stage="Newline Character" /></outputs><onsuccess>bee4d44f-957c-415f-be9c-614e97d6f255</onsuccess><code><![CDATA[Newline_Character = VbCrLf]]></code></stage><stage stageid="dde302f4-2b62-45c0-a8f3-190c52116470" name="Newline Character" type="Data"><subsheetid>fcddf4bf-83af-4431-88db-cc2c88390cec</subsheetid><display x="90" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="dd7d11e6-2bc7-40ed-ab47-1180482d82ed" name="Delete Characters" type="SubSheetInfo"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><narrative>Removes the given characters from the text.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="6e15c3f7-07db-4e3d-a24d-84be7e09b06e" name="Start" type="Start"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text Sample" narrative="The piece of text to be operated on" stage="Text Sample" /><input type="text" name="Characters to Delete" narrative="A string of characters to be deleted from the Text Sample" stage="Characters to Delete" /></inputs><onsuccess>89bfbefd-b0a3-472a-b72c-75105d0a7895</onsuccess></stage><stage stageid="c7719606-01b9-4626-9a24-4d9cf42d1e75" name="End" type="End"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Amended Sample" narrative="The amended sample, with the characters deleted" stage="Amended Sample" /></outputs></stage><stage stageid="78d405b1-aa60-46a6-af38-fb4bba55e752" name="Text Sample" type="Data"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="66318e10-ff11-43c1-9b3c-6ce27546458f" name="Characters to Delete" type="Data"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><display x="150" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="89bfbefd-b0a3-472a-b72c-75105d0a7895" name="Replace" type="Code"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text Sample" expr="[Text Sample]" /><input type="text" name="Characters to Delete" expr="[Characters to Delete]" /></inputs><outputs><output type="text" name="Amended Sample" stage="Amended Sample" /></outputs><onsuccess>c7719606-01b9-4626-9a24-4d9cf42d1e75</onsuccess><code><![CDATA[For Each C as Char in Characters_To_Delete.ToCharArray()
	Text_Sample = Text_Sample.Replace(C, "")
Next

Amended_Sample = Text_Sample]]></code></stage><stage stageid="930e7d0f-68a5-4d40-a291-e2dcfa4918c6" name="Amended Sample" type="Data"><subsheetid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</subsheetid><display x="90" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="6a0bb945-2946-4e17-8e4a-b8d7eb5e1060" name="Escape Sendkeys String" type="SubSheetInfo"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><narrative>Escapes characters to be sent via the sendkeys method, to ensure that all characters are interpreted literally. If left unescaped, some characters such as % carry a special meaning rather than their literal value.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="5bb1d666-6ef6-4371-a0f4-111fdf5ee69e" name="Start" type="Start"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Sendkeys Text" narrative="The text to be escaped" stage="Sendkeys Text" /></inputs><onsuccess>5ea70bdd-732c-4a8e-b5cb-a747f97e1090</onsuccess></stage><stage stageid="7bfda30d-2f75-46ec-b5e2-88a965528b49" name="End" type="End"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><loginhibit /><display x="15" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="text" name="Escaped Sendkeys Text" narrative="The escaped sendkeys text, which can be sent via the sendkeys method without fear of misinterpretation" stage="Escaped Sendkeys Text" /></outputs></stage><stage stageid="5ea70bdd-732c-4a8e-b5cb-a747f97e1090" name="Escape Text" type="Code"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><loginhibit /><display x="15" y="-30" w="90" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="SendKeys Text" expr="[Sendkeys Text]" /></inputs><outputs><output type="text" name="Escaped Sendkeys Text" stage="Escaped Sendkeys Text" /></outputs><onsuccess>7bfda30d-2f75-46ec-b5e2-88a965528b49</onsuccess><code><![CDATA[Escaped_Sendkeys_Text = Regex.Replace(SendKeys_Text, "[\[\]{}+^%~()]", "{$0}")]]></code></stage><stage stageid="c0e80092-2acc-4552-b6ab-9e3fa5abb07a" name="Escaped Sendkeys Text" type="Data"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><display x="150" y="90" w="180" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="172f06e8-629e-434a-9bee-084a177606eb" name="Sendkeys Text" type="Data"><subsheetid>040cc29a-27ac-402c-8a66-328554dd4bc0</subsheetid><display x="90" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4e2f3e3d-72e1-4483-b79e-49e9f1387d8a" name="Compare Font Text" type="SubSheetInfo"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><narrative>Compares two items of text read using Font Recognition for equality, where "equality" means that the two text samples match following the removal of conflicting font characters.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="1a092a3a-7389-4bd7-8d31-a3ed761ff97c" name="Start" type="Start"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><preconditions><condition narrative="None" /></preconditions><postconditions><condition narrative="None" /></postconditions><display x="150" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Sample 1" narrative="The first item to be compared" stage="Sample 1" /><input type="text" name="Sample 2" narrative="The second item to be compared" stage="Sample 2" /><input type="collection" name="Conflicting Characters" narrative="A collection of conflicting font characters, as read from a read stage for the font of interest" stage="Conflicting Characters" /></inputs><onsuccess>2aac81fd-1231-450b-94e5-3a5928ddb08b</onsuccess></stage><stage stageid="f07d147e-0807-4996-8746-e6b232b63283" name="End" type="End"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="330" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Samples Equal" narrative="Indicates whether the samples are equal, once conflicting characters are removed" stage="Samples Equal" /><output type="text" name="Amended Sample 1" narrative="The first sample, with conflicting characters removed" stage="Sample 1" /><output type="text" name="Amended Sample 2" narrative="The second sample, with conflicting characters removed" stage="Sample 2" /></outputs></stage><stage stageid="fbb964d4-b0d6-4729-b88d-04d1cbfd0cb5" name="Sample 1" type="Data"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><display x="225" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="4187bcbb-ee93-4b01-b7b6-4e4944c8967a" name="Sample 2" type="Data"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><display x="285" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="16d61c29-acde-49f1-a0dc-5b93885cb724" name="Conflicting Characters" type="Collection"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><display x="0" y="-15" w="120" h="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /></stage><stage stageid="2aac81fd-1231-450b-94e5-3a5928ddb08b" name="For Each Character Group" type="LoopStart"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="45" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>dde2966f-3ac6-4a0a-9613-7f8c83db2d3a</onsuccess><groupid>d5a546ca-79ce-4ba9-917c-4165b543a787</groupid><looptype>ForEach</looptype><loopdata>Conflicting Characters</loopdata></stage><stage stageid="5f4d2cf9-a6a3-47c1-beed-8c8912b3f81e" name="Next Character Group" type="LoopEnd"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="180" w="120" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>cd3e8b56-7767-489d-96de-6c9d0740de02</onsuccess><groupid>d5a546ca-79ce-4ba9-917c-4165b543a787</groupid></stage><stage stageid="cd3e8b56-7767-489d-96de-6c9d0740de02" name="Determine Equality" type="Calculation"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="240" /><font family="Tahoma" size="10" style="Regular" color="000000" /><onsuccess>f07d147e-0807-4996-8746-e6b232b63283</onsuccess><calculation expression="[Sample 1] = [Sample 2]" stage="Samples Equal" /></stage><stage stageid="7c680a7d-326b-4d7b-b298-02df94778092" name="Samples Equal" type="Data"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><display x="225" y="330" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a589a76f-6d45-4f76-a3d8-a7220c5409ed" name="Extract Regex Values" type="SubSheetInfo"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="e85db034-efea-43db-9f60-c5d086ce0f5a" name="Start" type="Start"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><loginhibit /><display x="45" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Regex Pattern" narrative="The regex pattern to apply" stage="Regex Pattern" /><input type="text" name="Target String" narrative="The target string to which apply the pattern and extract values" stage="Target String" /><input type="collection" name="Named Values" narrative="A collection of named values to extract from the target string" stage="Named Values" /></inputs><onsuccess>526b7aa5-2df6-4a52-a8d5-fef9e3c9e776</onsuccess></stage><stage stageid="78d491bd-ce28-422a-8d1f-334ba9248f4e" name="End" type="End"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><loginhibit /><display x="45" y="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="collection" name="Named Values" narrative="Results of the named values extracted from the regex" stage="Named Values" /></outputs></stage><stage stageid="e0d2e8e4-b2f1-4cab-a39c-7252cd042e68" name="Regex Pattern" type="Data"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><display x="240" y="-105" w="300" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">(?&lt;Lower&gt;\d+)\s*(-|to)\s*(?&lt;Upper&gt;\d+)</initialvalue><private /><alwaysinit /></stage><stage stageid="d1344ba9-2a6f-4a88-bc72-0188e2ead8b7" name="Target String" type="Data"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><narrative>100-200
56 to 99
400 - 600</narrative><display x="240" y="-60" w="300" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue xml:space="preserve">100-200</initialvalue><private /><alwaysinit /></stage><stage stageid="70580e44-41d3-40b3-9b12-3460963b2f5f" name="Named Values" type="Collection"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><display x="240" y="30" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>collection</datatype><private /><alwaysinit /><collectioninfo><field name="Name" type="text" /><field name="Value" type="text" /></collectioninfo><initialvalue><row><field name="Name" type="text" value="Lower" /><field name="Value" type="text" value="" /></row><row><field name="Name" type="text" value="Upper" /><field name="Value" type="text" value="" /></row></initialvalue></stage><stage stageid="526b7aa5-2df6-4a52-a8d5-fef9e3c9e776" name="Extract Values" type="Code"><subsheetid>06780f7c-9622-4d84-9db3-bb56a2ff9f36</subsheetid><loginhibit /><display x="45" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Regex Pattern" expr="[Regex Pattern]" /><input type="text" name="Target String" expr="[Target String]" /><input type="collection" name="Named Values" expr="[Named Values]" /></inputs><outputs><output type="collection" name="Named Values Out" stage="Named Values" /></outputs><onsuccess>78d491bd-ce28-422a-8d1f-334ba9248f4e</onsuccess><code><![CDATA[For Each Row As DataRow in Named_Values.Rows
	Row("Value") = ""
Next


Dim R as New Regex(Regex_Pattern, RegexOptions.SingleLine)
Dim M as Match = R.Match(Target_String)
If M IsNot Nothing AndAlso M.Success Then
	If M.Groups IsNot Nothing AndAlso M.Groups.Count > 0 Then
		For Each Row As DataRow in Named_Values.Rows
			Dim GroupName As String = CStr(Row("Name"))
			Dim G As Group = M.Groups(GroupName)
			If G.Success Then
				Row("Value") = G.Value
			End If
		Next
	End If
End If

Named_Values_Out = Named_Values]]></code></stage><stage stageid="33e5caa5-61ec-4ef6-9ae8-01466a277896" name="ParseCSV" type="Code"><subsheetid>f5b26213-5463-4b2d-b10f-b188876b436f</subsheetid><loginhibit /><display x="150" y="-45" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="CSV" expr="[CSV]" /><input type="collection" name="Schema" expr="[Schema]" /><input type="flag" name="FirstRowIsHeader" expr="[First Row Is Header]" /></inputs><outputs><output type="collection" name="outputCollection" stage="Output Collection" /></outputs><onsuccess>f06f6c62-eada-49b0-bf89-fdbb436e13fe</onsuccess><code><![CDATA[Const SchemaColumnName As String = "Column Name"
Const DefaultColumnName As String = "Column "
Const nonSchemaHeadingIndex As Integer = 0

Dim emptySchema As Boolean = Schema Is Nothing OrElse Schema.Rows.Count = 0

Dim csvValuesList = ParseCsvToList(CSV)

' If we want to parse with no schema and want the first row be used as headings 
' we need to know what the headings will be.
Dim nonSchemaHeadings = csvValuesList(nonSchemaHeadingIndex)

' Arrange the column headings into the table first.
If emptySchema Then
	For Each columnHeader As String In nonSchemaHeadings
		Dim colName As String = If(FirstRowIsHeader, columnHeader,
											 DefaultColumnName & outputCollection.Columns.Count)
		outputCollection.Columns.Add(colName, GetType(String))
	Next
Else
	For Each columnHeader As DataRow In Schema.Rows
		Dim colName As String = columnHeader(SchemaColumnName).ToString
		outputCollection.Columns.Add(colName, GetType(String))
	Next
End If

' If the first row is being used for headings then skip those headings / values in csvValuesList.
Dim startListIndex As Integer = If(FirstRowIsHeader, nonSchemaHeadingIndex + 1, nonSchemaHeadingIndex)

' Insert the csv values into the table row by row.
For i As Integer = startListIndex To csvValuesList.Count - 1
	Dim currentRow As Datarow = outputCollection.NewRow
	outputCollection.Rows.Add(currentRow)

	Dim csvArray = csvValuesList(i)
	For columnIndex As Integer = 0 To csvArray.Length - 1
		currentRow.Item(columnIndex) = csvArray(columnIndex)
	Next
Next]]></code></stage><stage stageid="feb4e385-2919-4066-86ad-53cb6226c867" name="InStr" type="SubSheetInfo"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><narrative>Tests to see if one peice of text contains another peice of sub text.</narrative><display x="-150" y="-180" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="353f092b-3d6f-4fda-bdab-cd5798047c44" name="End" type="End"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><display x="15" y="60" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="Position" narrative="The index of the sub text within the text or -1 if not found" stage="Position" /></outputs></stage><stage stageid="f594335d-8723-4704-a8ae-e8dbcfe492c7" name="Text" type="Data"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><display x="-180" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="1a43e2c2-c8c1-4dfd-b58f-2775e2ea7d0e" name="Search String" type="Data"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><display x="-180" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="c9bbb24e-51f9-489f-9944-30d9612c396a" name="Start Byte" type="Data"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><display x="-180" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>0</initialvalue><private /><alwaysinit /></stage><stage stageid="65e660c1-4379-4323-9e01-6cd7ae38f150" name="Note1" type="Note"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-180" y="-60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="424c6e04-b000-4dce-8eb7-ba00b0fea671" name="InStr" type="Code"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="InText" expr="[Text]" /><input type="text" name="Search String" expr="[Search String]" /><input type="number" name="Start Byte" expr="[Start Byte]" /><input type="number" name="Compare Method" expr="[Compare Method]" /></inputs><outputs><output type="number" name="Position" stage="Position" /></outputs><onsuccess>353f092b-3d6f-4fda-bdab-cd5798047c44</onsuccess><code><![CDATA[  Position = Microsoft.VisualBasic.InStr(Start_Byte,InText, Search_String, 1)]]></code></stage><stage stageid="7f283fb0-e9fa-4e24-82d1-aae53fd5afe1" name="Position" type="Data"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><display x="-165" y="165" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="d00b9153-969d-4db4-b737-b1ac835c7b2a" name="Compare Method" type="Data"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><narrative>1 = text, 0 = binary</narrative><display x="-180" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>1</initialvalue><private /><alwaysinit /></stage><stage stageid="4bbb2261-2d01-49a5-88e8-c8d37745fd60" name="InStrRev" type="SubSheetInfo"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><narrative>Tests to see if one peice of text contains another peice of sub text but matches in reverse.</narrative><display x="-150" y="-135" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="3ddcb7e5-570f-430d-8374-ed9066da51c0" name="Start" type="Start"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><display x="15" y="-105" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text" narrative="Text to search in" stage="Text" /><input type="text" name="Search String" narrative="The text to search for" stage="Search String" /><input type="number" name="Start Byte" narrative="Where in the string to search from" stage="Start Byte" /><input type="number" name="Compare Method" narrative="1=text, 0=binary" stage="Compare Method" /></inputs><onsuccess>4991333f-9a42-4dc3-b73b-a8bc97edab6d</onsuccess></stage><stage stageid="251f9278-c41e-44a0-835b-bfc48910933d" name="Text" type="Data"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><display x="-180" y="-30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="393bbd43-ae95-438d-b358-f51cc69d5e5c" name="Search String" type="Data"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><display x="-180" y="0" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="a898a11a-c6ca-4a70-abcd-42f38192de24" name="Start Byte" type="Data"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><display x="-180" y="30" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>-1</initialvalue><private /><alwaysinit /></stage><stage stageid="73737012-9282-4e33-9d87-c4718367216d" name="Note1" type="Note"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><narrative>Inputs</narrative><display x="-180" y="-60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="4991333f-9a42-4dc3-b73b-a8bc97edab6d" name="InStrRev" type="Code"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><display x="15" y="-15" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="InText" expr="[Text]" /><input type="text" name="Search String" expr="[Search String]" /><input type="number" name="Start Byte" expr="[Start Byte]" /><input type="number" name="Compare Method" expr="[Compare Method]" /></inputs><outputs><output type="number" name="Position" stage="Position" /></outputs><onsuccess>ba288c3f-ff29-4df2-af77-a2823f65f60c</onsuccess><code><![CDATA[  Position = Microsoft.VisualBasic.InStrRev(InText, Search_String, Start_Byte, 1)]]></code></stage><stage stageid="63d5b70d-b54a-4451-b957-9ea177292994" name="Position" type="Data"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><display x="-165" y="150" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="57a39985-6197-4f21-bdff-e46bd897faa6" name="Compare Method" type="Data"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><narrative>1 = text, 0 = binary</narrative><display x="-180" y="60" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>number</datatype><initialvalue>1</initialvalue><private /><alwaysinit /></stage><stage stageid="d0bb7b29-fbb3-43cd-ab69-7f76a9c657e5" name="Note1" type="Note"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-165" y="120" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="b27c7a93-8e3b-4ed8-b105-e08cd2c96fdf" name="Note1" type="Note"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><narrative>Outputs</narrative><display x="-165" y="135" w="150" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="bc4f3574-a096-4b9f-b836-0bc100bf2a18" name="Start" type="Start"><subsheetid>0244396a-1d3d-4892-b6cb-461468f4c7e1</subsheetid><loginhibit /><preconditions><condition narrative="" /></preconditions><display x="15" y="-90" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Text" narrative="Text to search in" stage="Text" /><input type="text" name="Search String" narrative="The text to search for" stage="Search String" /><input type="number" name="Start Byte" narrative="Where in the string to search from" stage="Start Byte" /><input type="number" name="Compare Method" narrative="1=text, 0=binary" stage="Compare Method" /></inputs><onsuccess>424c6e04-b000-4dce-8eb7-ba00b0fea671</onsuccess></stage><stage stageid="ba288c3f-ff29-4df2-af77-a2823f65f60c" name="End" type="End"><subsheetid>9ab28c01-86eb-458d-b8d9-74f98926d266</subsheetid><loginhibit /><display x="15" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="number" name="Position" narrative="The index of the sub text within the text from the end or -1 if not found" stage="Position" /></outputs></stage><stage stageid="73739a66-400b-488a-bd7a-63a2f0d2a4ef" name="Test Regex Match" type="SubSheetInfo"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><narrative>Check if a given Text value matches a regular expression.</narrative><display x="-195" y="-105" w="150" h="90" /><font family="Tahoma" size="10" style="Regular" color="000000" /></stage><stage stageid="568b67f8-4216-4af4-bea8-1c83bbff7e16" name="Start" type="Start"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><loginhibit /><display x="-30" y="-120" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Regex Pattern" narrative="The regex pattern to apply" stage="Regex Pattern" /><input type="text" name="Target String" narrative="The target string to which apply the pattern and extract values" stage="Target String" /></inputs><onsuccess>2ad0c111-6108-4ca5-945b-22aab4b6bb27</onsuccess></stage><stage stageid="46282093-d3a9-4e38-b030-95b332ec5371" name="End" type="End"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><loginhibit /><display x="-30" y="75" /><font family="Tahoma" size="10" style="Regular" color="000000" /><outputs><output type="flag" name="Matched?" narrative="Whether or not the regex match" stage="Regex Match" /></outputs></stage><stage stageid="32d3ef8a-d0b2-4093-afc5-98bad356c881" name="Regex Pattern" type="Data"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><display x="165" y="-120" w="300" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="5747c96e-0ce3-4e78-b446-17b9cef5b655" name="Target String" type="Data"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><narrative>100-200
56 to 99
400 - 600</narrative><display x="165" y="-75" w="300" h="30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>text</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="2ad0c111-6108-4ca5-945b-22aab4b6bb27" name="Test Regex Match1" type="Code"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><loginhibit /><display x="-30" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><inputs><input type="text" name="Regex Pattern" expr="[Regex Pattern]" /><input type="text" name="Target String" expr="[Target String]" /></inputs><outputs><output type="flag" name="Regex Match" stage="Regex Match" /></outputs><onsuccess>46282093-d3a9-4e38-b030-95b332ec5371</onsuccess><code><![CDATA[
Dim R as New Regex(Regex_Pattern, RegexOptions.SingleLine)
Dim M as Match = R.Match(Target_String)
Regex_Match =  M IsNot Nothing AndAlso M.Success]]></code></stage><stage stageid="24d6e567-f121-4d8a-a4ee-1402f8f2832d" name="Regex Match" type="Data"><subsheetid>a6b6398e-c21a-4c4e-9742-65ccad8370d9</subsheetid><display x="45" y="-30" /><font family="Tahoma" size="10" style="Regular" color="000000" /><datatype>flag</datatype><initialvalue /><private /><alwaysinit /></stage><stage stageid="dde2966f-3ac6-4a0a-9613-7f8c83db2d3a" name="Delete from Sample 1" type="SubSheet"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="90" /><inputs><input type="text" name="Text Sample" narrative="The piece of text to be operated on" expr="[Sample 1]" /><input type="text" name="Characters to Delete" narrative="A string of characters to be deleted from the Text Sample" expr="[Conflicting Characters.Character Group]" /></inputs><outputs><output type="text" name="Amended Sample" narrative="The amended sample, with the characters deleted" stage="Sample 1" /></outputs><onsuccess>50c19466-f7e4-4066-a4c1-d18f65876de0</onsuccess><processid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</processid></stage><stage stageid="50c19466-f7e4-4066-a4c1-d18f65876de0" name="Delete from Sample 2" type="SubSheet"><subsheetid>527ca986-a03f-4231-880e-5b1c244b035e</subsheetid><loginhibit /><display x="150" y="135" /><inputs><input type="text" name="Text Sample" narrative="The piece of text to be operated on" expr="[Sample 2]" /><input type="text" name="Characters to Delete" narrative="A string of characters to be deleted from the Text Sample" expr="[Conflicting Characters.Character Group]" /></inputs><outputs><output type="text" name="Amended Sample" narrative="The amended sample, with the characters deleted" stage="Sample 2" /></outputs><onsuccess>5f4d2cf9-a6a3-47c1-beed-8c8912b3f81e</onsuccess><processid>e70e8f13-02df-4b14-bb74-6fd5c4c95928</processid></stage></process></object>
        <credential id="625783b8-3529-4752-89e9-41b185823821" name="GUD_Database Credentials" xmlns="http://www.blueprism.co.uk/product/credential">
            <expirydate>2022-05-28T00:00:00.0000000</expirydate>
            <credentialType>General</credentialType>
            <members>
                <process id="ca95920d-9962-428b-aff8-96a966dce362" />
                <object id="29192c0f-d13c-4769-bed3-9c51217efab4" />
                <object id="b99d5b9f-f5b7-45a4-b7b2-17a2cce2ac4c" />
                <object id="1fa37b16-509a-4ca9-9b5d-1dc3f4fd4b4f" />
                <object id="66085a0f-6bf6-45e2-b5ed-6345f014f05b" />
                <object id="6f9680f1-616c-4884-b58c-42ed51446377" />
                <object id="3a5f7760-1621-4a03-bd1e-c7477b5a6de4" />
                <object id="1b13f5b8-01d1-441e-bd7f-54884a24d71f" />
            </members>
        </credential>
        <credential id="e1982b2e-6320-4c67-acc6-9fdad9b16e48" name="GUD_Email Credentials" xmlns="http://www.blueprism.co.uk/product/credential">
            <credentialType>General</credentialType>
            <members>
                <process id="ca95920d-9962-428b-aff8-96a966dce362" />
                <object id="29192c0f-d13c-4769-bed3-9c51217efab4" />
                <object id="b99d5b9f-f5b7-45a4-b7b2-17a2cce2ac4c" />
                <object id="1fa37b16-509a-4ca9-9b5d-1dc3f4fd4b4f" />
                <object id="66085a0f-6bf6-45e2-b5ed-6345f014f05b" />
                <object id="6f9680f1-616c-4884-b58c-42ed51446377" />
                <object id="3a5f7760-1621-4a03-bd1e-c7477b5a6de4" />
                <object id="1b13f5b8-01d1-441e-bd7f-54884a24d71f" />
            </members>
        </credential>
        <environment-variable id="GUD_Configure Email Server Port" name="GUD_Configure Email Server Port" type="number" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Email Server Port</description>
        </environment-variable>
        <environment-variable id="GUD_Configure Email SMTP Server" name="GUD_Configure Email SMTP Server" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Email Server from where email will be sent</description>
        </environment-variable>
        <environment-variable id="GUD_Configure Email Use SSL Flag" name="GUD_Configure Email Use SSL Flag" type="flag" value="True" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Use SSL Flag</description>
        </environment-variable>
        <environment-variable id="GUD_Controller Email ID" name="GUD_Controller Email ID" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Email id whom to be contacted in case of any exception</description>
        </environment-variable>
        <environment-variable id="GUD_Database Credential Name" name="GUD_Database Credential Name" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Name of the Database Credentials</description>
        </environment-variable>
        <environment-variable id="GUD_Database Name" name="GUD_Database Name" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Name of the database on the server</description>
        </environment-variable>
        <environment-variable id="GUD_Database Server" name="GUD_Database Server" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Database Server where Database resides</description>
        </environment-variable>
        <environment-variable id="GUD_Database Table Fields" name="GUD_Database Table Fields" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Comma separated name of the fields with table name (i.e. Table.ColumnName,, which will be shared with requestor</description>
        </environment-variable>
        <environment-variable id="GUD_Database Tables" name="GUD_Database Tables" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Comma separated table names, where the data will be fetched from</description>
        </environment-variable>
        <environment-variable id="GUD_Database Tables Criterias" name="GUD_Database Tables Criterias" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Comma separated table criterias according to which the data from two tables will be extracted</description>
        </environment-variable>
        <environment-variable id="GUD_Excel Path" name="GUD_Excel Path" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Path of the excel sheet</description>
        </environment-variable>
        <environment-variable id="GUD_Excel Sheet Name" name="GUD_Excel Sheet Name" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Sheet or Tab name in the Excel where data is to be picked</description>
        </environment-variable>
        <environment-variable id="GUD_Folder Archive Path" name="GUD_Folder Archive Path" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Path of the folder where files (like report, .xlsx file etc) will be archived after processing</description>
        </environment-variable>
        <environment-variable id="GUD_From Email Credential Name" name="GUD_From Email Credential Name" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Credential Name for the user through which email will be sent</description>
        </environment-variable>
        <environment-variable id="GUD_Report Flag" name="GUD_Report Flag" type="flag" value="True" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Whether to send report to Controller</description>
        </environment-variable>
        <environment-variable id="GUD_User Email Field in Database Table" name="GUD_User Email Field in Database Table" type="text" value="" xmlns="http://www.blueprism.co.uk/product/environment-variable">
            <description>Table Column name in which requestor user's email address is stored in TableName.ColumnName format</description>
        </environment-variable>
        <process-group id="0017a862-7257-4a98-82e2-376bd6c0fe03" name="GDPRSAR" isDefaultGroup="False" xmlns="http://www.blueprism.co.uk/product/process-group">
            <members>
                <process id="ca95920d-9962-428b-aff8-96a966dce362" />
            </members>
        </process-group>
        <object-group id="f3edc82c-dde3-41c5-a4c3-bb2e43b342d3" name="Default" isDefaultGroup="True" xmlns="http://www.blueprism.co.uk/product/object-group">
            <members>
                <object id="29192c0f-d13c-4769-bed3-9c51217efab4" />
                <object id="b99d5b9f-f5b7-45a4-b7b2-17a2cce2ac4c" />
                <object id="1fa37b16-509a-4ca9-9b5d-1dc3f4fd4b4f" />
                <object id="66085a0f-6bf6-45e2-b5ed-6345f014f05b" />
                <object id="6f9680f1-616c-4884-b58c-42ed51446377" />
                <object id="3a5f7760-1621-4a03-bd1e-c7477b5a6de4" />
                <object id="1b13f5b8-01d1-441e-bd7f-54884a24d71f" />
            </members>
        </object-group>
    </bpr:contents>
</bpr:release>